name: Artifactory Installation

env:
  GITHUB_CONTEXT: ${{ toJson(github) }}

on:
  # For KLAB, trigger on push to master or manual run
  #push:
  #  branches:
  #    - master
  #  paths:
  #    - "apps/artifactory/artifactory-ha/**"
  workflow_dispatch:

  # For PROD, trigger on publication of release
  #release:
  #  types: [published]

defaults:
  run:
    working-directory: ./apps/artifactory/artifactory-ha

jobs:
  artifactory_installation:
    if: |
      (github.event_name == 'release' && contains(github.event.release.name, 'artifactory-ha')) ||
      github.event_name != 'release'
    runs-on: ubuntu-latest
    env:
      FILE_STAGING_DIR: /tmp
      ARTIFACTORY_LICENSE_FILE: artifactory_license.txt
      OCP_PROJECT_NAME: devops-artifactory
    steps:
      - uses: actions/checkout@v2
        with:
          ref: feature/initial-artifactory-workflow

      - name: Create certificate directories
        env:
          DIRS: artifactory wildcard
        run: for dir in $DIRS; do mkdir -p ${{ env.FILE_STAGING_DIR }}/$dir; done

      - name: Create certificate files
        run: |
          printf '%s\n' "${{ secrets.SILVER_ARTIFACTORY_CA_CRT }}"  > ${{ env.FILE_STAGING_DIR }}/artifactory/ca.crt
          printf '%s\n' "${{ secrets.SILVER_ARTIFACTORY_TLS_CRT }}" > ${{ env.FILE_STAGING_DIR }}/artifactory/tls.crt
          printf '%s\n' "${{ secrets.SILVER_ARTIFACTORY_KEY_CRT }}" > ${{ env.FILE_STAGING_DIR }}/artifactory/key.crt
          printf '%s\n' "${{ secrets.SILVER_WILDCARD_CA_CRT }}"     > ${{ env.FILE_STAGING_DIR }}/wildcard/ca.crt
          printf '%s\n' "${{ secrets.SILVER_WILDCARD_TLS_CRT }}"    > ${{ env.FILE_STAGING_DIR }}/wildcard/tls.crt
          printf '%s\n' "${{ secrets.SILVER_WILDCARD_KEY_CRT }}"    > ${{ env.FILE_STAGING_DIR }}/wildcard/key.crt

      # If the trigger was manual or a push, we're deploying to KLAB
      - name: Prepare KLAB params
        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }} 
        run: |
          echo INSTALL_TARGET=nonprod >> $GITHUB_ENV
          printf "${{ secrets.KLAB_ARTIFACTORY_LICENSE }}" > ${{ env.FILE_STAGING_DIR }}/${{ env.ARTIFACTORY_LICENSE_FILE }}
          echo SSO_ID=\"${{ secrets.KLAB_SSO_ID }}\" >> $GITHUB_ENV
          echo SSO_SECRET=\"${{ secrets.KLAB_SSO_SECRET }}\" >> $GITHUB_ENV
          echo OPENSHIFT_TOKEN=\"${{ secrets.KLAB_OPENSHIFT_TOKEN }}\" >> $GITHUB_ENV
          echo OPENSHIFT_URL=\"${{ secrets.KLAB_OPENSHIFT_URL }}\" >> $GITHUB_ENV
          echo ARTIFACTORY_URL=artifacts.apps.klab.devops.gov.bc.ca >> $GITHUB_ENV

      # If the trigger was a release publication, we're deploying to PROD
      - name: Prepare PROD params
        if: ${{ github.event_name == 'release' }} 
        run: |
          echo INSTALL_TARGET=prod >> $GITHUB_ENV
          printf "${{ secrets.SILVER_ARTIFACTORY_LICENSE }}" > ${{ env.FILE_STAGING_DIR }}/${{ env.ARTIFACTORY_LICENSE_FILE }}
          echo SSO_ID=\"${{ secrets.SILVER_SSO_ID }}\" >> $GITHUB_ENV
          echo SSO_SECRET=\"${{ secrets.SILVER_SSO_SECRET }}\" >> $GITHUB_ENV
          echo OPENSHIFT_TOKEN=\"${{ secrets.SILVER_OPENSHIFT_TOKEN }}\" >> $GITHUB_ENV
          echo OPENSHIFT_URL=\"${{ secrets.SILVER_OPENSHIFT_URL }}\" >> $GITHUB_ENV
          echo ARTIFACTORY_URL=artifacts.developer.gov.bc.ca >> $GITHUB_ENV

      # Pre-installation steps
      # ----------------------
      - name: Generate master_key
        run: echo MASTER_KEY=`openssl rand -hex 32` >> $GITHUB_ENV

      - name: Generate join_key
        run: echo JOIN_KEY=`openssl rand -hex 32` >> $GITHUB_ENV

      - name: Prepare Artifactory license file
        run: echo ${{ env.ARTIFACTORY_LICENSE }} >> ${{ env.FILE_STAGING_DIR }}/${{ env.ARTIFACTORY_LICENSE_FILE }}

      - name: Get version number from vars.yaml
        run: echo ARTIFACTORY_VERSION=`grep ^artifactory_version vars.yaml | awk '{ print $2 }'` >> $GITHUB_ENV

      - name: Stage the vars-local.yaml file
        run: cp vars.yaml vars-local.yaml

      - name: Set vars in vars-local.yaml
        run: |
          sed -i 's|^master_key:.*|master_key: ${{ env.MASTER_KEY }}|' vars-local.yaml
          sed -i 's|^join_key:.*|join_key: ${{ env.JOIN_KEY }}|' vars-local.yaml
          sed -i 's|^folder:.*|folder: ${{ env.FILE_STAGING_DIR }}|' vars-local.yaml
          sed -i 's|^artifactory_license_file:.*|artifactory_license_file: ${{ env.ARTIFACTORY_LICENSE_FILE }}|' vars-local.yaml
          sed -i 's|^sso_id:.*|sso_id: ${{ env.SSO_ID }}|' vars-local.yaml
          sed -i 's|^sso_secret:.*|sso_secret: ${{ env.SSO_SECRET }}|' vars-local.yaml
          sed -i 's|^project_name:.*|project_name: ${{ env.OCP_PROJECT_NAME }}|' vars-local.yaml
          sed -i 's|^artifactory_url:.*|artifactory_url: ${{ env.ARTIFACTORY_URL }}|' vars-local.yaml
          sed -i "s|key: 'docker-remote'.*|key: 'docker-remote', username: '${{ secrets.DOCKER_REMOTE_ID }}', password: '${{ secrets.DOCKER_REMOTE_PASSWORD }}'|" vars-local.yaml
          sed -i "s|key: 'redhat-docker-remote'.*|key: 'redhat-docker-remote', username: '${{ secrets.REDHAT_DOCKER_REMOTE_ID }}', password: '${{ secrets.REDHAT_DOCKER_REMOTE_PASSWORD }}'|" vars-local.yaml

      - name: Verify pre-installation
        if: ${{ failure() }}
        run: echo "Pre-installation steps were not entirely successful"; exit 1

      - name: vars debug
        run: tail -1 vars-local.yaml

      - name: artifactory url debug
        run: echo "--> ${{ env.ARTIFACTORY_URL }}"

      - name: version debug
        run: echo "--> ${{ env.ARTIFACTORY_VERSION }}"

      # Installation steps
      # ------------------
      - name: Log in to OpenShift
        run: |
          oc version
          oc login --token=${{ env.OPENSHIFT_TOKEN }} --server=${{ env.OPENSHIFT_URL }}
          oc project ${{ env.OCP_PROJECT_NAME }}
          oc get pods

      - name: Verify login and make sure we connected to the right namespace
        if: ${{ failure() }}
        run: echo "OCP login to ${{ env.OCP_PROJECT_NAME }} failed"; exit 1

      # Verify that all backup members are up by checking the 'ping' health
      # check API.
      # If there are no backup members, carry on with the installation.
      - name: Check that "member" (backup) instances are up
        run: |
          MEMBER_PODS_EXIST=0
          MEMBER_PING_FAILED=0
          for pod in `oc get pods | grep ^artifactory-ha-member | awk '{ print $1 }'`; do
            MEMBER_PODS_EXIST=1
            PING=`oc exec $pod -- curl -s http://localhost:8040/artifactory/api/system/ping`
            if [ "$PING" != "OK" ]; then MEMBER_PING_FAILED=1; fi
          done
          if [ "$MEMBER_PODS_EXIST" == "1" ] && [ "$MEMBER_PING_FAILED" == "1" ]; then
            echo "Artifactory backup member health check failed."
            echo "Cancelling installation"
            exit 1
          elif [ "$MEMBER_PODS_EXIST" == "1" ]; then
            echo "Member health check passed"
          else
            echo "There are no backup members - continuing with installation"
          fi

      #- name: Run the playbook
      #  run: ansible-playbook install.yaml

      # Post-installation steps?
      # ------------------------
      # <change the Docker access method>

      # Create a draft release.  When the release is published, the Prod
      # deployment will be triggered
      # See also: https://github.com/elgohr/Github-Release-Action
      #- name: Create a draft release
      #  uses: ncipollo/release-action@v1
      #  with:
      #    token: ${{ secrets.GITHUB_TOKEN }}
      #    draft: true
      #    name: "artifactory-${{ env.ARTIFACTORY_VERSION }}"
      #    tag: "artifactory-${{ env.ARTIFACTORY_VERSION }}"
      #    allowUpdates: true
      #    body: "Installation of Artifactory ${{ env.env.ARTIFACTORY_VERSION }} in ${{ env.INSTALL_TARGET }}"



