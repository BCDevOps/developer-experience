- hosts: localhost
  vars_files:
    vars-local.yaml
  tasks:

      # create processed folder
    - name: Create processed directory if it does not exist
      file:
        path: ./processed
        state: directory
        mode: '0755'

    # Removing: this is done in the GitHub Action
    #- name: Change to Artifactory namespace
    #  command: >
    #    oc project {{ project_name }}

    - name: Prepare network security policy template
      template:
        src: ./templates/nsp.yaml.j2
        dest: ./processed/nsp.yaml
      when: nsp

      # deploy template
    - name: Apply network security policy
      command: >
        oc apply -f ./processed/nsp.yaml
      when: nsp

      # import artifactory image
    #- name: Import Artifactory image
    #  command: >
    #    oc import-image registry.connect.redhat.com/jfrog/artifactory-pro:{{ artifactory_version }} --confirm

      # make patroni build
    - name: Build Patroni image (process)
      command: >
        oc process -f ./templates/patroni-build.yaml -p GIT_URI=https://github.com/BCDevOps/platform-services \
                                           -p GIT_REF=master \
                                           -p SUFFIX=-pg{{ db_version }} \
                                           -p OUT_VERSION=v{{ db_version }}-latest \
                                           -p PG_VERSION={{ db_version }}
      register: patroni_build_processed
      when: build
    - copy: content="{{ patroni_build_processed.stdout }}" dest=./processed/patroni-build.json
      when: build
    - name: Build Patroni image (apply)
      command: >
        oc apply -f ./processed/patroni-build.json
      when: build

      # wait for the service to show up
    - name: Wait for the build to start
      pause:
        seconds: 5

    - name: Get patroni build information
      command: >
        oc get buildconfig patroni-pg{{ db_version}}
      when: build
      register: build_result
      ignore_errors: yes

    - name: Get build number
      set_fact:
        build_number: "{{ build_result.stdout | regex_search('([0-9]+)$') }}"
      when: build

    - name: Get build status for patroni-pg{{ db_version}}-{{ build_number }}
      command: >
        oc get build patroni-pg{{ db_version}}-{{ build_number }}
      register: build_status
      until: '"Complete" in build_status.stdout_lines[1]'
      retries: 30
      delay: 30
      when: build

    - name: Tag Patroni build
      command: >
        oc tag patroni:v{{ db_version }}-latest patroni:v{{ db_version }}-stable
      when: build

      # make secret
    - name: Make the Patroni secrets (process)
      command: >
        oc process -f ./templates/patroni-prereq-1.yaml \
                                             -p NAME=patroni \
                                             -p SUFFIX=-001 \
                                             -p APP_DB_PASSWORD={{ db_password }} \
                                             -p APP_DB_USERNAME=artifactory \
                                             -p APP_DB_NAME=artifactory
      register: patroni_secret_processed
    - copy: content="{{ patroni_secret_processed.stdout }}" dest=./processed/patroni-secret.json
    - name: Make the Patroni secrets (apply)
      command: >
        oc create -f ./processed/patroni-secret.json
      ignore_errors: yes
      register: patroni_secret_create

    - name: Make the Patroni prerequisites (process)
      command: >
        oc process -f ./templates/patroni-prereq-2.yaml \
                                             -p NAME=patroni \
                                             -p SUFFIX=-001
      register: patroni_prereq_processed
    - copy: content="{{ patroni_prereq_processed.stdout }}" dest=./processed/patroni-prereq.json
    - name: Make the Patroni prerequisites (create)
      command: >
        oc create -f ./processed/patroni-prereq.json
      ignore_errors: yes

    - name: Get existing password
      shell: >
        oc get secret patroni-001 -o json | jq '.data["app-db-password"]' | cut -d'"' -f 2 | base64 -d
      register: patroni_password
      when: patroni_secret_create.failed

    - name: Save password.
      set_fact:
        db_password: "{{ patroni_password.stdout }}"
      when: patroni_secret_create.failed

      # deploy patroni stateful set
    - name: Make the Patroni statefulset (process)
      command: >
        oc process -f ./templates/patroni-deploy.yaml -p NAME=patroni \
                                             -p "IMAGE_STREAM_NAMESPACE={{ project_name }}" \
                                             -p "IMAGE_STREAM_TAG=patroni:v{{ db_version }}-stable" \
                                             -p IMAGE_REGISTRY={{ image_registry }} \
                                             -p STORAGE_CLASS={{ db_storage_class }} \
                                             -p PVC_SIZE={{ db_storage_size }} \
                                             -p REPLICAS={{ db_replica_count }} \
                                             -p SUFFIX=-001
      register: patroni_statefulset_processed
    - copy: content="{{ patroni_statefulset_processed.stdout }}" dest=./processed/patroni-statefulset.json
    - name: Make the Patroni statefulset (apply)
      command: >
        oc apply -f ./processed/patroni-statefulset.json

    - name: Check deployment status for patroni statefulset
      command: >
        oc get statefulset patroni-001
      register: patroni_status
      until: '"{{ db_replica_count }}/{{ db_replica_count}}" in patroni_status.stdout_lines[1]'
      retries: 10
      delay: 10

    - name: Build manifest from template
      template:
        src: ./templates/manifest.yaml.j2
        dest: ./processed/manifest.yaml

      # deploy template
    - name: Apply artifactory manifest
      command: >
        oc apply -f ./processed/manifest.yaml

      # wait for the service to show up
    - name: Wait for the artifactory service to create before continuing.
      pause:
        seconds: 5

    - name: Make artifactory's SSL route
      command: >
        oc create route edge --service={{ artifactory_instance_name }} --cert={{ folder }}/artifactory/tls.crt --key={{ folder }}/artifactory/tls.key --ca-cert={{ folder }}/artifactory/ca.crt --hostname={{ artifactory_url }}
      when: ssl
      ignore_errors: true

    - name: Make artifactory's non-SSL route
      command: >
        oc create route edge --service={{ artifactory_instance_name }} --hostname={{ artifactory_url }}
      when: not ssl
      ignore_errors: true

      # make secret
    - name: Make the admin secret (process)
      command: >
        oc process -f ./templates/artifactory-admin-secret.yaml \
            ARTIFACTORY_NAME={{ artifactory_instance_name }} \
            ARTIFACTORY_ADMIN_PASSWORD={{ artifactory_password }}
      register: app_secret_processed
    - copy: content="{{ app_secret_processed.stdout }}" dest=./processed/artifactory-admin-secret.json
    - name: Make the admin secret (create)
      command: >
        oc create -f ./processed/artifactory-admin-secret.json
      ignore_errors: true
      register: secret_create

    - name: Get existing password
      shell: >
        oc get secret {{ artifactory_instance_name }}-admin -o json | jq '.data.password' | cut -d'"' -f 2 | base64 -d
      register: password
      when: secret_create.failed

    - name: Save password
      set_fact:
        artifactory_password: "{{ password.stdout }}"
      when: secret_create.failed

    - name: Set deployment password
      set_fact:
        deployment_password: "password"

    - name: Set deployment password
      set_fact:
        deployment_password:  "{{ password.stdout }}"
      when: secret_create.failed

    - name: Check deployment status for artifactory
      uri:
        url: "https://{{ artifactory_url }}/artifactory/api/system/version"
        user: "admin"
        password: "{{ deployment_password }}"
        method: GET
        force_basic_auth: yes
        validate_certs: no
      register: artifactory_status
      ignore_errors: yes
      until: artifactory_status.status == 200
      retries: 20
      delay: 30


    # POST-INSTALLATION
    # -----------------

    - name: Set Artifactory admin password
      uri:
        url: "https://{{ artifactory_url }}/artifactory/api/security/users/authorization/changePassword"
        user: "admin"
        password: "{{ deployment_password }}"
        method: POST
        body_format: json
        headers:
          Content-type: "application/json"
        body: '{"userName": "admin", "oldPassword": "{{ deployment_password }}", "newPassword1": "{{ artifactory_password }}", "newPassword2": "{{ artifactory_password }}"}'
        force_basic_auth: yes
        validate_certs: no
      when: deployment_password != artifactory_password

    - name: Set artifactory custom URL base
      uri:
        url: "https://{{ artifactory_url }}/artifactory/api/system/configuration/baseUrl"
        user: "admin"
        password: "{{ artifactory_password }}"
        method: PUT
        headers:
          Content-type: "text/plain"
        body: "https://{{ artifactory_url }}/artifactory"
        force_basic_auth: yes
        validate_certs: no

    - name: Upload artifactory licenses
      uri:
        url: "https://{{ artifactory_url }}/artifactory/api/system/licenses"
        user: "admin"
        password: "{{ artifactory_password }}"
        method: POST
        body_format: json
        headers:
          Content-type: "application/json"
        body: "{{ lookup('file', '{{ folder }}/{{ artifactory_license_file }}') | b64decode }}"
        force_basic_auth: yes
        validate_certs: no
        status_code: 200,400
        
    - name: Update reader's group
      uri:
        url: "https://{{ artifactory_url }}/artifactory/api/security/groups/readers"
        user: "admin"
        password: "{{ artifactory_password }}"
        method: POST
        body_format: json
        headers:
          Content-type: "application/json"
        body: '{ "autoJoin" : false }'
        force_basic_auth: yes
        status_code: 200
        validate_certs: no
      ignore_errors: yes

    - name: Build artifactory config from template
      template:
        src: ./templates/artifactory-config.yaml.j2
        dest: ./processed/artifactory-config.yaml

    - name: Apply artifactory configuration (including SSO)
      uri:
        url: "https://{{ artifactory_url }}/artifactory/api/system/configuration"
        user: "admin"
        password: "{{ artifactory_password }}"
        method: PATCH
        headers:
          Content-type: "application/yaml"
        body: "{{ lookup('file', './processed/artifactory-config.yaml') }}"
        force_basic_auth: yes
        status_code: 200
        validate_certs: no
      ignore_errors: yes

    - name: Create remote repos
      uri:
        url: "https://{{ artifactory_url }}/artifactory/api/repositories/{{ item.repo_key }}"
        user: "admin"
        password: "{{ artifactory_password }}"
        method: PUT
        body_format: json
        headers:
          Content-type: "application/json"
        body: '{"key" : "{{ item.repo_key }}", "description" : "{{ item.repo_desc }}", "rclass" : "remote", "url" : "{{ item.remote_url }}", "packageType" : "{{ item.pkg_type }}"}'
        force_basic_auth: yes
        status_code: 200, 400
      ignore_errors: yes
      loop: "{{ repo_list }}"

    - name: Create authenticated_users's group
      uri:
        url: "https://{{ artifactory_url }}/artifactory/api/security/groups/authenticated_users"
        user: "admin"
        password: "{{ artifactory_password }}"
        method: PUT
        body_format: json
        headers:
          Content-type: "application/json"
        body: "{{ lookup('file', 'templates/authenticated_users_group.json') }}"
        force_basic_auth: yes
        status_code: 201
        validate_certs: no
      ignore_errors: yes

    - name: Create authenticated_users's permission target
      uri:
        url: "https://{{ artifactory_url }}/artifactory/api/v2/security/permissions/authenticated_users"
        user: "admin"
        password: "{{ artifactory_password }}"
        method: PUT
        body_format: json
        headers:
          Content-type: "application/json"
        body: "{{ lookup('file', 'templates/authenticated_users_priv.json') }}"
        force_basic_auth: yes
        status_code: 200
        validate_certs: no
      ignore_errors: yes

    - name: Build HTTP settings from template
      template:
        src: ./templates/http_settings.json.j2
        dest: ./processed/http_settings.json

    - name: Update HTTP settings
      uri:
        url: "https://{{ artifactory_url }}/artifactory/api/system/configuration/webServer"
        user: "admin"
        password: "{{ artifactory_password }}"
        method: POST
        body_format: json
        headers:
          Content-type: "application/json"
        body: "{{ lookup('file', 'processed/http_settings.json') }}"
        force_basic_auth: yes
        status_code: 201
        validate_certs: no
      ignore_errors: yes

    - name: Make docker routes
      command: >
        oc create route edge {{ item.key }} --service={{ artifactory_instance_name }} --cert={{ folder }}/wildcard/tls.crt --key={{ folder }}/wildcard/tls.key --ca-cert={{ folder }}/wildcard/ca.crt --hostname={{ item.key }}.{{ artifactory_url }}  --port=artifactory
      loop: "{{ docker_list }}"
      when: ssl
      ignore_errors: yes

    - name: Make docker routes
      command: >
        oc create route edge {{ item.key }} --service={{ artifactory_instance_name }} --hostname={{ item.key }}.{{ artifactory_url }} --port=artifactory
      loop: "{{ docker_list }}"
      when: not ssl
      ignore_errors: yes

    - name: Update docker repos
      uri:
        url: "https://{{ artifactory_url }}/artifactory/api/repositories/{{ item.key }}"
        user: "admin"
        password: "{{ artifactory_password }}"
        method: POST
        body_format: json
        headers:
          Content-type: "application/json"
        body: '{ "username": "{{ item.username }}", "password": "{{ item.password }}", "blockPushingSchema1": false, "enableTokenAuthentication": true }'
        force_basic_auth: yes
        validate_certs: no
      loop: "{{ docker_list }}"
      ignore_errors: yes



    # right now, there is no way to confirm that the members are up before starting the rest of the config after installation,
    # so, this work around involves setting the number of member nodes to 0 and then patching the new replica numbers in last.
    #
    # if we try to run the rest of the processing while the members are booting up, it causes issues where certain steps
    # will fail if a member is in the middle of joining the cluster when we try to hit the API.
    #
    # this is not ideal, but it works for now - i'm waiting on jfrog to get me a better way to do this.
    #- name: Turn on members
    #  command: >
    #    oc patch statefulset artifactory-ha-member -p '{"spec":{"replicas":{{ artifactory_replica_count }}}}'

      # delete processed folder
    - name: Remove proccessed directory
      file:
        path: ./processed
        state: absent
