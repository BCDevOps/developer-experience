apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    cluster-name: patroni-001
  name: patroni-master-001
  namespace: {{ project_name }}
spec:
  ports:
  - port: 5432
    protocol: TCP
    targetPort: 5432
  selector:
    cluster-name: patroni-001
    role: master
    app.kubernetes.io/name: patroni
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  creationTimestamp: null
  generation: 3
  labels:
    cluster-name: patroni-001
    app: patroni-001
  name: patroni-001
  namespace: {{ project_name }}
spec:
  podManagementPolicy: OrderedReady
  replicas: {{ patroni_replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      statefulset: patroni-001
  serviceName: patroni-001
  template:
    metadata:
      creationTimestamp: null
      labels:
        statefulset: patroni-001
        cluster-name: patroni-001
        app.kubernetes.io/name: patroni
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: statefulset
                operator: In
                values:
                - patroni-001
            topologyKey: "kubernetes.io/hostname"
      containers:
      - env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: PATRONI_KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: PATRONI_KUBERNETES_LABELS
          value: '{"cluster-name": "patroni-001", "app.kubernetes.io/name": "patroni"}'
        - name: PATRONI_SUPERUSER_USERNAME
          valueFrom:
            secretKeyRef:
              key: superuser-username
              name: patroni-001
        - name: PATRONI_SUPERUSER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: superuser-password
              name: patroni-001
        - name: PATRONI_REPLICATION_USERNAME
          valueFrom:
            secretKeyRef:
              key: replication-username
              name: patroni-001
        - name: PATRONI_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              key: replication-password
              name: patroni-001
        - name: APP_USER
          valueFrom:
            secretKeyRef:
              key: app-db-username
              name: patroni-001
        - name: APP_PASSWORD
          valueFrom:
            secretKeyRef:
              key: app-db-password
              name: patroni-001
        - name: APP_DATABASE
          valueFrom:
            secretKeyRef:
              key: app-db-name
              name: patroni-001
        - name: PATRONI_SCOPE
          value: patroni-001
        - name: PATRONI_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: PATRONI_LOG_LEVEL
          value: WARNING
        - name: PATRONI_POSTGRESQL_DATA_DIR
          value: /home/postgres/pgdata/pgroot/data
        - name: PATRONI_POSTGRESQL_PGPASS
          value: /tmp/pgpass
        - name: PATRONI_POSTGRESQL_LISTEN
          value: 0.0.0.0:5432
        - name: PATRONI_RESTAPI_LISTEN
          value: 0.0.0.0:8008
        image: {{ local_image_registry }}/{{ project_name }}/patroni:{{ postgres_version }}{{ postgres_tag }}-stable
        imagePullPolicy: Always
        name: postgresql
        ports:
        - containerPort: 8008
          protocol: TCP
        - containerPort: 5432
          protocol: TCP
        resources:
          requests:
            cpu: {{ patroni_cpu_request }}
            memory: {{ patroni_memory_request }}
          limits:
            cpu: {{ patroni_cpu_limit }}
            memory: {{ patroni_memory_limit }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        readinessProbe:
          initialDelaySeconds: 5
          timeoutSeconds: 5
          failureThreshold: 4
          exec:
            command:
              - /usr/share/scripts/patroni/health_check.sh
        volumeMounts:
        - mountPath: /home/postgres/pgdata
          name: postgresql
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccountName: patroni-001
      terminationGracePeriodSeconds: 0
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      annotations:
        volume.beta.kubernetes.io/storage-class: {{ patroni_storage_class }}
      labels:
        app: patroni-001
      name: postgresql
    spec:
      storageClassName: {{ patroni_storage_class }}
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ patroni_storage_size }}
