---
# Source: artifactory-ha/templates/artifactory-node-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: artifactory-ha-member
  labels:
    app: artifactory-ha
    chart: artifactory-ha-{{ artifactory_version_full }}
    component: artifactory-ha
    heritage: Helm
    release: artifactory
spec:
  serviceName: artifactory-ha-member
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: artifactory-ha
      role: artifactory-ha-member
      release: artifactory
  template:
    metadata:
      labels:
        app: artifactory-ha
        chart: artifactory-ha-{{ artifactory_version_full }}
        role: artifactory-ha-member
        heritage: Helm
        component: artifactory-ha
        release: artifactory
      annotations:
        checksum/database-secrets: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/binarystore: 85ca9aa8b17116796aee4d257196d454fa0f12cff1e0436d82896eab8fe3518c
        checksum/systemyaml: b4a9b02b95cb2dac1ab9d182092617f73249a0f9b07b1ffef1c2443849c21d41
    spec:
      serviceAccountName: artifactory-ha
      terminationGracePeriodSeconds: 30
      initContainers:
      - name: "delete-db-properties"
        image: "releases-docker.jfrog.io/alpine:3.13.5"
        imagePullPolicy: IfNotPresent
        command:
          - 'sh'
          - '-c'
          - 'rm -fv /var/opt/jfrog/artifactory/etc/db.properties'
        resources:
          {}
        volumeMounts:
          - mountPath: "/var/opt/jfrog/artifactory"
            name: volume
          - mountPath: "/var/opt/jfrog/cache"
            name: data-volume
      - name: "wait-for-primary"
        image: "releases-docker.jfrog.io/alpine:3.13.5"
        imagePullPolicy: IfNotPresent
        command:
        - 'sh'
        - '-c'
        - >
          echo "Waiting for primary node to be ready...";
          while [ "$(wget --spider --no-check-certificate -S -T 3 http://artifactory-ha-primary:8082/ 2>&1 | grep '^  HTTP/' | awk '{print $2}')" != "200" ];
            do echo "Primary not ready. Waiting..."; sleep 3;
          done;
          echo "Primary node ready!";
        resources:
          {}
      - name: 'copy-system-yaml'
        image: 'releases-docker.jfrog.io/alpine:3.13.5'
        command:
        - '/bin/sh'
        - '-c'
        - >
          echo "Copy system.yaml to /var/opt/jfrog/artifactory/etc";
          mkdir -p /var/opt/jfrog/artifactory/etc;
          mkdir -p /var/opt/jfrog/artifactory/etc/access/keys/trusted;          
          cp -fv /tmp/etc/system.yaml /var/opt/jfrog/artifactory/etc/system.yaml;
          echo "Remove /var/opt/jfrog/artifactory/lost+found folder if exists";
          rm -rfv /var/opt/jfrog/artifactory/lost+found;
          echo "Removing join.key file";
          rm -fv /var/opt/jfrog/artifactory/etc/security/join.key;
          echo "Copy masterKey to /var/opt/jfrog/artifactory/etc/security";
          mkdir -p /var/opt/jfrog/artifactory/etc/security;
          echo -n ${ARTIFACTORY_MASTER_KEY} > /var/opt/jfrog/artifactory/etc/security/master.key;
        env:
        - name: ARTIFACTORY_JOIN_KEY
          valueFrom:
            secretKeyRef:
              name: "artifactory-ha"
              key: join-key
        - name: ARTIFACTORY_MASTER_KEY
          valueFrom:
            secretKeyRef:
              name: "artifactory-ha"
              key: master-key
        resources:
          {}
        volumeMounts:
        - name: volume
          mountPath: "/var/opt/jfrog/artifactory"  
        - name: systemyaml
          mountPath: "/tmp/etc/system.yaml"
          subPath: system.yaml
        - name: data-volume
          mountPath: "/var/opt/jfrog/cache"
      - name: 'migration-artifactory-ha'
        image: registry.connect.redhat.com/jfrog/artifactory-pro:{{ artifactory_version }}
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
        command:
        - '/bin/bash'
        - '-c'
        - >
          scriptsPath="/opt/jfrog/artifactory/app/bin";
          mkdir -p $scriptsPath;
          echo "Copy migration scripts and Run migration";
          cp -fv /tmp/migrate.sh $scriptsPath/migrate.sh;
          cp -fv /tmp/migrationHelmInfo.yaml $scriptsPath/migrationHelmInfo.yaml;
          cp -fv /tmp/migrationStatus.sh $scriptsPath/migrationStatus.sh;
          mkdir -p /var/opt/jfrog/artifactory/log;
          bash $scriptsPath/migrationStatus.sh {{ artifactory_version_short }} 3600 > >(tee /var/opt/jfrog/artifactory/log/helm-migration.log) 2>&1;
        resources:
          {}
        env:
      
        - name: JF_SHARED_DATABASE_PASSWORD
          value: "{{ db_password }}"
        - name: JF_SHARED_NODE_HAENABLED
          value: "true"
        volumeMounts:
        - name: migration-scripts
          mountPath: "/tmp/migrate.sh"
          subPath: migrate.sh
        - name: migration-scripts
          mountPath: "/tmp/migrationHelmInfo.yaml"
          subPath: migrationHelmInfo.yaml
        - name: migration-scripts
          mountPath: "/tmp/migrationStatus.sh"
          subPath: migrationStatus.sh
        - name: volume
          mountPath: "/var/opt/jfrog/artifactory"
        - name: binarystore-xml
          mountPath: "/artifactory_bootstrap/binarystore.xml"
          subPath: binarystore.xml
        - name: data-volume
          mountPath: "/var/opt/jfrog/cache"
      containers:
      - name: artifactory-ha
        image: registry.connect.redhat.com/jfrog/artifactory-pro:{{ artifactory_version }}
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
        command:
        - '/bin/bash'
        - '-c'
        - >
          set -e;
          exec /entrypoint-artifactory.sh
        env:
      
        - name: JF_SHARED_DATABASE_PASSWORD
          value: "{{ db_password }}"
        - name: JF_SHARED_NODE_HAENABLED
          value: "true"
        ports:
        - containerPort: 8082
        - containerPort: 8081
        volumeMounts:
        - name: volume
          mountPath: "/var/opt/jfrog/artifactory"
        - name: binarystore-xml
          mountPath: "/artifactory_bootstrap/binarystore.xml"
          subPath: binarystore.xml
        - name: installer-info
          mountPath: "/artifactory_bootstrap/info/installer-info.json"
          subPath: installer-info.json
        - name: data-volume
          mountPath: "/var/opt/jfrog/cache"
        resources:
          limits:
            cpu: "{{ cpu_limit }}"
            memory: "{{ memory_limit }}"
          requests:
            cpu: "{{ cpu_request }}"
            memory: "{{ memory_request }}"
        startupProbe:
          httpGet:
            path: /router/api/v1/system/health
            scheme: HTTP
            port: 8082
          initialDelaySeconds: 30
          periodSeconds: 5
          failureThreshold: 60
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /router/api/v1/system/health
            scheme: HTTP
            port: 8082
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
          successThreshold: 1
        livenessProbe:
          httpGet:
            path: /router/api/v1/system/health
            scheme: HTTP
            port: 8082
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
          successThreshold: 1
      imagePullSecrets:
        - name: 4302974-as-mcs-artifactory-pull-secret
        - name: artifactory-dockerhub 
      volumes:
      - name: binarystore-xml
        secret:
          secretName: artifactory-ha-binarystore
      - name: migration-scripts
        configMap:
          name: artifactory-ha-migration-scripts
      - name: installer-info
        configMap:
          name: artifactory-ha-installer-info
      - name: systemyaml
        secret:
          secretName: artifactory-ha-primary-system-yaml
  volumeClaimTemplates:
  - metadata:
      annotations:
        volume.beta.kubernetes.io/storage-class: "{{ artifactory_storage_class }}"
      name: volume
    spec:
      storageClassName: "{{ artifactory_storage_class }}"
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "{{ storage_size }}"
  - metadata:
      annotations:
        volume.beta.kubernetes.io/storage-class: "{{ artifactory_data_storage_class }}"
      name: data-volume
    spec:
      storageClassName: "{{ artifactory_data_storage_class }}"
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "{{ data_storage_size }}"
