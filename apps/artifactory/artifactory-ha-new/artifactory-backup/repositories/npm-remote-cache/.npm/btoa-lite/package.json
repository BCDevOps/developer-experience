{"_id":"btoa-lite","_rev":"2-63eaea81f6a7635f219562686fe10127","name":"btoa-lite","description":"Smallest/simplest possible means of using btoa with both Node and browserify","dist-tags":{"latest":"1.0.0"},"versions":{"1.0.0":{"name":"btoa-lite","version":"1.0.0","description":"Smallest/simplest possible means of using btoa with both Node and browserify","main":"btoa-node.js","browser":"btoa-browser.js","license":"MIT","scripts":{"test":"npm run test-node && npm run test-browser","test-node":"node test | tap-spec","test-browser":"browserify test | smokestack | tap-spec"},"author":{"name":"Hugh Kennedy","email":"hughskennedy@gmail.com","url":"http://hughsk.io/"},"dependencies":{},"devDependencies":{"browserify":"^10.2.4","smokestack":"^3.3.0","tap-spec":"^4.0.0","tape":"^4.0.0"},"repository":{"type":"git","url":"git://github.com/hughsk/btoa-lite.git"},"keywords":["btoa","base64","isomorphic","browser","node","shared"],"homepage":"https://github.com/hughsk/btoa-lite","bugs":{"url":"https://github.com/hughsk/btoa-lite/issues"},"gitHead":"906058d712370adab6174dee288953f4b9857dbc","_id":"btoa-lite@1.0.0","_shasum":"337766da15801210fdd956c22e9c6891ab9d0337","_from":".","_npmVersion":"2.11.3","_nodeVersion":"0.10.36","_npmUser":{"name":"hughsk","email":"hughskennedy@gmail.com"},"dist":{"shasum":"337766da15801210fdd956c22e9c6891ab9d0337","tarball":"https://registry.npmjs.org/btoa-lite/-/btoa-lite-1.0.0.tgz"},"maintainers":[{"name":"hughsk","email":"hughskennedy@gmail.com"}],"directories":{}}},"readme":"# btoa-lite\n![](http://img.shields.io/badge/stability-stable-orange.svg?style=flat)\n![](http://img.shields.io/npm/v/btoa-lite.svg?style=flat)\n![](http://img.shields.io/npm/dm/btoa-lite.svg?style=flat)\n![](http://img.shields.io/npm/l/btoa-lite.svg?style=flat)\n\nSmallest/simplest possible means of using btoa with both Node and browserify.\n\nIn the browser, encoding base64 strings is done using:\n\n``` javascript\nvar encoded = btoa(decoded)\n```\n\nHowever in Node, it's done like so:\n\n``` javascript\nvar encoded = new Buffer(decoded).toString('base64')\n```\n\nYou can easily check if `Buffer` exists and switch between the approaches\naccordingly, but using `Buffer` anywhere in your browser source will pull\nin browserify's `Buffer` shim which is pretty hefty. This package uses\nthe `main` and `browser` fields in its `package.json` to perform this\ncheck at build time and avoid pulling `Buffer` in unnecessarily.\n\n## Usage\n\n[![NPM](https://nodei.co/npm/btoa-lite.png)](https://nodei.co/npm/btoa-lite/)\n\n### `encoded = btoa(decoded)`\n\nReturns the base64-encoded value of a string.\n\n## License\n\nMIT. See [LICENSE.md](http://github.com/hughsk/btoa-lite/blob/master/LICENSE.md) for details.\n","maintainers":[{"name":"hughsk","email":"hughskennedy@gmail.com"}],"time":{"modified":"2015-06-25T16:43:35.275Z","created":"2015-06-25T16:43:35.275Z","1.0.0":"2015-06-25T16:43:35.275Z"},"homepage":"https://github.com/hughsk/btoa-lite","keywords":["btoa","base64","isomorphic","browser","node","shared"],"repository":{"type":"git","url":"git://github.com/hughsk/btoa-lite.git"},"author":{"name":"Hugh Kennedy","email":"hughskennedy@gmail.com","url":"http://hughsk.io/"},"bugs":{"url":"https://github.com/hughsk/btoa-lite/issues"},"license":"MIT","readmeFilename":"README.md","users":{"scytalezero":true},"_attachments":{}}