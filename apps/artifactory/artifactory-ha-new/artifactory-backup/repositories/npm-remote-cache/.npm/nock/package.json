{"_id":"nock","_rev":"833-63be06dc61e17f0d3ad797db60512843","repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"license":"MIT","description":"HTTP server mocking and expectations library for Node.js","homepage":"https://github.com/nock/nock#readme","readmeFilename":"","users":{"jalcine":true,"kileras":true,"ruiquelhas":true,"voxpelli":true,"bret":true,"nickleefly":true,"joakin":true,"blakmatrix":true,"mccoyjordan":true,"zeke":true,"temsa":true,"chown_chmod":true,"mmalecki":true,"adammokan":true,"sidwood":true,"icirellik":true,"alexyan":true,"brad-christie":true,"focusaurus":true,"turristan":true,"adamwood":true,"prabhash1785":true,"andrebassi":true,"vitaly":true,"philipjmurphy":true,"maxrimue":true,"dpobel":true,"stany":true,"ezodude":true,"finnpauls":true,"nomemires":true,"l3au":true,"heschong":true,"michaelnisi":true,"justintormey":true,"roman-io":true,"ffi":true,"maximilianschmitt":true,"meetravi":true,"ivanoats":true,"yeahoffline":true,"markthethomas":true,"pid":true,"monkeymonk":true,"jonatasnona":true,"skarface":true,"alincode":true,"vlkosinov":true,"dominicbarnes":true,"brunoscopelliti":true,"pgte":true,"antonnguyen":true,"edwin_estrada":true,"kylestephens":true,"mikeljames":true,"ivangaravito":true,"santihbc":true,"mishelen":true,"irnnr":true,"jwv":true,"jxson":true,"malko":true,"sasquatch":true,"foto":true,"rodrigo-medeiros":true,"isaacvitor":true,"xgheaven":true,"philippwiddra":true,"btrigueiro":true,"denji":true,"dwayneford":true,"karlbateman":true,"vboctor":true,"curioussavage":true,"wozozo":true,"bsnote":true,"nmccready":true,"wfcookie":true,"n370":true,"alexbaumgertner":true,"dongxu":true,"itsananderson":true,"dkblay":true,"frankg":true,"mdrobny":true,"oceanic":true,"nichoth":true,"princetoad":true,"asgoth":true,"onel0p3z":true,"cslater":true,"budnix":true,"lgatica":true,"jmorris":true,"kbakba":true,"seriewe":true,"randallagordon":true,"fenyot":true,"wangnan0610":true,"nanook":true,"gdraganic":true,"programmer.severson":true,"scytalezero":true,"backnight":true,"jonathas":true,"wzbg":true,"nackjicholson":true,"ivan.marquez":true,"jeff-jacobson":true,"szymex73":true,"rebolon":true,"tribou":true,"phoenixsoul":true,"knoja4":true,"mhaidarh":true,"davidatkinsondoyle":true,"ahmed-dinar":true,"cbeulke":true,"garrickajo":true,"subchen":true,"kaapex":true,"langri-sha":true,"sachacr":true,"mtscout6":true,"neofreko":true,"adrienhobbs":true,"dimichgh":true,"m0nkmaster":true,"koulmomo":true,"zambon":true,"coolhanddev":true,"anchnk":true,"monolithed":true,"da5atar":true,"maxkoryukov":true,"iuykza":true,"geekwen":true,"hecto932":true,"fengbeijing":true,"dzhou777":true,"david-ruzicka":true,"mortiy":true,"frankwinter":true,"xinwangwang":true,"carlosvillademor":true,"floppee":true,"xrush":true,"ziflex":true,"staydan":true,"ferchoriverar":true,"ridermansb":true,"thomasmeadows":true,"walexstevens":true,"siyb":true,"rsp":true,"martinlev":true,"scott.m.sarsfield":true,"chinawolf_wyp":true,"bboulahdid":true,"raycharles":true,"dpjayasekara":true,"kikar":true,"daniel-lewis-bsc-hons":true,"larsgw":true,"jmsherry":true,"stoelzle":true,"buzzi":true,"heartnett":true,"sparkbuzz":true,"pajamasam":true,"gurunate":true,"rahulraghavankklm":true,"mrbgit":true,"shanewholloway":true,"syarhei":true,"jota":true,"program247365":true,"danday74":true,"oleg_tsyba":true,"douglaskong":true,"darrentorpey":true,"zuojiang":true,"vparaskevas":true,"ricardweii":true,"iceriver2":true,"paulw":true,"nunogee":true,"midascreed":true,"ahashem":true,"reyronald":true,"thekuzia":true,"robsoer":true,"mestar":true,"jalik":true,"nicomee":true},"dist-tags":{"next":"11.3.2","latest":"12.0.3","beta":"13.0.0-beta.1","release-11.x":"11.9.1"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"readme":"","versions":{"0.37.0":{"description":"HTTP Server mocking for Node.js","dependencies":{"propagate":"0.2.x","debug":"^0.8.1","lodash":"2.4.1"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.37.0.tgz","shasum":"badbe2fd35082159a2b6a6cbc995cca72de6bf4f"},"homepage":"https://github.com/pgte/nock","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","engines":["node >= 0.10.0"],"main":"./index","_shasum":"badbe2fd35082159a2b6a6cbc995cca72de6bf4f","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"_id":"nock@0.37.0","_npmVersion":"1.4.9","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"}],"devDependencies":{"restify":"^2.8.1","needle":"^0.7.1","superagent":"~0.15.7","tap":"*","request":"*"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"version":"0.37.0","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"_from":".","name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"directories":{}},"5.2.0":{"gitHead":"a0ac792e2f8b2c398b0164752881792c2ea9864b","engines":["node >= 0.10.0"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"git+ssh://git@github.com/pgte/nock.git"},"license":"MIT","dependencies":{"deep-equal":"^1.0.0","lodash":"^3.10.1","debug":"^2.2.0","mkdirp":"^0.5.0","chai":">=1.9.2 <4.0.0","propagate":"0.3.x","json-stringify-safe":"^5.0.1"},"dist":{"shasum":"fdc230ca95f85b5133c1f3dd02bf67079e27ec6d","tarball":"https://registry.npmjs.org/nock/-/nock-5.2.0.tgz"},"homepage":"https://github.com/pgte/nock#readme","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","_shasum":"fdc230ca95f85b5133c1f3dd02bf67079e27ec6d","main":"./index","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"request":"2.61.0","restify":"^2.8.1","needle":"^0.7.1","restler":"3.2.2","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","rimraf":"^2.3.2","istanbul":"^0.3.8","isomorphic-fetch":"^2.2.0","pre-commit":"0.0.9","jshint":"^2.5.6","tap":"^0.7.1","superagent":"^1.4.0","node-static":"^0.7.7","coveralls":"^2.11.2","request-promise":"^0.4.3","browserify":"^12.0.1","zombie":"^4.2.1"},"_npmVersion":"2.14.7","contributors":[{"url":"https://github.com/RomanGotsiy","name":"Roman Hotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"},{"url":"https://github.com/kelaban","email":"kelaban17@gmail.com","name":"Keith Laban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"email":"davidtpate@gmail.com","name":"David Pate","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"_id":"nock@5.2.0","scripts":{"changelog":"changelog nock all -m > CHANGELOG.md","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","jshint":"jshint lib/*.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","test":"node --harmony tests/test.js"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","_from":".","version":"5.2.0","_nodeVersion":"4.2.3","pre-commit":["jshint","coverage"],"maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"}],"directories":{}},"0.31.1":{"main":"./index","dependencies":{"propagate":"0.2.x","lodash":"2.4.1","debug":"^0.8.1"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.31.1.tgz","shasum":"ca904b942c923222f9519fbfbd15c12af511b5b6"},"homepage":"https://github.com/pgte/nock","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"license":"MIT","_from":".","name":"nock","version":"0.31.1","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"name":"svnlto","email":"me@svenlito.com"}],"bugs":{"url":"http://github.com/pgte/nock/issues"},"_id":"nock@0.31.1","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"devDependencies":{"tap":"*","superagent":"~0.15.7","request":"*"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"_npmVersion":"1.3.14","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"}],"directories":{}},"0.17.3":{"repository":{"url":"http://github.com/flatiron/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","dependencies":{"propagate":"0.2.x"},"dist":{"shasum":"832e00df6b19727cd3139424cdd192efccc51c8a","tarball":"https://registry.npmjs.org/nock/-/nock-0.17.3.tgz"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"main":"./index","_npmVersion":"1.2.17","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"}],"devDependencies":{"request":"*","tap":"*"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.17.3","bugs":{"url":"http://github.com/flatiron/nock/issues"},"version":"0.17.3","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"_from":".","name":"nock","directories":{}},"0.47.0":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"_from":".","name":"nock","version":"0.47.0","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"devDependencies":{"hyperquest":"^0.3.0","aws-sdk":"^2.0.15","tap":"*","request":"*","superagent":"~0.15.7","restify":"^2.8.1","needle":"^0.7.1"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"_npmVersion":"1.4.21","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"}],"_id":"nock@0.47.0","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"_shasum":"763a0b22a0797963c21552861df95c06d15989c4","main":"./index","gitHead":"56354427da5bd222ae54b924ba07c9031491fb0a","engines":["node >= 0.10.0"],"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","dist":{"shasum":"763a0b22a0797963c21552861df95c06d15989c4","tarball":"https://registry.npmjs.org/nock/-/nock-0.47.0.tgz"},"homepage":"https://github.com/pgte/nock","dependencies":{"propagate":"0.3.x","lodash":"2.4.1","debug":"^1.0.4"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","directories":{}},"0.44.0":{"name":"nock","_from":".","version":"0.44.0","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"bugs":{"url":"http://github.com/pgte/nock/issues"},"_id":"nock@0.44.0","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"hyperquest":"^0.3.0","needle":"^0.7.1","restify":"^2.8.1","request":"*","tap":"*","superagent":"~0.15.7"},"_npmVersion":"1.4.14","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"}],"main":"./index","_shasum":"47a4490ba292448f4e29e853c537c68529e1c28f","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.44.0.tgz","shasum":"47a4490ba292448f4e29e853c537c68529e1c28f"},"homepage":"https://github.com/pgte/nock","dependencies":{"propagate":"0.2.x","lodash":"2.4.1","debug":"^0.8.1"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","gitHead":"bb7125ce817e1615c281d4feb643acf7bf2c5f57","engines":["node >= 0.10.0"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"license":"MIT","directories":{}},"0.29.2":{"main":"./index","description":"HTTP Server mocking for Node.js","homepage":"https://github.com/pgte/nock","dist":{"shasum":"37bc20b7bb10255ff7909d6346573f7b150d1ef5","tarball":"https://registry.npmjs.org/nock/-/nock-0.29.2.tgz"},"dependencies":{"propagate":"0.2.x","lodash":"2.4.1","debug":"^0.8.1"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"license":"MIT","engines":["node >= 0.4.10"],"version":"0.29.2","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"}],"_from":".","name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"_id":"nock@0.29.2","_npmVersion":"1.3.14","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"}],"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"superagent":"~0.15.7","tap":"*","request":"*"},"directories":{}},"2.18.0-alpha.2":{"gitHead":"864afca3c6207999a40906416ff1c820f8c467d2","engines":["node >= 0.10.0"],"repository":{"url":"git+ssh://git@github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-2.18.0-alpha.2.tgz","shasum":"c04cfda1f3ab88a06e6885f80d62092885676a1c"},"dependencies":{"mkdirp":"^0.5.0","debug":"^1.0.4","deep-equal":"^1.0.0","lodash":"2.4.1","propagate":"0.3.x","chai":">=1.9.2 <4.0.0"},"homepage":"https://github.com/pgte/nock#readme","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","_shasum":"c04cfda1f3ab88a06e6885f80d62092885676a1c","main":"./index","author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"node-static":"^0.7.7","coveralls":"^2.11.2","superagent":"~0.15.7","tap":"^0.7.1","request-promise":"^0.4.3","zombie":"^4.2.1","browserify":"^12.0.1","restify":"^2.8.1","needle":"^0.7.1","restler":"3.2.2","request":"2.61.0","rimraf":"^2.3.2","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","isomorphic-fetch":"^2.2.0","istanbul":"^0.3.8","jshint":"^2.5.6","pre-commit":"0.0.9"},"_npmVersion":"2.11.3","contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"},{"url":"https://github.com/kelaban","name":"Keith Laban","email":"kelaban17@gmail.com"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"url":"https://github.com/DavidTPate","email":"davidtpate@gmail.com","name":"David Pate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"_id":"nock@2.18.0-alpha.2","scripts":{"coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","test":"node --harmony tests/test.js","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","_from":".","_nodeVersion":"0.12.7","version":"2.18.0-alpha.2","pre-commit":["jshint","coverage"],"maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"}],"directories":{}},"0.13.7":{"description":"HTTP Server mocking for Node.js","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dist":{"shasum":"671d288a53f056864da2aaf230a0bd8ac87d496f","tarball":"https://registry.npmjs.org/nock/-/nock-0.13.7.tgz"},"repository":{"type":"git","url":"http://github.com/flatiron/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"engines":["node >= 0.4.10"],"main":"./index","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.13.7","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"}],"_npmVersion":"1.1.65","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"tap":"0.2.x","request":"*"},"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"version":"0.13.7","name":"nock","bugs":{"url":"http://github.com/flatiron/nock/issues"},"directories":{}},"0.5.3":{"_engineSupported":true,"repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dependencies":{},"dist":{"shasum":"8d36ded1cc86602c41b1a241421d3d2af1503632","tarball":"https://registry.npmjs.org/nock/-/nock-0.5.3.tgz"},"main":"./index","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"}],"_npmVersion":"1.0.105","devDependencies":{"tap":"0.0.x"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"scripts":{"test":"node_modules/.bin/tap tests"},"_id":"nock@0.5.3","bugs":{"url":"http://github.com/pgte/nock/issues"},"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"_defaultsLoaded":true,"_nodeVersion":"v0.4.12","version":"0.5.3","name":"nock","directories":{}},"0.20.1":{"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dependencies":{"propagate":"0.2.x"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.20.1.tgz","shasum":"455cc981ad2e35b27d7884b3d11e4d41d125849c"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"http://github.com/flatiron/nock.git","type":"git"},"main":"./index","_id":"nock@0.20.1","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"devDependencies":{"request":"*","tap":"*"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"}],"_npmVersion":"1.2.32","_from":".","name":"nock","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"version":"0.20.1","bugs":{"url":"http://github.com/flatiron/nock/issues"},"directories":{}},"3.6.0":{"gitHead":"d81ec7e8c3100e133d0a52c0d577b03e1979afde","engines":["node >= 0.10.0"],"license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"git+ssh://git@github.com/pgte/nock.git"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"homepage":"https://github.com/pgte/nock#readme","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-3.6.0.tgz","shasum":"d26c40004b3449a655b91b74ae3c56fc02c84525"},"dependencies":{"chai":">=1.9.2 <4.0.0","json-stringify-safe":"^5.0.1","propagate":"0.3.x","lodash":"2.4.1","deep-equal":"^1.0.0","mkdirp":"^0.5.0","debug":"^2.2.0"},"description":"HTTP Server mocking for Node.js","_shasum":"d26c40004b3449a655b91b74ae3c56fc02c84525","main":"./index","author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"request":"2.61.0","restify":"^2.8.1","restler":"3.2.2","needle":"^0.7.1","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","rimraf":"^2.3.2","istanbul":"^0.3.8","isomorphic-fetch":"^2.2.0","jshint":"^2.5.6","pre-commit":"0.0.9","tap":"^0.7.1","superagent":"^1.4.0","node-static":"^0.7.7","coveralls":"^2.11.2","request-promise":"^0.4.3","zombie":"^4.2.1","browserify":"^12.0.1"},"contributors":[{"url":"https://github.com/RomanGotsiy","name":"Roman Hotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"url":"https://github.com/kelaban","name":"Keith Laban","email":"kelaban17@gmail.com"},{"url":"https://github.com/ruimarinho","email":"ruipmarinho@gmail.com","name":"Rui Marinho"},{"url":"https://github.com/DavidTPate","email":"davidtpate@gmail.com","name":"David Pate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"_npmVersion":"2.14.7","_id":"nock@3.6.0","scripts":{"test":"node --harmony tests/test.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","changelog":"changelog nock all -m > CHANGELOG.md"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","_from":".","maintainers":[{"email":"ivan@softwaremarbles.com","name":"ierceg"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"email":"me@svenlito.com","name":"svnlto"}],"_nodeVersion":"4.2.3","pre-commit":["jshint","coverage"],"version":"3.6.0","directories":{}},"0.1.7":{"version":"0.1.7","_nodeVersion":"v0.4.11","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"_npmJsonOpts":{"file":"/Users/pedroteixeira/.npm/nock/0.1.7/package/package.json","wscript":false,"serverjs":false,"contributors":false},"_defaultsLoaded":true,"name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"test":"node_modules/.bin/tap tests"},"_id":"nock@0.1.7","_npmVersion":"1.0.27","devDependencies":{"tap":"0.0.x"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"main":"./index","description":"HTTP Server mocking for Node.js","dependencies":{},"dist":{"shasum":"b8b3d582d51e7f6da6e627109202b2cbac920e0f","tarball":"https://registry.npmjs.org/nock/-/nock-0.1.7.tgz"},"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"_engineSupported":true,"engines":["node >= 0.4.10"],"directories":{}},"0.27.3":{"main":"./index","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dependencies":{"propagate":"0.2.x"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.27.3.tgz","shasum":"d40a1e33214a868e066669c983e9693a7e942cc2"},"homepage":"https://github.com/pgte/nock","description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"name":"nock","_from":".","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"version":"0.27.3","bugs":{"url":"http://github.com/pgte/nock/issues"},"_id":"nock@0.27.3","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"superagent":"~0.15.7","request":"*","tap":"*"},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"}],"_npmVersion":"1.3.14","directories":{}},"6.0.1":{"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git+ssh://git@github.com/pgte/nock.git","type":"git"},"license":"MIT","gitHead":"589a895bbf5cfb3388490e50dcb716cc3f10005a","engines":["node >= 0.10.0"],"description":"HTTP Server mocking for Node.js","dependencies":{"json-stringify-safe":"^5.0.1","propagate":"0.3.x","chai":">=1.9.2 <4.0.0","qs":"^6.0.2","deep-equal":"^1.0.0","lodash":"^3.10.1","debug":"^2.2.0","mkdirp":"^0.5.0"},"dist":{"shasum":"563923263144eab40557bc5a8b5a4e6041961eb8","tarball":"https://registry.npmjs.org/nock/-/nock-6.0.1.tgz"},"homepage":"https://github.com/pgte/nock#readme","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"_shasum":"563923263144eab40557bc5a8b5a4e6041961eb8","main":"./index","_npmVersion":"2.14.7","contributors":[{"url":"https://github.com/RomanGotsiy","name":"Roman Hotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"url":"https://github.com/ruimarinho","email":"ruipmarinho@gmail.com","name":"Rui Marinho"},{"url":"https://github.com/DavidTPate","name":"David Pate","email":"davidtpate@gmail.com"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"jshint":"^2.5.6","pre-commit":"0.0.9","isomorphic-fetch":"^2.2.0","istanbul":"^0.3.8","rimraf":"^2.3.2","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","needle":"^0.7.1","restify":"^2.8.1","restler":"3.2.2","request":"2.61.0","zombie":"^4.2.1","browserify":"^12.0.1","request-promise":"^0.4.3","node-static":"^0.7.7","coveralls":"^2.11.2","tap":"^0.7.1","superagent":"^1.4.0"},"scripts":{"coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","changelog":"changelog nock all -m > CHANGELOG.md","test":"node --harmony tests/test.js","jshint":"jshint lib/*.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage"},"_id":"nock@6.0.1","bugs":{"url":"http://github.com/pgte/nock/issues"},"version":"6.0.1","_nodeVersion":"4.2.3","pre-commit":["jshint","coverage"],"maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"email":"me@svenlito.com","name":"svnlto"}],"_from":".","name":"nock","directories":{}},"0.12.0":{"engines":["node >= 0.4.10"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"_engineSupported":true,"dependencies":{},"dist":{"shasum":"b6b681836381cdb368f94a2b7dffa36d0518b971","tarball":"https://registry.npmjs.org/nock/-/nock-0.12.0.tgz"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","main":"./index","devDependencies":{"request":"*","tap":"0.2.x"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"optionalDependencies":{},"_npmVersion":"1.1.1","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"}],"_id":"nock@0.12.0","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","version":"0.12.0","_nodeVersion":"v0.6.11","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"_defaultsLoaded":true,"directories":{}},"6.0.0":{"maintainers":[{"email":"ivan@softwaremarbles.com","name":"ierceg"},{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"name":"svnlto","email":"me@svenlito.com"}],"version":"6.0.0","_nodeVersion":"4.2.3","pre-commit":["jshint","coverage"],"name":"nock","_from":".","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","changelog":"changelog nock all -m > CHANGELOG.md","test":"node --harmony tests/test.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js"},"_id":"nock@6.0.0","contributors":[{"url":"https://github.com/RomanGotsiy","name":"Roman Hotsiy"},{"url":"https://github.com/jagoda","name":"Jeffrey Jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"},{"url":"https://github.com/kelaban","email":"kelaban17@gmail.com","name":"Keith Laban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"url":"https://github.com/DavidTPate","name":"David Pate","email":"davidtpate@gmail.com"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"_npmVersion":"2.14.7","devDependencies":{"pre-commit":"0.0.9","jshint":"^2.5.6","isomorphic-fetch":"^2.2.0","istanbul":"^0.3.8","rimraf":"^2.3.2","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","restler":"3.2.2","needle":"^0.7.1","restify":"^2.8.1","request":"2.61.0","browserify":"^12.0.1","zombie":"^4.2.1","request-promise":"^0.4.3","node-static":"^0.7.7","coveralls":"^2.11.2","superagent":"^1.4.0","tap":"^0.7.1"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"main":"./index","_shasum":"8f3be9c6218bbd797496002c9d3147a2a8576dbf","description":"HTTP Server mocking for Node.js","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dependencies":{"qs":"^6.0.2","chai":">=1.9.2 <4.0.0","debug":"^2.2.0","mkdirp":"^0.5.0","lodash":"^3.10.1","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","propagate":"0.3.x"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-6.0.0.tgz","shasum":"8f3be9c6218bbd797496002c9d3147a2a8576dbf"},"homepage":"https://github.com/pgte/nock#readme","license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git+ssh://git@github.com/pgte/nock.git","type":"git"},"gitHead":"2c96d8c76885e5f93c0fab3ea7ae4e2795cd65d1","engines":["node >= 0.10.0"],"directories":{}},"0.43.1":{"license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"gitHead":"afc3922f092c5a40914bc3f3a79a53e24eb00c5a","engines":["node >= 0.10.0"],"description":"HTTP Server mocking for Node.js","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dist":{"shasum":"fd917e12611c3016c470a328a57edc43dd267f1c","tarball":"https://registry.npmjs.org/nock/-/nock-0.43.1.tgz"},"homepage":"https://github.com/pgte/nock","dependencies":{"debug":"^0.8.1","lodash":"2.4.1","propagate":"0.2.x"},"_shasum":"fd917e12611c3016c470a328a57edc43dd267f1c","main":"./index","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"}],"_npmVersion":"1.4.14","devDependencies":{"hyperquest":"^0.3.0","superagent":"~0.15.7","tap":"*","request":"*","needle":"^0.7.1","restify":"^2.8.1"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"_id":"nock@0.43.1","bugs":{"url":"http://github.com/pgte/nock/issues"},"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"}],"version":"0.43.1","_from":".","name":"nock","directories":{}},"0.13.6":{"bugs":{"url":"http://github.com/flatiron/nock/issues"},"name":"nock","version":"0.13.6","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"devDependencies":{"request":"*","tap":"0.2.x"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"_npmVersion":"1.1.65","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"}],"_id":"nock@0.13.6","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"main":"./index","engines":["node >= 0.4.10"],"repository":{"url":"http://github.com/flatiron/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.13.6.tgz","shasum":"8c29f99952cb35f3927ee214d96e9eb3ba390ef2"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","directories":{}},"2.0.1":{"_npmVersion":"1.4.28","contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"},{"url":"https://github.com/kelaban","email":"kelaban17@gmail.com","name":"Keith Laban"}],"devDependencies":{"rimraf":"^2.3.2","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","coveralls":"^2.11.2","restler":"3.2.2","restify":"^2.8.1","needle":"^0.7.1","superagent":"~0.15.7","tap":"^0.7.1","request":"2.51.0","pre-commit":"0.0.9","jshint":"^2.5.6","istanbul":"^0.3.8"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"scripts":{"test":"node tests/test.js","coverage":"istanbul cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","coveralls":"istanbul cover tests/test.js && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"},"_id":"nock@2.0.1","bugs":{"url":"http://github.com/pgte/nock/issues"},"pre-commit":["jshint","coverage"],"version":"2.0.1","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"name":"svnlto","email":"me@svenlito.com"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"_from":".","name":"nock","repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","gitHead":"f73b5c6edc944be51624e1cacdbcd74c19b589cb","engines":["node >= 0.10.0"],"description":"HTTP Server mocking for Node.js","dependencies":{"mkdirp":"^0.5.0","debug":"^1.0.4","lodash":"2.4.1","propagate":"0.3.x","chai":"^1.9.2"},"dist":{"shasum":"e151beee03bef35e7d4a209c276e0613df8423ff","tarball":"https://registry.npmjs.org/nock/-/nock-2.0.1.tgz"},"homepage":"https://github.com/pgte/nock","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"_shasum":"e151beee03bef35e7d4a209c276e0613df8423ff","main":"./index","directories":{}},"0.5.4":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"_nodeVersion":"v0.4.12","version":"0.5.4","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"_defaultsLoaded":true,"name":"nock","_npmVersion":"1.0.105","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"}],"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"tap":"0.0.x"},"scripts":{"test":"node_modules/.bin/tap tests"},"_id":"nock@0.5.4","main":"./index","repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"_engineSupported":true,"engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","dependencies":{},"dist":{"shasum":"875af84725cb1419764ce6b2226539e7ca18cb7a","tarball":"https://registry.npmjs.org/nock/-/nock-0.5.4.tgz"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"directories":{}},"0.12.1":{"engines":["node >= 0.4.10"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"_engineSupported":true,"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.12.1.tgz","shasum":"3273b01999d43c362e680010eeb8cb716fe1d813"},"dependencies":{},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","main":"./index","author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"tap":"0.2.x","request":"*"},"optionalDependencies":{},"_npmVersion":"1.1.1","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"}],"_id":"nock@0.12.1","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","_nodeVersion":"v0.6.11","version":"0.12.1","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"_defaultsLoaded":true,"directories":{}},"0.23.0":{"name":"nock","_from":".","version":"0.23.0","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"bugs":{"url":"http://github.com/flatiron/nock/issues"},"_id":"nock@0.23.0","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"devDependencies":{"tap":"*","request":"*"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"_npmVersion":"1.2.32","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"}],"main":"./index","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.23.0.tgz","shasum":"dacaf08eec67e80c743a2f653e90c5e2233ffb0d"},"dependencies":{"propagate":"0.2.x"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"repository":{"type":"git","url":"http://github.com/flatiron/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","directories":{}},"0.34.1":{"description":"HTTP Server mocking for Node.js","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.34.1.tgz","shasum":"499c8455456adcf505682c1d2813fd48d3ff4a9d"},"dependencies":{"debug":"^0.8.1","lodash":"2.4.1","propagate":"0.2.x"},"homepage":"https://github.com/pgte/nock","license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"engines":["node >= 0.10.0"],"main":"./index","_shasum":"499c8455456adcf505682c1d2813fd48d3ff4a9d","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"_id":"nock@0.34.1","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"}],"_npmVersion":"1.4.9","author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"superagent":"~0.15.7","request":"*","tap":"*","restify":"^2.8.1","needle":"^0.7.1"},"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"version":"0.34.1","name":"nock","_from":".","bugs":{"url":"http://github.com/pgte/nock/issues"},"directories":{}},"0.5.0":{"dependencies":{},"dist":{"shasum":"f42302a4bd44d51d56e27f60418b6bc1fd0f6696","tarball":"https://registry.npmjs.org/nock/-/nock-0.5.0.tgz"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"_engineSupported":true,"main":"./index","_id":"nock@0.5.0","scripts":{"test":"node_modules/.bin/tap tests"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"tap":"0.0.x"},"_npmVersion":"1.0.105","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"}],"name":"nock","version":"0.5.0","_nodeVersion":"v0.4.12","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"_defaultsLoaded":true,"bugs":{"url":"http://github.com/pgte/nock/issues"},"directories":{}},"0.28.3":{"_from":".","name":"nock","version":"0.28.3","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"bugs":{"url":"http://github.com/pgte/nock/issues"},"_id":"nock@0.28.3","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"superagent":"~0.15.7","tap":"*","request":"*"},"_npmVersion":"1.3.14","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg"}],"main":"./index","homepage":"https://github.com/pgte/nock","dist":{"shasum":"638292b4de96996b03e1c822f1e14e33e5ee0ebd","tarball":"https://registry.npmjs.org/nock/-/nock-0.28.3.tgz"},"dependencies":{"propagate":"0.2.x"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","directories":{}},"0.46.0":{"name":"nock","_from":".","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"}],"version":"0.46.0","bugs":{"url":"http://github.com/pgte/nock/issues"},"_id":"nock@0.46.0","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"tap":"*","superagent":"~0.15.7","request":"*","restify":"^2.8.1","needle":"^0.7.1","hyperquest":"^0.3.0"},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"}],"_npmVersion":"1.4.21","main":"./index","_shasum":"ae828944f0ec041b7aa0959504dbf8eb46eafc4c","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dist":{"shasum":"ae828944f0ec041b7aa0959504dbf8eb46eafc4c","tarball":"https://registry.npmjs.org/nock/-/nock-0.46.0.tgz"},"homepage":"https://github.com/pgte/nock","dependencies":{"propagate":"0.3.x","lodash":"2.4.1","debug":"^1.0.4"},"description":"HTTP Server mocking for Node.js","gitHead":"a7866c171313da7269a2fd1051ca8aef125e3ae9","engines":["node >= 0.10.0"],"license":"MIT","repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"directories":{}},"3.2.0":{"main":"./index","_shasum":"061d65f879da9578d342cc8266ceec5d67eaa213","description":"HTTP Server mocking for Node.js","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"homepage":"https://github.com/pgte/nock#readme","dist":{"shasum":"061d65f879da9578d342cc8266ceec5d67eaa213","tarball":"https://registry.npmjs.org/nock/-/nock-3.2.0.tgz"},"dependencies":{"chai":">=1.9.2 <4.0.0","propagate":"0.3.x","deep-equal":"^1.0.0","lodash":"2.4.1","mkdirp":"^0.5.0","debug":"^2.2.0"},"license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git+ssh://git@github.com/pgte/nock.git","type":"git"},"gitHead":"3b71d8689315ae4d81507d1a27ea3f3448bfa773","engines":["node >= 0.10.0"],"maintainers":[{"email":"ivan@softwaremarbles.com","name":"ierceg"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"version":"3.2.0","_nodeVersion":"0.12.7","pre-commit":["jshint","coverage"],"_from":".","name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","changelog":"changelog nock all -m > CHANGELOG.md","test":"node --harmony tests/test.js","jshint":"jshint lib/*.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage"},"_id":"nock@3.2.0","contributors":[{"url":"https://github.com/RomanGotsiy","name":"Roman Hotsiy"},{"url":"https://github.com/jagoda","name":"Jeffrey Jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"email":"kelaban17@gmail.com","name":"Keith Laban","url":"https://github.com/kelaban"},{"url":"https://github.com/ruimarinho","name":"Rui Marinho","email":"ruipmarinho@gmail.com"},{"url":"https://github.com/DavidTPate","name":"David Pate","email":"davidtpate@gmail.com"},{"url":"https://github.com/matto1990","name":"Matt Oakes"}],"_npmVersion":"2.11.3","author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"restler":"3.2.2","needle":"^0.7.1","restify":"^2.8.1","changelog":"^1.0.7","request":"2.61.0","rimraf":"^2.3.2","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.3.8","pre-commit":"0.0.9","jshint":"^2.5.6","node-static":"^0.7.7","coveralls":"^2.11.2","superagent":"^1.4.0","tap":"^0.7.1","request-promise":"^0.4.3","browserify":"^12.0.1","zombie":"^4.2.1"},"directories":{}},"0.13.4":{"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"}],"repository":{"type":"git","url":"http://github.com/flatiron/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"request":"*","tap":"0.2.x"},"engines":["node >= 0.4.10"],"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"description":"HTTP Server mocking for Node.js","_id":"nock@0.13.4","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.13.4.tgz","shasum":"287135ca58923496d4259a94d1fe7f57f0544acb"},"bugs":{"url":"http://github.com/flatiron/nock/issues"},"main":"./index","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"version":"0.13.4","name":"nock","directories":{}},"0.8.3":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"_nodeVersion":"v0.4.11","version":"0.8.3","_defaultsLoaded":true,"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"name":"nock","_npmVersion":"1.0.106","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"}],"devDependencies":{"tap":"0.0.x"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.8.3","main":"./index","tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"_engineSupported":true,"engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","dependencies":{},"dist":{"shasum":"ee6ffa6098e0d49221fcb6e2ad791517c42fb69f","tarball":"https://registry.npmjs.org/nock/-/nock-0.8.3.tgz"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"directories":{}},"0.5.6":{"devDependencies":{"tap":"0.0.x"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"_npmVersion":"1.0.105","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"}],"_id":"nock@0.5.6","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","version":"0.5.6","_nodeVersion":"v0.4.12","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"_defaultsLoaded":true,"engines":["node >= 0.4.10"],"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"_engineSupported":true,"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.5.6.tgz","shasum":"ab80d965d0529dfde244e0d3ea68ad7efed212ae"},"dependencies":{},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","main":"./index","directories":{}},"0.42.0":{"homepage":"https://github.com/pgte/nock","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.42.0.tgz","shasum":"b909af95da1017e7f9bc17987ea1494b1a84f513"},"dependencies":{"propagate":"0.2.x","lodash":"2.4.1","debug":"^0.8.1"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.10.0"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","main":"./index","_shasum":"b909af95da1017e7f9bc17987ea1494b1a84f513","_id":"nock@0.42.0","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"devDependencies":{"tap":"*","superagent":"~0.15.7","request":"*","needle":"^0.7.1","restify":"^2.8.1"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"_npmVersion":"1.4.9","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"}],"name":"nock","_from":".","version":"0.42.0","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"}],"bugs":{"url":"http://github.com/pgte/nock/issues"},"directories":{}},"5.4.0":{"_from":".","name":"nock","maintainers":[{"email":"ivan@softwaremarbles.com","name":"ierceg"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"}],"version":"5.4.0","_nodeVersion":"4.2.3","pre-commit":["jshint","coverage"],"bugs":{"url":"http://github.com/pgte/nock/issues"},"_id":"nock@5.4.0","scripts":{"coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","test":"node --harmony tests/test.js","changelog":"changelog nock all -m > CHANGELOG.md","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"},"devDependencies":{"isomorphic-fetch":"^2.2.0","istanbul":"^0.3.8","jshint":"^2.5.6","pre-commit":"0.0.9","needle":"^0.7.1","restler":"3.2.2","restify":"^2.8.1","request":"2.61.0","rimraf":"^2.3.2","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","request-promise":"^0.4.3","zombie":"^4.2.1","browserify":"^12.0.1","coveralls":"^2.11.2","node-static":"^0.7.7","superagent":"^1.4.0","tap":"^0.7.1"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"url":"https://github.com/jagoda","name":"Jeffrey Jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"},{"url":"https://github.com/kelaban","email":"kelaban17@gmail.com","name":"Keith Laban"},{"email":"ruipmarinho@gmail.com","name":"Rui Marinho","url":"https://github.com/ruimarinho"},{"url":"https://github.com/DavidTPate","email":"davidtpate@gmail.com","name":"David Pate"},{"url":"https://github.com/matto1990","name":"Matt Oakes"}],"_npmVersion":"2.14.7","main":"./index","_shasum":"5139c1d192f2977b0a5ca8d294a3410a9f2e637f","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dependencies":{"debug":"^2.2.0","mkdirp":"^0.5.0","lodash":"^3.10.1","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","propagate":"0.3.x","chai":">=1.9.2 <4.0.0"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-5.4.0.tgz","shasum":"5139c1d192f2977b0a5ca8d294a3410a9f2e637f"},"homepage":"https://github.com/pgte/nock#readme","description":"HTTP Server mocking for Node.js","engines":["node >= 0.10.0"],"gitHead":"a469aade0d0bb7278664e0c4577b16ad2f538892","license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git+ssh://git@github.com/pgte/nock.git","type":"git"},"directories":{}},"0.5.5":{"_npmVersion":"1.0.105","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"}],"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"tap":"0.0.x"},"scripts":{"test":"node_modules/.bin/tap tests"},"_id":"nock@0.5.5","bugs":{"url":"http://github.com/pgte/nock/issues"},"_nodeVersion":"v0.4.12","version":"0.5.5","_defaultsLoaded":true,"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"name":"nock","repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"_engineSupported":true,"engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","dependencies":{},"dist":{"shasum":"b52f04ae2c5fb8edc21b9fde6ac4800426b91550","tarball":"https://registry.npmjs.org/nock/-/nock-0.5.5.tgz"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"main":"./index","directories":{}},"5.3.0":{"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dependencies":{"chai":">=1.9.2 <4.0.0","json-stringify-safe":"^5.0.1","propagate":"0.3.x","debug":"^2.2.0","mkdirp":"^0.5.0","deep-equal":"^1.0.0","lodash":"^3.10.1"},"dist":{"shasum":"1bb2af346b846e9be9c532bcd31ac8a02dc2b3ba","tarball":"https://registry.npmjs.org/nock/-/nock-5.3.0.tgz"},"homepage":"https://github.com/pgte/nock#readme","description":"HTTP Server mocking for Node.js","gitHead":"7f5112484b4f6071874f4e31a33091cdca8731a6","engines":["node >= 0.10.0"],"license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git+ssh://git@github.com/pgte/nock.git","type":"git"},"main":"./index","_shasum":"1bb2af346b846e9be9c532bcd31ac8a02dc2b3ba","_id":"nock@5.3.0","scripts":{"coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","changelog":"changelog nock all -m > CHANGELOG.md","test":"node --harmony tests/test.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"node-static":"^0.7.7","coveralls":"^2.11.2","superagent":"^1.4.0","tap":"^0.7.1","zombie":"^4.2.1","browserify":"^12.0.1","request-promise":"^0.4.3","rimraf":"^2.3.2","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","restler":"3.2.2","needle":"^0.7.1","restify":"^2.8.1","request":"2.61.0","jshint":"^2.5.6","pre-commit":"0.0.9","isomorphic-fetch":"^2.2.0","istanbul":"^0.3.8"},"contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"},{"url":"https://github.com/kelaban","name":"Keith Laban","email":"kelaban17@gmail.com"},{"url":"https://github.com/ruimarinho","name":"Rui Marinho","email":"ruipmarinho@gmail.com"},{"url":"https://github.com/DavidTPate","email":"davidtpate@gmail.com","name":"David Pate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"_npmVersion":"2.14.7","_from":".","name":"nock","maintainers":[{"email":"ivan@softwaremarbles.com","name":"ierceg"},{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"_nodeVersion":"4.2.3","version":"5.3.0","pre-commit":["jshint","coverage"],"bugs":{"url":"http://github.com/pgte/nock/issues"},"directories":{}},"0.11.0":{"dependencies":{},"dist":{"shasum":"56b658624968ef2e3d792aedc69c19e04046ea29","tarball":"https://registry.npmjs.org/nock/-/nock-0.11.0.tgz"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"_engineSupported":true,"main":"./index","_id":"nock@0.11.0","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"devDependencies":{"request":"* ","tap":"0.2.x"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"optionalDependencies":{},"_npmVersion":"1.1.1","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"}],"name":"nock","version":"0.11.0","_nodeVersion":"v0.6.11","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"_defaultsLoaded":true,"bugs":{"url":"http://github.com/pgte/nock/issues"},"directories":{}},"7.2.0":{"name":"nock","_from":".","version":"7.2.0","_nodeVersion":"4.2.3","pre-commit":["jshint","coverage"],"maintainers":[{"email":"ivan@softwaremarbles.com","name":"ierceg"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"}],"bugs":{"url":"http://github.com/pgte/nock/issues"},"_id":"nock@7.2.0","scripts":{"changelog":"changelog nock all -m > CHANGELOG.md","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","jshint":"jshint lib/*.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","test":"node --harmony tests/test.js"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"isomorphic-fetch":"^2.2.0","istanbul":"^0.3.8","jshint":"^2.5.6","pre-commit":"0.0.9","needle":"^0.7.1","restler":"3.2.2","restify":"^2.8.1","request":"2.61.0","rimraf":"^2.3.2","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","request-promise":"^0.4.3","zombie":"^4.2.1","browserify":"^12.0.1","coveralls":"^2.11.2","node-static":"^0.7.7","tap":"^0.7.1","superagent":"^1.4.0"},"_npmVersion":"2.14.7","contributors":[{"url":"https://github.com/BinChang","name":"Bin Chang"},{"url":"https://github.com/RomanGotsiy","name":"Roman Hotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"},{"url":"https://github.com/kelaban","name":"Keith Laban","email":"kelaban17@gmail.com"},{"url":"https://github.com/ruimarinho","name":"Rui Marinho","email":"ruipmarinho@gmail.com"},{"url":"https://github.com/DavidTPate","name":"David Pate","email":"davidtpate@gmail.com"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"main":"./index","_npmOperationalInternal":{"tmp":"tmp/nock-7.2.0.tgz_1455528894199_0.7398308189585805","host":"packages-9-west.internal.npmjs.com"},"_shasum":"17447dcab568564821feaccb2c7ecbfb87e8e054","dist":{"shasum":"17447dcab568564821feaccb2c7ecbfb87e8e054","tarball":"https://registry.npmjs.org/nock/-/nock-7.2.0.tgz"},"dependencies":{"json-stringify-safe":"^5.0.1","propagate":"0.3.x","debug":"^2.2.0","mkdirp":"^0.5.0","deep-equal":"^1.0.0","lodash":"^3.10.1","qs":"^6.0.2","chai":">=1.9.2 <4.0.0"},"homepage":"https://github.com/pgte/nock#readme","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.10.0"],"gitHead":"7f09c23e6bf3fc99a246b4f6654e96736e55f2f6","tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git+ssh://git@github.com/pgte/nock.git","type":"git"},"license":"MIT","directories":{}},"7.0.2":{"gitHead":"4a3885f59de6cdf7a2200e180c370bacb829cd46","engines":["node >= 0.10.0"],"license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"git+ssh://git@github.com/pgte/nock.git"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"homepage":"https://github.com/pgte/nock#readme","dist":{"shasum":"7872c347282a8eefa1ccdc7eaa187af18d2b4557","tarball":"https://registry.npmjs.org/nock/-/nock-7.0.2.tgz"},"dependencies":{"chai":">=1.9.2 <4.0.0","qs":"^6.0.2","lodash":"^3.10.1","deep-equal":"^1.0.0","debug":"^2.2.0","mkdirp":"^0.5.0","propagate":"0.3.x","json-stringify-safe":"^5.0.1"},"description":"HTTP Server mocking for Node.js","_shasum":"7872c347282a8eefa1ccdc7eaa187af18d2b4557","main":"./index","author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"jshint":"^2.5.6","pre-commit":"0.0.9","isomorphic-fetch":"^2.2.0","istanbul":"^0.3.8","rimraf":"^2.3.2","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","restify":"^2.8.1","needle":"^0.7.1","restler":"3.2.2","request":"2.61.0","zombie":"^4.2.1","browserify":"^12.0.1","request-promise":"^0.4.3","node-static":"^0.7.7","coveralls":"^2.11.2","tap":"^0.7.1","superagent":"^1.4.0"},"contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"},{"url":"https://github.com/kelaban","email":"kelaban17@gmail.com","name":"Keith Laban"},{"url":"https://github.com/ruimarinho","name":"Rui Marinho","email":"ruipmarinho@gmail.com"},{"url":"https://github.com/DavidTPate","email":"davidtpate@gmail.com","name":"David Pate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"_npmVersion":"2.14.7","_id":"nock@7.0.2","scripts":{"coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","changelog":"changelog nock all -m > CHANGELOG.md","test":"node --harmony tests/test.js","jshint":"jshint lib/*.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","_from":".","maintainers":[{"email":"ivan@softwaremarbles.com","name":"ierceg"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"_nodeVersion":"4.2.3","pre-commit":["jshint","coverage"],"version":"7.0.2","directories":{}},"0.43.0":{"_shasum":"7e680be2c5c51343198ea2ca291e1a0e51714787","main":"./index","license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"gitHead":"70400bb22b5605d79b8c76280cb671c29afddc33","engines":["node >= 0.10.0"],"description":"HTTP Server mocking for Node.js","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dist":{"shasum":"7e680be2c5c51343198ea2ca291e1a0e51714787","tarball":"https://registry.npmjs.org/nock/-/nock-0.43.0.tgz"},"dependencies":{"propagate":"0.2.x","lodash":"2.4.1","debug":"^0.8.1"},"homepage":"https://github.com/pgte/nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"version":"0.43.0","name":"nock","_from":".","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"}],"_npmVersion":"1.4.14","author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"tap":"*","request":"*","superagent":"~0.15.7","restify":"^2.8.1","needle":"^0.7.1","hyperquest":"^0.3.0"},"scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"_id":"nock@0.43.0","directories":{}},"0.10.6":{"main":"./index","description":"HTTP Server mocking for Node.js","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dist":{"shasum":"bba66f132011b63be907901ddcf16ac0d9422dcc","tarball":"https://registry.npmjs.org/nock/-/nock-0.10.6.tgz"},"dependencies":{},"_engineSupported":true,"repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"engines":["node >= 0.4.10"],"_defaultsLoaded":true,"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"version":"0.10.6","_nodeVersion":"v0.6.11","name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.10.6","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"}],"optionalDependencies":{},"_npmVersion":"1.1.1","devDependencies":{"request":"* ","tap":"0.2.x"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"directories":{}},"1.9.0":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"_nodeVersion":"1.6.3","pre-commit":["jshint","coverage"],"version":"1.9.0","_from":".","name":"nock","contributors":[{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"},{"email":"kelaban17@gmail.com","name":"Keith Laban","url":"https://github.com/kelaban"}],"_npmVersion":"2.7.4","author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"aws-sdk":"^2.0.15","hyperquest":"^0.3.0","rimraf":"^2.3.2","tap":"*","superagent":"~0.15.7","request":"2.51.0","restler":"3.2.2","needle":"^0.7.1","restify":"^2.8.1","coveralls":"^2.11.2","pre-commit":"0.0.9","jshint":"^2.5.6","istanbul":"^0.3.8"},"scripts":{"coveralls":"istanbul cover tests/test.js && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","test":"node tests/test.js","coverage":"istanbul cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js"},"_id":"nock@1.9.0","_shasum":"cd8667525f845f72ca1b7728fa3ff74c4d086c3a","main":"./index","license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"engines":["node >= 0.10.0"],"gitHead":"a6a2088353cd171061752ff565e948a1cf725714","description":"HTTP Server mocking for Node.js","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dist":{"shasum":"cd8667525f845f72ca1b7728fa3ff74c4d086c3a","tarball":"https://registry.npmjs.org/nock/-/nock-1.9.0.tgz"},"homepage":"https://github.com/pgte/nock","dependencies":{"propagate":"0.3.x","chai":"^1.9.2","lodash":"2.4.1","mkdirp":"^0.5.0","debug":"^1.0.4"},"directories":{}},"0.53.0":{"homepage":"https://github.com/pgte/nock","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.53.0.tgz","shasum":"22f4d2548469bb6053e1f499e35fd1707f39d22c"},"dependencies":{"propagate":"0.3.x","debug":"^1.0.4","lodash":"2.4.1"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","gitHead":"371cea9f829ecd9e35cf27a12becde2ae33b14ab","engines":["node >= 0.10.0"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","main":"./index","_shasum":"22f4d2548469bb6053e1f499e35fd1707f39d22c","_id":"nock@0.53.0","scripts":{"jshint":"jshint lib/*.js","test":"node node_modules/tap/bin/tap.js --dd tests"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"pre-commit":"0.0.9","jshint":"^2.5.6","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","needle":"^0.7.1","restify":"^2.8.1","superagent":"~0.15.7","tap":"*","request":"*"},"_npmVersion":"1.4.28","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"}],"name":"nock","_from":".","pre-commit":["jshint","test"],"version":"0.53.0","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"}],"bugs":{"url":"http://github.com/pgte/nock/issues"},"directories":{}},"0.22.1":{"main":"./index","tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"http://github.com/flatiron/nock.git","type":"git"},"license":"MIT","engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","dist":{"shasum":"264b7cce98164145770306764dbc460a0c9e908e","tarball":"https://registry.npmjs.org/nock/-/nock-0.22.1.tgz"},"dependencies":{"propagate":"0.2.x"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"bugs":{"url":"http://github.com/flatiron/nock/issues"},"version":"0.22.1","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"name":"nock","_from":".","_npmVersion":"1.2.32","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"}],"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"request":"*","tap":"*"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.22.1","directories":{}},"7.0.1":{"pre-commit":["jshint","coverage"],"_nodeVersion":"4.2.3","version":"7.0.1","maintainers":[{"email":"ivan@softwaremarbles.com","name":"ierceg"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"name":"nock","_from":".","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"test":"node --harmony tests/test.js","jshint":"jshint lib/*.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","changelog":"changelog nock all -m > CHANGELOG.md"},"_id":"nock@7.0.1","_npmVersion":"2.14.7","contributors":[{"url":"https://github.com/RomanGotsiy","name":"Roman Hotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"},{"url":"https://github.com/kelaban","email":"kelaban17@gmail.com","name":"Keith Laban"},{"email":"ruipmarinho@gmail.com","name":"Rui Marinho","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"url":"https://github.com/matto1990","name":"Matt Oakes"}],"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"request":"2.61.0","restify":"^2.8.1","needle":"^0.7.1","restler":"3.2.2","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","rimraf":"^2.3.2","istanbul":"^0.3.8","isomorphic-fetch":"^2.2.0","jshint":"^2.5.6","pre-commit":"0.0.9","tap":"^0.7.1","superagent":"^1.4.0","node-static":"^0.7.7","coveralls":"^2.11.2","request-promise":"^0.4.3","zombie":"^4.2.1","browserify":"^12.0.1"},"main":"./index","_shasum":"1e1a41f7be169c7ecdf7c1f515bf56349e20e966","description":"HTTP Server mocking for Node.js","dependencies":{"propagate":"0.3.x","json-stringify-safe":"^5.0.1","chai":">=1.9.2 <4.0.0","qs":"^6.0.2","lodash":"^3.10.1","deep-equal":"^1.0.0","debug":"^2.2.0","mkdirp":"^0.5.0"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-7.0.1.tgz","shasum":"1e1a41f7be169c7ecdf7c1f515bf56349e20e966"},"homepage":"https://github.com/pgte/nock#readme","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"git+ssh://git@github.com/pgte/nock.git"},"license":"MIT","gitHead":"8ab1c6a42d81da7dd31b7f514d7ba5d82ec4b6dc","engines":["node >= 0.10.0"],"directories":{}},"0.15.0":{"_npmVersion":"1.1.65","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"}],"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"request":"*","tap":"0.2.x"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.15.0","bugs":{"url":"http://github.com/flatiron/nock/issues"},"version":"0.15.0","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"name":"nock","repository":{"type":"git","url":"http://github.com/flatiron/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","dist":{"shasum":"cf5a3ef1cfe8acda4d04f2255b66b139deb35067","tarball":"https://registry.npmjs.org/nock/-/nock-0.15.0.tgz"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"main":"./index","directories":{}},"2.16.0":{"_npmVersion":"2.11.3","contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"url":"https://github.com/jagoda","name":"Jeffrey Jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"url":"https://github.com/DavidTPate","name":"David Pate","email":"davidtpate@gmail.com"},{"url":"https://github.com/matto1990","name":"Matt Oakes"}],"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"pre-commit":"0.0.9","jshint":"^2.5.6","istanbul":"^0.3.8","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","rimraf":"^2.3.2","superagent":"~0.15.7","tap":"^0.7.1","request":"2.61.0","restify":"^2.8.1","restler":"3.2.2","coveralls":"^2.11.2","needle":"^0.7.1"},"scripts":{"coverage":"istanbul cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","test":"node tests/test.js","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"},"_id":"nock@2.16.0","bugs":{"url":"http://github.com/pgte/nock/issues"},"_nodeVersion":"0.12.7","pre-commit":["jshint","coverage"],"version":"2.16.0","maintainers":[{"email":"ivan@softwaremarbles.com","name":"ierceg"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"}],"name":"nock","_from":".","tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git+ssh://git@github.com/pgte/nock.git","type":"git"},"license":"MIT","gitHead":"9d9ac756cfb13f47aafc72318bcc7a457ae68e7e","engines":["node >= 0.10.0"],"description":"HTTP Server mocking for Node.js","dist":{"shasum":"50304df438c97ce05c78d85f4974e13a1a71b22e","tarball":"https://registry.npmjs.org/nock/-/nock-2.16.0.tgz"},"dependencies":{"propagate":"0.3.x","chai":">=1.9.2 <4.0.0","debug":"^1.0.4","mkdirp":"^0.5.0","deep-equal":"^1.0.0","lodash":"2.4.1"},"homepage":"https://github.com/pgte/nock#readme","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"_shasum":"50304df438c97ce05c78d85f4974e13a1a71b22e","main":"./index","directories":{}},"0.38.0":{"_shasum":"2c9243d43e1b258348a6bd70f741be80df4887b2","main":"./index","engines":["node >= 0.10.0"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"license":"MIT","dist":{"shasum":"2c9243d43e1b258348a6bd70f741be80df4887b2","tarball":"https://registry.npmjs.org/nock/-/nock-0.38.0.tgz"},"homepage":"https://github.com/pgte/nock","dependencies":{"debug":"^0.8.1","lodash":"2.4.1","propagate":"0.2.x"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","_from":".","version":"0.38.0","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"}],"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"needle":"^0.7.1","restify":"^2.8.1","superagent":"~0.15.7","tap":"*","request":"*"},"_npmVersion":"1.4.9","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"}],"_id":"nock@0.38.0","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"directories":{}},"2.18.0":{"description":"HTTP Server mocking for Node.js","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"homepage":"https://github.com/pgte/nock#readme","dist":{"shasum":"ee4bdaaf4c001ff40df37f176ac6b10d0cda4ec0","tarball":"https://registry.npmjs.org/nock/-/nock-2.18.0.tgz"},"dependencies":{"lodash":"2.4.1","deep-equal":"^1.0.0","mkdirp":"^0.5.0","debug":"^1.0.4","propagate":"0.3.x","chai":">=1.9.2 <4.0.0"},"license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"git+ssh://git@github.com/pgte/nock.git"},"engines":["node >= 0.10.0"],"gitHead":"91fec866f7e922ad7d5ca470d2908deceb7909c0","main":"./index","_shasum":"ee4bdaaf4c001ff40df37f176ac6b10d0cda4ec0","scripts":{"coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","test":"node --harmony tests/test.js","jshint":"jshint lib/*.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage"},"_id":"nock@2.18.0","contributors":[{"url":"https://github.com/RomanGotsiy","name":"Roman Hotsiy"},{"url":"https://github.com/jagoda","name":"Jeffrey Jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"},{"email":"kelaban17@gmail.com","name":"Keith Laban","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"url":"https://github.com/DavidTPate","name":"David Pate","email":"davidtpate@gmail.com"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"_npmVersion":"2.11.3","author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"request-promise":"^0.4.3","zombie":"^4.2.1","browserify":"^12.0.1","node-static":"^0.7.7","coveralls":"^2.11.2","tap":"^0.7.1","superagent":"~0.15.7","isomorphic-fetch":"^2.2.0","istanbul":"^0.3.8","jshint":"^2.5.6","pre-commit":"0.0.9","restify":"^2.8.1","needle":"^0.7.1","restler":"3.2.2","request":"2.61.0","rimraf":"^2.3.2","hyperquest":"^0.3.0","aws-sdk":"^2.0.15"},"maintainers":[{"email":"ivan@softwaremarbles.com","name":"ierceg"},{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"_nodeVersion":"0.12.7","version":"2.18.0","pre-commit":["jshint","coverage"],"name":"nock","_from":".","bugs":{"url":"http://github.com/pgte/nock/issues"},"directories":{}},"0.7.3":{"main":"./index","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dependencies":{},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.7.3.tgz","shasum":"0a957d7218de765bf49b0c399178c75dfb38a5f9"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"_engineSupported":true,"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"name":"nock","_defaultsLoaded":true,"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"_nodeVersion":"v0.4.11","version":"0.7.3","bugs":{"url":"http://github.com/pgte/nock/issues"},"_id":"nock@0.7.3","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"devDependencies":{"tap":"0.0.x"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"}],"_npmVersion":"1.0.106","directories":{}},"3.4.1":{"_shasum":"58a128f55ee813a41815e6dbd32b0cdc4cbbd888","main":"./index","gitHead":"8e8b46d11c30bcd3d02e2d18131049e768d117b4","engines":["node >= 0.10.0"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"git+ssh://git@github.com/pgte/nock.git"},"license":"MIT","dependencies":{"deep-equal":"^1.0.0","lodash":"2.4.1","debug":"^2.2.0","mkdirp":"^0.5.0","propagate":"0.3.x","json-stringify-safe":"^5.0.1","chai":">=1.9.2 <4.0.0"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-3.4.1.tgz","shasum":"58a128f55ee813a41815e6dbd32b0cdc4cbbd888"},"homepage":"https://github.com/pgte/nock#readme","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","bugs":{"url":"http://github.com/pgte/nock/issues"},"_from":".","name":"nock","_nodeVersion":"4.2.3","version":"3.4.1","pre-commit":["jshint","coverage"],"maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"name":"svnlto","email":"me@svenlito.com"}],"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"node-static":"^0.7.7","coveralls":"^2.11.2","superagent":"^1.4.0","tap":"^0.7.1","zombie":"^4.2.1","browserify":"^12.0.1","request-promise":"^0.4.3","rimraf":"^2.3.2","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","restify":"^2.8.1","restler":"3.2.2","needle":"^0.7.1","request":"2.61.0","jshint":"^2.5.6","pre-commit":"0.0.9","isomorphic-fetch":"^2.2.0","istanbul":"^0.3.8"},"_npmVersion":"2.14.7","contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"url":"https://github.com/jagoda","name":"Jeffrey Jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"},{"email":"kelaban17@gmail.com","name":"Keith Laban","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"email":"davidtpate@gmail.com","name":"David Pate","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"_id":"nock@3.4.1","scripts":{"coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","test":"node --harmony tests/test.js","changelog":"changelog nock all -m > CHANGELOG.md","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"},"directories":{}},"0.27.2":{"main":"./index","dependencies":{"propagate":"0.2.x"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.27.2.tgz","shasum":"c20b06f9012efbb56436ddf6c677f3a75e0527bc"},"homepage":"https://github.com/pgte/nock","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"license":"MIT","name":"nock","_from":".","version":"0.27.2","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"}],"bugs":{"url":"http://github.com/pgte/nock/issues"},"_id":"nock@0.27.2","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"tap":"*","superagent":"~0.15.7","request":"*"},"_npmVersion":"1.3.14","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"}],"directories":{}},"1.7.1":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"ierceg","email":"ivan@softwaremarbles.com"}],"_nodeVersion":"1.6.3","pre-commit":["jshint","coverage"],"version":"1.7.1","_from":".","name":"nock","contributors":[{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"url":"https://github.com/kelaban","name":"Keith Laban","email":"kelaban17@gmail.com"}],"_npmVersion":"2.7.4","devDependencies":{"request":"2.51.0","tap":"*","superagent":"~0.15.7","coveralls":"^2.11.2","restler":"3.2.2","restify":"^2.8.1","needle":"^0.7.1","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","rimraf":"^2.3.2","istanbul":"^0.3.8","pre-commit":"0.0.9","jshint":"^2.5.6"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"scripts":{"coveralls":"istanbul cover tests/test.js && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","test":"node tests/test.js","jshint":"jshint lib/*.js","coverage":"istanbul cover tests/test.js && istanbul check-coverage"},"_id":"nock@1.7.1","_shasum":"5087e1c3e2d1bb07c299f10d315dc8c8e03c37c9","main":"./index","license":"MIT","repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"gitHead":"e7a5e5822c4f4002decd0fe9151f5a2d9e757513","engines":["node >= 0.10.0"],"description":"HTTP Server mocking for Node.js","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dist":{"shasum":"5087e1c3e2d1bb07c299f10d315dc8c8e03c37c9","tarball":"https://registry.npmjs.org/nock/-/nock-1.7.1.tgz"},"dependencies":{"chai":"^1.9.2","propagate":"0.3.x","lodash":"2.4.1","debug":"^1.0.4","mkdirp":"^0.5.0"},"homepage":"https://github.com/pgte/nock","directories":{}},"0.10.0":{"_id":"nock@0.10.0","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"tap":"0.2.x"},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"}],"_npmVersion":"1.1.0-2","optionalDependencies":{},"name":"nock","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"_defaultsLoaded":true,"_nodeVersion":"v0.6.8","version":"0.10.0","bugs":{"url":"http://github.com/pgte/nock/issues"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.10.0.tgz","shasum":"b9a13ff3c900fb64096e2e600e8b45992ce9b81e"},"dependencies":{},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"_engineSupported":true,"repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"main":"./index","directories":{}},"0.17.2":{"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"http://github.com/flatiron/nock.git","type":"git"},"engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.17.2.tgz","shasum":"b68f303243bf65736194bbce7e2f276f31ca87c7"},"dependencies":{"propagate":"0.2.x"},"main":"./index","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"}],"_npmVersion":"1.2.15","devDependencies":{"tap":"*","request":"*"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.17.2","bugs":{"url":"http://github.com/flatiron/nock/issues"},"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"version":"0.17.2","name":"nock","_from":".","directories":{}},"0.27.1":{"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.27.1","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"}],"_npmVersion":"1.3.14","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"superagent":"~0.15.7","request":"*","tap":"*"},"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"version":"0.27.1","_from":".","name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"description":"HTTP Server mocking for Node.js","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"homepage":"https://github.com/pgte/nock","dist":{"shasum":"f2717c388f0f25718db5be2fcdc4c2609fbe67c8","tarball":"https://registry.npmjs.org/nock/-/nock-0.27.1.tgz"},"dependencies":{"propagate":"0.2.x"},"license":"MIT","repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"engines":["node >= 0.4.10"],"main":"./index","directories":{}},"0.12.3":{"main":"./index","dependencies":{},"dist":{"shasum":"5fa0357e1eb35a335111bbf959b836df9c9925e0","tarball":"https://registry.npmjs.org/nock/-/nock-0.12.3.tgz"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"_engineSupported":true,"name":"nock","_nodeVersion":"v0.6.15","version":"0.12.3","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"_defaultsLoaded":true,"bugs":{"url":"http://github.com/pgte/nock/issues"},"_id":"nock@0.12.3","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"devDependencies":{"request":"*","tap":"0.2.x"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"_npmVersion":"1.1.16","optionalDependencies":{},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"}],"directories":{}},"0.7.1":{"engines":["node >= 0.4.10"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"_engineSupported":true,"dependencies":{},"dist":{"shasum":"878c5010f5d36d709eaf868beb42ba6e05532ce8","tarball":"https://registry.npmjs.org/nock/-/nock-0.7.1.tgz"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","main":"./index","devDependencies":{"tap":"0.0.x"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"_npmVersion":"1.0.106","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"}],"_id":"nock@0.7.1","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","version":"0.7.1","_nodeVersion":"v0.4.11","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"_defaultsLoaded":true,"directories":{}},"0.5.7":{"main":"./index","description":"HTTP Server mocking for Node.js","dependencies":{},"dist":{"shasum":"86ef4541e76e858e9ee28712ec71c1ae0e5afba3","tarball":"https://registry.npmjs.org/nock/-/nock-0.5.7.tgz"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"_engineSupported":true,"engines":["node >= 0.4.10"],"version":"0.5.7","_nodeVersion":"v0.6.5","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"_defaultsLoaded":true,"name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.5.7","_npmVersion":"1.1.0-alpha-6","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"}],"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"tap":"0.0.x"},"directories":{}},"0.1.4":{"main":"./index","engines":["node >= 0.4.10"],"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"_engineSupported":true,"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.1.4.tgz","shasum":"5107f9b3cc1108dfb4cbc001498e887c3583ba82"},"dependencies":{},"description":"HTTP Server mocking for Node.js","bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","_nodeVersion":"v0.4.11","version":"0.1.4","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"_defaultsLoaded":true,"_npmJsonOpts":{"contributors":false,"file":"/Users/pedroteixeira/.npm/nock/0.1.4/package/package.json","wscript":false,"serverjs":false},"devDependencies":{"tap":"0.0.x"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"_npmVersion":"1.0.27","_id":"nock@0.1.4","scripts":{"test":"node_modules/.bin/tap tests"},"directories":{}},"0.18.2":{"version":"0.18.2","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"_from":".","name":"nock","bugs":{"url":"http://github.com/flatiron/nock/issues"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.18.2","_npmVersion":"1.2.17","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"}],"devDependencies":{"request":"*","tap":"*"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"main":"./index","description":"HTTP Server mocking for Node.js","dependencies":{"propagate":"0.2.x"},"dist":{"shasum":"56901b785b5989fe82f4a73e53859f86c4a26068","tarball":"https://registry.npmjs.org/nock/-/nock-0.18.2.tgz"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/flatiron/nock.git"},"engines":["node >= 0.4.10"],"directories":{}},"0.11.3":{"dist":{"shasum":"3d9a186bec8a739a430355a5bd54bc8648cacbde","tarball":"https://registry.npmjs.org/nock/-/nock-0.11.3.tgz"},"dependencies":{},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"_engineSupported":true,"main":"./index","_id":"nock@0.11.3","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"devDependencies":{"tap":"0.2.x","request":"*"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"_npmVersion":"1.1.1","optionalDependencies":{},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"}],"name":"nock","_nodeVersion":"v0.6.11","version":"0.11.3","_defaultsLoaded":true,"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"bugs":{"url":"http://github.com/pgte/nock/issues"},"directories":{}},"0.6.1":{"repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"_engineSupported":true,"engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","dependencies":{},"dist":{"shasum":"3bc100b48c7aa43f212b1e3d96a5cf3be2e15f29","tarball":"https://registry.npmjs.org/nock/-/nock-0.6.1.tgz"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"main":"./index","_npmVersion":"1.1.0-alpha-6","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"}],"devDependencies":{"tap":"0.0.x"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.6.1","bugs":{"url":"http://github.com/pgte/nock/issues"},"_nodeVersion":"v0.6.5","version":"0.6.1","_defaultsLoaded":true,"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"name":"nock","directories":{}},"7.2.2":{"name":"nock","_from":".","maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"}],"_nodeVersion":"4.2.3","pre-commit":["jshint","coverage"],"version":"7.2.2","bugs":{"url":"http://github.com/pgte/nock/issues"},"_id":"nock@7.2.2","scripts":{"changelog":"changelog nock all -m > CHANGELOG.md","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","test":"node --harmony tests/test.js"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"pre-commit":"0.0.9","jshint":"^2.5.6","isomorphic-fetch":"^2.2.0","istanbul":"^0.3.8","rimraf":"^2.3.2","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","needle":"^0.7.1","restify":"^2.8.1","restler":"3.2.2","request":"2.61.0","browserify":"^12.0.1","zombie":"^4.2.1","request-promise":"^0.4.3","node-static":"^0.7.7","coveralls":"^2.11.2","tap":"^0.7.1","superagent":"^1.4.0"},"contributors":[{"url":"https://github.com/BinChang","name":"Bin Chang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"url":"https://github.com/jagoda","name":"Jeffrey Jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"},{"email":"kelaban17@gmail.com","name":"Keith Laban","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"_npmVersion":"2.14.7","main":"./index","_npmOperationalInternal":{"tmp":"tmp/nock-7.2.2.tgz_1455884056479_0.8902638712897897","host":"packages-6-west.internal.npmjs.com"},"_shasum":"8e00aa4f8fb39e1266ed5fb7afa05c07cdccad36","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dist":{"shasum":"8e00aa4f8fb39e1266ed5fb7afa05c07cdccad36","tarball":"https://registry.npmjs.org/nock/-/nock-7.2.2.tgz"},"dependencies":{"mkdirp":"^0.5.0","debug":"^2.2.0","deep-equal":"^1.0.0","lodash":"^3.10.1","qs":"^6.0.2","chai":">=1.9.2 <4.0.0","propagate":"0.3.x","json-stringify-safe":"^5.0.1"},"homepage":"https://github.com/pgte/nock#readme","description":"HTTP Server mocking for Node.js","gitHead":"7a782643915b4b3c788c6da8bb8cc7a8c4fc9aa7","engines":["node >= 0.10.0"],"license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"git+ssh://git@github.com/pgte/nock.git"},"directories":{}},"0.49.0":{"scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"_id":"nock@0.49.0","_npmVersion":"1.4.28","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"}],"devDependencies":{"aws-sdk":"^2.0.15","hyperquest":"^0.3.0","tap":"*","request":"*","superagent":"~0.15.7","needle":"^0.7.1","restify":"^2.8.1"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"version":"0.49.0","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"}],"name":"nock","_from":".","bugs":{"url":"http://github.com/pgte/nock/issues"},"description":"HTTP Server mocking for Node.js","dependencies":{"debug":"^1.0.4","lodash":"2.4.1","propagate":"0.3.x"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.49.0.tgz","shasum":"2db577d93cd7e3b02c2b9141249d3aee34a002df"},"homepage":"https://github.com/pgte/nock","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"license":"MIT","gitHead":"154ff56437340cc5aa3e96d7ddeb7cec1f05e47d","engines":["node >= 0.10.0"],"main":"./index","_shasum":"2db577d93cd7e3b02c2b9141249d3aee34a002df","directories":{}},"0.22.0":{"dist":{"shasum":"8fb2aa43fcb28f8cdbc30520d8e1ae7740b60270","tarball":"https://registry.npmjs.org/nock/-/nock-0.22.0.tgz"},"dependencies":{"propagate":"0.2.x"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/flatiron/nock.git"},"license":"MIT","main":"./index","_id":"nock@0.22.0","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"request":"*","tap":"*"},"_npmVersion":"1.2.32","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"}],"name":"nock","_from":".","version":"0.22.0","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"bugs":{"url":"http://github.com/flatiron/nock/issues"},"directories":{}},"0.13.0":{"engines":["node >= 0.4.10"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"_engineSupported":true,"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.13.0.tgz","shasum":"5af31e3e932ee99e459a55d18c5f29357e711c10"},"dependencies":{},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","main":"./index","devDependencies":{"tap":"0.2.x","request":"*"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"optionalDependencies":{},"_npmVersion":"1.1.16","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"}],"_id":"nock@0.13.0","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","_nodeVersion":"v0.6.15","version":"0.13.0","_defaultsLoaded":true,"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"directories":{}},"0.30.0":{"_npmVersion":"1.3.14","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"}],"devDependencies":{"superagent":"~0.15.7","tap":"*","request":"*"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"_id":"nock@0.30.0","bugs":{"url":"http://github.com/pgte/nock/issues"},"version":"0.30.0","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"}],"_from":".","name":"nock","repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","dependencies":{"debug":"^0.8.1","lodash":"2.4.1","propagate":"0.2.x"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.30.0.tgz","shasum":"a91d6c1efbed3e6b0a7357f1dc9174b5b0bc5780"},"homepage":"https://github.com/pgte/nock","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"main":"./index","directories":{}},"0.52.3":{"_from":".","name":"nock","version":"0.52.3","pre-commit":["jshint","test"],"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"bugs":{"url":"http://github.com/pgte/nock/issues"},"_id":"nock@0.52.3","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests","jshint":"jshint lib/*.js"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"jshint":"^2.5.6","pre-commit":"0.0.9","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","restify":"^2.8.1","needle":"^0.7.1","tap":"*","request":"*","superagent":"~0.15.7"},"_npmVersion":"1.4.28","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"}],"main":"./index","_shasum":"e588de4d5c15d15dcc2b3044c0813b64e263d310","homepage":"https://github.com/pgte/nock","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.52.3.tgz","shasum":"e588de4d5c15d15dcc2b3044c0813b64e263d310"},"dependencies":{"debug":"^1.0.4","lodash":"2.4.1","propagate":"0.3.x"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","gitHead":"8dea94833d93eccbd244f01a541b3a874b1f7790","engines":["node >= 0.10.0"],"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","directories":{}},"0.17.1":{"repository":{"url":"http://github.com/flatiron/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dependencies":{"propagate":"0.2.x"},"dist":{"shasum":"41fa7b1ac0bc39fc5af93ad30be254db227674f8","tarball":"https://registry.npmjs.org/nock/-/nock-0.17.1.tgz"},"main":"./index","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"}],"_npmVersion":"1.2.15","devDependencies":{"tap":"*","request":"*"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.17.1","bugs":{"url":"http://github.com/flatiron/nock/issues"},"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"version":"0.17.1","name":"nock","_from":".","directories":{}},"5.2.1":{"scripts":{"coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","test":"node --harmony tests/test.js","changelog":"changelog nock all -m > CHANGELOG.md","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"},"_id":"nock@5.2.1","contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"url":"https://github.com/jagoda","name":"Jeffrey Jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"},{"email":"kelaban17@gmail.com","name":"Keith Laban","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"url":"https://github.com/DavidTPate","email":"davidtpate@gmail.com","name":"David Pate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"_npmVersion":"2.14.7","devDependencies":{"istanbul":"^0.3.8","isomorphic-fetch":"^2.2.0","pre-commit":"0.0.9","jshint":"^2.5.6","request":"2.61.0","restler":"3.2.2","needle":"^0.7.1","restify":"^2.8.1","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","rimraf":"^2.3.2","request-promise":"^0.4.3","browserify":"^12.0.1","zombie":"^4.2.1","superagent":"^1.4.0","tap":"^0.7.1","node-static":"^0.7.7","coveralls":"^2.11.2"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"email":"me@svenlito.com","name":"svnlto"}],"_nodeVersion":"4.2.3","version":"5.2.1","pre-commit":["jshint","coverage"],"_from":".","name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"description":"HTTP Server mocking for Node.js","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dependencies":{"mkdirp":"^0.5.0","debug":"^2.2.0","lodash":"^3.10.1","deep-equal":"^1.0.0","chai":">=1.9.2 <4.0.0","json-stringify-safe":"^5.0.1","propagate":"0.3.x"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-5.2.1.tgz","shasum":"4aa825633a27b5a8542791850705c7a6c9cc9794"},"homepage":"https://github.com/pgte/nock#readme","license":"MIT","repository":{"type":"git","url":"git+ssh://git@github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"gitHead":"725fdc688b399d9fcdb8a63f83ee80b4a9b9b296","engines":["node >= 0.10.0"],"main":"./index","_shasum":"4aa825633a27b5a8542791850705c7a6c9cc9794","directories":{}},"0.39.0":{"_id":"nock@0.39.0","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"devDependencies":{"needle":"^0.7.1","restify":"^2.8.1","request":"*","superagent":"~0.15.7","tap":"*"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"_npmVersion":"1.4.9","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"}],"name":"nock","_from":".","version":"0.39.0","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"bugs":{"url":"http://github.com/pgte/nock/issues"},"homepage":"https://github.com/pgte/nock","dist":{"shasum":"ef0fd2b342cd41a293bc07b8978ec8c04f1d8199","tarball":"https://registry.npmjs.org/nock/-/nock-0.39.0.tgz"},"dependencies":{"debug":"^0.8.1","lodash":"2.4.1","propagate":"0.2.x"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.10.0"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"license":"MIT","main":"./index","_shasum":"ef0fd2b342cd41a293bc07b8978ec8c04f1d8199","directories":{}},"0.12.2":{"main":"./index","_engineSupported":true,"repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dependencies":{},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.12.2.tgz","shasum":"c8f24d499f59ce0111d84bccd6e91dc82065e831"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"_defaultsLoaded":true,"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"version":"0.12.2","_nodeVersion":"v0.6.11","name":"nock","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"}],"optionalDependencies":{},"_npmVersion":"1.1.1","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"request":"*","tap":"0.2.x"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.12.2","directories":{}},"3.1.1":{"main":"./index","_shasum":"aed814a311f576a6f5efd1a0dc7ff039b47c5703","description":"HTTP Server mocking for Node.js","dist":{"shasum":"aed814a311f576a6f5efd1a0dc7ff039b47c5703","tarball":"https://registry.npmjs.org/nock/-/nock-3.1.1.tgz"},"dependencies":{"deep-equal":"^1.0.0","lodash":"2.4.1","mkdirp":"^0.5.0","debug":"^2.2.0","chai":">=1.9.2 <4.0.0","propagate":"0.3.x"},"homepage":"https://github.com/pgte/nock#readme","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git+ssh://git@github.com/pgte/nock.git","type":"git"},"license":"MIT","gitHead":"9b01a705b5b2c8912901480166b792b74ce33fd0","engines":["node >= 0.10.0"],"version":"3.1.1","_nodeVersion":"0.12.7","pre-commit":["jshint","coverage"],"maintainers":[{"email":"ivan@softwaremarbles.com","name":"ierceg"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"name":"svnlto","email":"me@svenlito.com"}],"name":"nock","_from":".","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"changelog":"changelog nock all -m > CHANGELOG.md","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","jshint":"jshint lib/*.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","test":"node --harmony tests/test.js"},"_id":"nock@3.1.1","_npmVersion":"2.11.3","contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"url":"https://github.com/kelaban","name":"Keith Laban","email":"kelaban17@gmail.com"},{"url":"https://github.com/ruimarinho","email":"ruipmarinho@gmail.com","name":"Rui Marinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"url":"https://github.com/matto1990","name":"Matt Oakes"}],"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"rimraf":"^2.3.2","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","needle":"^0.7.1","restler":"3.2.2","restify":"^2.8.1","request":"2.61.0","changelog":"^1.0.7","jshint":"^2.5.6","pre-commit":"0.0.9","isomorphic-fetch":"^2.2.0","istanbul":"^0.3.8","coveralls":"^2.11.2","node-static":"^0.7.7","superagent":"^1.4.0","tap":"^0.7.1","zombie":"^4.2.1","browserify":"^12.0.1","request-promise":"^0.4.3"},"directories":{}},"0.14.1":{"_id":"nock@0.14.1","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"tap":"0.2.x","request":"*"},"_npmVersion":"1.1.65","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"}],"name":"nock","version":"0.14.1","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"bugs":{"url":"http://github.com/flatiron/nock/issues"},"dist":{"shasum":"9c63cbbc380e9f9b963c3eaecf2d3eb15678d462","tarball":"https://registry.npmjs.org/nock/-/nock-0.14.1.tgz"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"http://github.com/flatiron/nock.git","type":"git"},"main":"./index","directories":{}},"1.6.0":{"description":"HTTP Server mocking for Node.js","dependencies":{"propagate":"0.3.x","chai":"^1.9.2","lodash":"2.4.1","debug":"^1.0.4","mkdirp":"^0.5.0"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-1.6.0.tgz","shasum":"f517537f8c456e47426cf544523ddf22fb9618d6"},"homepage":"https://github.com/pgte/nock","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"license":"MIT","gitHead":"98ed7e198a2bd872717d6293dcbe440e8cedff6c","engines":["node >= 0.10.0"],"main":"./index","_shasum":"f517537f8c456e47426cf544523ddf22fb9618d6","scripts":{"coveralls":"istanbul cover tests/test.js && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","test":"node tests/test.js","jshint":"jshint lib/*.js","coverage":"istanbul cover tests/test.js && istanbul check-coverage"},"_id":"nock@1.6.0","_npmVersion":"2.7.4","contributors":[{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"}],"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"pre-commit":"0.0.9","jshint":"^2.5.6","istanbul":"^0.3.8","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","restify":"^2.8.1","restler":"3.2.2","needle":"^0.7.1","coveralls":"^2.11.2","request":"2.51.0","tap":"*","superagent":"~0.15.7"},"pre-commit":["jshint","coverage"],"_nodeVersion":"1.6.3","version":"1.6.0","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"_from":".","name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"directories":{}},"0.14.0":{"name":"nock","version":"0.14.0","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"bugs":{"url":"http://github.com/flatiron/nock/issues"},"_id":"nock@0.14.0","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"devDependencies":{"request":"*","tap":"0.2.x"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"_npmVersion":"1.1.65","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"}],"main":"./index","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.14.0.tgz","shasum":"74b91c4717db88345114f0bc98030492f6b5470e"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/flatiron/nock.git"},"directories":{}},"2.15.0":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"version":"2.15.0","_nodeVersion":"0.12.7","pre-commit":["jshint","coverage"],"maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"}],"_from":".","name":"nock","_npmVersion":"2.11.3","contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"url":"https://github.com/jagoda","name":"Jeffrey Jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"},{"url":"https://github.com/kelaban","name":"Keith Laban","email":"kelaban17@gmail.com"},{"url":"https://github.com/ruimarinho","email":"ruipmarinho@gmail.com","name":"Rui Marinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"url":"https://github.com/matto1990","name":"Matt Oakes"}],"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"pre-commit":"0.0.9","jshint":"^2.5.6","istanbul":"^0.3.8","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","rimraf":"^2.3.2","request":"2.61.0","tap":"^0.7.1","superagent":"~0.15.7","restler":"3.2.2","coveralls":"^2.11.2","restify":"^2.8.1","needle":"^0.7.1"},"scripts":{"coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","coverage":"istanbul cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","test":"node tests/test.js"},"_id":"nock@2.15.0","_shasum":"1a4582ae7e0f8bfd6a983b221f9f5861ee719469","main":"./index","tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"git+ssh://git@github.com/pgte/nock.git"},"license":"MIT","gitHead":"3ae57b7a402df3032f081c841b4a9469b9366c2c","engines":["node >= 0.10.0"],"description":"HTTP Server mocking for Node.js","dependencies":{"mkdirp":"^0.5.0","debug":"^1.0.4","deep-equal":"^1.0.0","lodash":"2.4.1","chai":">=1.9.2 <4.0.0","propagate":"0.3.x"},"dist":{"shasum":"1a4582ae7e0f8bfd6a983b221f9f5861ee719469","tarball":"https://registry.npmjs.org/nock/-/nock-2.15.0.tgz"},"homepage":"https://github.com/pgte/nock#readme","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"directories":{}},"0.24.0":{"_id":"nock@0.24.0","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"devDependencies":{"request":"*","tap":"*"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"}],"_npmVersion":"1.3.14","_from":".","name":"nock","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"version":"0.24.0","bugs":{"url":"http://github.com/flatiron/nock/issues"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dist":{"shasum":"59a0b3a86638fb6c8601b1b85baaa820e3f46b14","tarball":"https://registry.npmjs.org/nock/-/nock-0.24.0.tgz"},"dependencies":{"propagate":"0.2.x"},"homepage":"https://github.com/flatiron/nock","description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"license":"MIT","repository":{"type":"git","url":"http://github.com/flatiron/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"main":"./index","directories":{}},"0.15.3":{"_id":"nock@0.15.3","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"devDependencies":{"tap":"0.4.x","request":"*"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"_npmVersion":"1.2.11","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"}],"name":"nock","_from":".","version":"0.15.3","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"bugs":{"url":"http://github.com/flatiron/nock/issues"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.15.3.tgz","shasum":"c4a0f4f862d5ab2ffd03bf16186c44dece311442"},"dependencies":{"propagate":"0.2.x"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"repository":{"type":"git","url":"http://github.com/flatiron/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"main":"./index","directories":{}},"0.54.0":{"_id":"nock@0.54.0","scripts":{"jshint":"jshint lib/*.js","test":"node node_modules/tap/bin/tap.js --dd tests"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"request":"*","tap":"*","superagent":"~0.15.7","needle":"^0.7.1","restify":"^2.8.1","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","pre-commit":"0.0.9","jshint":"^2.5.6"},"_npmVersion":"1.4.28","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"},{"url":"https://github.com/kelaban","email":"kelaban17@gmail.com","name":"Keith Laban"}],"name":"nock","_from":".","version":"0.54.0","pre-commit":["jshint","test"],"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"}],"bugs":{"url":"http://github.com/pgte/nock/issues"},"dependencies":{"lodash":"2.4.1","debug":"^1.0.4","mkdirp":"^0.5.0","chai":"^1.9.2","propagate":"0.3.x"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.54.0.tgz","shasum":"1827ed646e2669c3ea7893f132cbb207f30c0097"},"homepage":"https://github.com/pgte/nock","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","gitHead":"0279b479cc22679bbd6eb8372bc69400e0d730f8","engines":["node >= 0.10.0"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"license":"MIT","main":"./index","_shasum":"1827ed646e2669c3ea7893f132cbb207f30c0097","directories":{}},"0.52.2":{"devDependencies":{"aws-sdk":"^2.0.15","hyperquest":"^0.3.0","restify":"^2.8.1","needle":"^0.7.1","request":"*","tap":"*","superagent":"~0.15.7","pre-commit":"0.0.9","jshint":"^2.5.6"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"}],"_npmVersion":"1.4.28","_id":"nock@0.52.2","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests","jshint":"jshint lib/*.js"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"_from":".","name":"nock","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"pre-commit":["jshint","test"],"version":"0.52.2","gitHead":"33041eae794868cd35b139f8022246d468e6d2df","engines":["node >= 0.10.0"],"license":"MIT","repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.52.2.tgz","shasum":"54ab0c10716c932436d33ef1a8b73745af280ac3"},"homepage":"https://github.com/pgte/nock","dependencies":{"lodash":"2.4.1","debug":"^1.0.4","propagate":"0.3.x"},"description":"HTTP Server mocking for Node.js","_shasum":"54ab0c10716c932436d33ef1a8b73745af280ac3","main":"./index","directories":{}},"0.20.0":{"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"version":"0.20.0","_from":".","name":"nock","bugs":{"url":"http://github.com/flatiron/nock/issues"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.20.0","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"}],"_npmVersion":"1.2.32","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"request":"*","tap":"*"},"main":"./index","description":"HTTP Server mocking for Node.js","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dist":{"shasum":"8bf77f6f7f6a0c2dd6fb96ee8df9b91c82b3f02e","tarball":"https://registry.npmjs.org/nock/-/nock-0.20.0.tgz"},"dependencies":{"propagate":"0.2.x"},"repository":{"type":"git","url":"http://github.com/flatiron/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"engines":["node >= 0.4.10"],"directories":{}},"0.14.2":{"name":"nock","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"version":"0.14.2","bugs":{"url":"http://github.com/flatiron/nock/issues"},"_id":"nock@0.14.2","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"devDependencies":{"request":"*","tap":"0.2.x"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"}],"_npmVersion":"1.1.65","main":"./index","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dist":{"shasum":"caa61d5961c4cde3541f25d9844f20a2e2dd667e","tarball":"https://registry.npmjs.org/nock/-/nock-0.14.2.tgz"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"repository":{"url":"http://github.com/flatiron/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"directories":{}},"0.10.1":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"_defaultsLoaded":true,"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"version":"0.10.1","_nodeVersion":"v0.6.8","name":"nock","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"}],"_npmVersion":"1.1.0-2","optionalDependencies":{},"devDependencies":{"tap":"0.2.x"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.10.1","main":"./index","_engineSupported":true,"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.10.1.tgz","shasum":"6d84eb5250146e26013b44ebbc13c3d690049174"},"dependencies":{},"directories":{}},"0.14.3":{"version":"0.14.3","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"name":"nock","bugs":{"url":"http://github.com/flatiron/nock/issues"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.14.3","_npmVersion":"1.1.65","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"}],"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"request":"*","tap":"0.2.x"},"main":"./index","description":"HTTP Server mocking for Node.js","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.14.3.tgz","shasum":"73a8139818f54d65306a1666584f0ad8f5aeaa76"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"http://github.com/flatiron/nock.git","type":"git"},"engines":["node >= 0.4.10"],"directories":{}},"0.2.0":{"engines":["node >= 0.4.10"],"repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"_engineSupported":true,"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.2.0.tgz","shasum":"b333135f5a786bd99090427403ec58373580b1cb"},"dependencies":{},"description":"HTTP Server mocking for Node.js","main":"./index","author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"tap":"0.0.x"},"_npmVersion":"1.0.27","_id":"nock@0.2.0","scripts":{"test":"node_modules/.bin/tap tests"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","_nodeVersion":"v0.4.11","version":"0.2.0","_npmJsonOpts":{"serverjs":false,"wscript":false,"file":"/Users/pedroteixeira/.npm/nock/0.2.0/package/package.json","contributors":false},"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"_defaultsLoaded":true,"directories":{}},"0.28.2":{"main":"./index","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dependencies":{"propagate":"0.2.x"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.28.2.tgz","shasum":"10637ab9438fe3f7778168605299c8f30f338c88"},"homepage":"https://github.com/pgte/nock","description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"_from":".","name":"nock","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"version":"0.28.2","bugs":{"url":"http://github.com/pgte/nock/issues"},"_id":"nock@0.28.2","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"devDependencies":{"superagent":"~0.15.7","request":"*","tap":"*"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"}],"_npmVersion":"1.3.14","directories":{}},"0.31.3":{"main":"./index","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dependencies":{"debug":"^0.8.1","lodash":"2.4.1","propagate":"0.2.x"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.31.3.tgz","shasum":"e0ba418fad0c27938fdcf0820c1afc9806c75f43"},"homepage":"https://github.com/pgte/nock","description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"license":"MIT","repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"_from":".","name":"nock","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"version":"0.31.3","bugs":{"url":"http://github.com/pgte/nock/issues"},"_id":"nock@0.31.3","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"superagent":"~0.15.7","request":"*","tap":"*","needle":"^0.7.1"},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"}],"_npmVersion":"1.3.14","directories":{}},"0.27.0":{"_id":"nock@0.27.0","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"devDependencies":{"tap":"*","superagent":"~0.15.7","request":"*"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"_npmVersion":"1.3.14","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"}],"name":"nock","_from":".","version":"0.27.0","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"bugs":{"url":"http://github.com/pgte/nock/issues"},"dependencies":{"propagate":"0.2.x"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.27.0.tgz","shasum":"d90124039dc5228213454358ef5ca44440e585ed"},"homepage":"https://github.com/pgte/nock","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"license":"MIT","main":"./index","directories":{}},"0.2.1":{"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"tap":"0.0.x"},"_npmVersion":"1.0.27","contributors":[{"name":"Roly Fentanes"}],"_id":"nock@0.2.1","scripts":{"test":"node_modules/.bin/tap tests"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","_nodeVersion":"v0.4.11","version":"0.2.1","_defaultsLoaded":true,"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"_npmJsonOpts":{"contributors":false,"file":"/Users/pedroteixeira/.npm/nock/0.2.1/package/package.json","wscript":false,"serverjs":false},"engines":["node >= 0.4.10"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"_engineSupported":true,"dist":{"shasum":"ea29148cee8849156e83cec67534e642565429e1","tarball":"https://registry.npmjs.org/nock/-/nock-0.2.1.tgz"},"dependencies":{},"description":"HTTP Server mocking for Node.js","main":"./index","directories":{}},"5.5.0":{"main":"./index","_shasum":"20db6c730a2b63ad673938e97257442e9e7e9ccf","description":"HTTP Server mocking for Node.js","dist":{"shasum":"20db6c730a2b63ad673938e97257442e9e7e9ccf","tarball":"https://registry.npmjs.org/nock/-/nock-5.5.0.tgz"},"dependencies":{"json-stringify-safe":"^5.0.1","propagate":"0.3.x","chai":">=1.9.2 <4.0.0","debug":"^2.2.0","mkdirp":"^0.5.0","lodash":"^3.10.1","deep-equal":"^1.0.0"},"homepage":"https://github.com/pgte/nock#readme","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git+ssh://git@github.com/pgte/nock.git","type":"git"},"license":"MIT","gitHead":"a4314d6938a20ee9658d2659bb845369de177d46","engines":["node >= 0.10.0"],"pre-commit":["jshint","coverage"],"_nodeVersion":"4.2.3","version":"5.5.0","maintainers":[{"email":"ivan@softwaremarbles.com","name":"ierceg"},{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"}],"name":"nock","_from":".","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"changelog":"changelog nock all -m > CHANGELOG.md","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","test":"node --harmony tests/test.js"},"_id":"nock@5.5.0","_npmVersion":"2.14.7","contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"url":"https://github.com/DavidTPate","name":"David Pate","email":"davidtpate@gmail.com"},{"url":"https://github.com/matto1990","name":"Matt Oakes"}],"devDependencies":{"browserify":"^12.0.1","zombie":"^4.2.1","request-promise":"^0.4.3","tap":"^0.7.1","superagent":"^1.4.0","node-static":"^0.7.7","coveralls":"^2.11.2","pre-commit":"0.0.9","jshint":"^2.5.6","istanbul":"^0.3.8","isomorphic-fetch":"^2.2.0","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","rimraf":"^2.3.2","request":"2.61.0","restify":"^2.8.1","needle":"^0.7.1","restler":"3.2.2"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"directories":{}},"3.1.0":{"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"request-promise":"^0.4.3","zombie":"^4.2.1","browserify":"^12.0.1","node-static":"^0.7.7","coveralls":"^2.11.2","superagent":"^1.4.0","tap":"^0.7.1","isomorphic-fetch":"^2.2.0","istanbul":"^0.3.8","jshint":"^2.5.6","pre-commit":"0.0.9","needle":"^0.7.1","restler":"3.2.2","restify":"^2.8.1","request":"2.61.0","rimraf":"^2.3.2","hyperquest":"^0.3.0","aws-sdk":"^2.0.15"},"_npmVersion":"1.4.28","contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"},{"email":"kelaban17@gmail.com","name":"Keith Laban","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"email":"davidtpate@gmail.com","name":"David Pate","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"_id":"nock@3.1.0","scripts":{"coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","jshint":"jshint lib/*.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","test":"node --harmony tests/test.js"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","_from":".","pre-commit":["jshint","coverage"],"version":"3.1.0","maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"engines":["node >= 0.10.0"],"gitHead":"ffcd2a9a4184e1ee2074c365b84308c7f1795c1f","repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","dependencies":{"deep-equal":"^1.0.0","lodash":"2.4.1","debug":"^2.2.0","mkdirp":"^0.5.0","propagate":"0.3.x","chai":">=1.9.2 <4.0.0"},"dist":{"shasum":"a5c9d9a7d3331ded818c42f52feb762b9d62269e","tarball":"https://registry.npmjs.org/nock/-/nock-3.1.0.tgz"},"homepage":"https://github.com/pgte/nock","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","_shasum":"a5c9d9a7d3331ded818c42f52feb762b9d62269e","main":"./index","directories":{}},"0.42.2":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","_from":".","version":"0.42.2","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"restify":"^2.8.1","needle":"^0.7.1","tap":"*","superagent":"~0.15.7","request":"*"},"_npmVersion":"1.4.9","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"}],"_id":"nock@0.42.2","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"_shasum":"b1a1e72f027972481c77d0dd6baf0f243398d0d7","main":"./index","engines":["node >= 0.10.0"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.42.2.tgz","shasum":"b1a1e72f027972481c77d0dd6baf0f243398d0d7"},"homepage":"https://github.com/pgte/nock","dependencies":{"debug":"^0.8.1","lodash":"2.4.1","propagate":"0.2.x"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","directories":{}},"5.3.1":{"_id":"nock@5.3.1","scripts":{"coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","changelog":"changelog nock all -m > CHANGELOG.md","test":"node --harmony tests/test.js","jshint":"jshint lib/*.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"superagent":"^1.4.0","tap":"^0.7.1","node-static":"^0.7.7","coveralls":"^2.11.2","zombie":"^4.2.1","browserify":"^12.0.1","request-promise":"^0.4.3","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","rimraf":"^2.3.2","request":"2.61.0","restler":"3.2.2","needle":"^0.7.1","restify":"^2.8.1","jshint":"^2.5.6","pre-commit":"0.0.9","istanbul":"^0.3.8","isomorphic-fetch":"^2.2.0"},"_npmVersion":"2.14.7","contributors":[{"url":"https://github.com/RomanGotsiy","name":"Roman Hotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"},{"url":"https://github.com/kelaban","email":"kelaban17@gmail.com","name":"Keith Laban"},{"url":"https://github.com/ruimarinho","name":"Rui Marinho","email":"ruipmarinho@gmail.com"},{"email":"davidtpate@gmail.com","name":"David Pate","url":"https://github.com/DavidTPate"},{"url":"https://github.com/matto1990","name":"Matt Oakes"}],"name":"nock","_from":".","_nodeVersion":"4.2.3","version":"5.3.1","pre-commit":["jshint","coverage"],"maintainers":[{"email":"ivan@softwaremarbles.com","name":"ierceg"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"name":"svnlto","email":"me@svenlito.com"}],"bugs":{"url":"http://github.com/pgte/nock/issues"},"dependencies":{"chai":">=1.9.2 <4.0.0","json-stringify-safe":"^5.0.1","propagate":"0.3.x","lodash":"^3.10.1","deep-equal":"^1.0.0","debug":"^2.2.0","mkdirp":"^0.5.0"},"dist":{"shasum":"ed6d85ef2077c859cc4c2764a56e33d02e29c108","tarball":"https://registry.npmjs.org/nock/-/nock-5.3.1.tgz"},"homepage":"https://github.com/pgte/nock#readme","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","gitHead":"c8f394109c72429ef1f1eeff94276b442b9412dc","engines":["node >= 0.10.0"],"repository":{"url":"git+ssh://git@github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","main":"./index","_shasum":"ed6d85ef2077c859cc4c2764a56e33d02e29c108","directories":{}},"2.13.0":{"description":"HTTP Server mocking for Node.js","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"homepage":"https://github.com/pgte/nock#readme","dist":{"shasum":"7fd00852b3b35baea60d12aa0b7bb329945a702a","tarball":"https://registry.npmjs.org/nock/-/nock-2.13.0.tgz"},"dependencies":{"debug":"^1.0.4","mkdirp":"^0.5.0","lodash":"2.4.1","deep-equal":"^1.0.0","propagate":"0.3.x","chai":">=1.9.2 <4.0.0"},"license":"MIT","repository":{"url":"git+ssh://git@github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"gitHead":"53388e873321c126613a1f56eff871158105173b","engines":["node >= 0.10.0"],"main":"./index","_shasum":"7fd00852b3b35baea60d12aa0b7bb329945a702a","scripts":{"coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","test":"node tests/test.js","jshint":"jshint lib/*.js","coverage":"istanbul cover tests/test.js && istanbul check-coverage"},"_id":"nock@2.13.0","contributors":[{"url":"https://github.com/RomanGotsiy","name":"Roman Hotsiy"},{"url":"https://github.com/jagoda","name":"Jeffrey Jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"},{"url":"https://github.com/kelaban","email":"kelaban17@gmail.com","name":"Keith Laban"},{"email":"ruipmarinho@gmail.com","name":"Rui Marinho","url":"https://github.com/ruimarinho"}],"_npmVersion":"2.11.3","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"tap":"^0.7.1","superagent":"~0.15.7","request":"2.61.0","restler":"3.2.2","restify":"^2.8.1","needle":"^0.7.1","coveralls":"^2.11.2","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","rimraf":"^2.3.2","istanbul":"^0.3.8","jshint":"^2.5.6","pre-commit":"0.0.9"},"maintainers":[{"email":"ivan@softwaremarbles.com","name":"ierceg"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"}],"_nodeVersion":"0.12.7","version":"2.13.0","pre-commit":["jshint","coverage"],"_from":".","name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"directories":{}},"0.32.1":{"main":"./index","description":"HTTP Server mocking for Node.js","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.32.1.tgz","shasum":"cc8bcf0c7b1d7c906349afaadf95e7ce367baa68"},"dependencies":{"lodash":"2.4.1","debug":"^0.8.1","propagate":"0.2.x"},"homepage":"https://github.com/pgte/nock","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","engines":["node >= 0.4.10"],"version":"0.32.1","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"}],"_from":".","name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"_id":"nock@0.32.1","_npmVersion":"1.3.14","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"}],"devDependencies":{"needle":"^0.7.1","restify":"^2.8.1","superagent":"~0.15.7","request":"*","tap":"*"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"directories":{}},"0.1.2":{"engines":["node >= 0.4.10"],"_engineSupported":true,"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"dependencies":{},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.1.2.tgz","shasum":"d38f840fe562db1f867097a4775721060f036848"},"description":"HTTP Server mocking for Node.js","main":"./index","devDependencies":{"tap":"0.0.x"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"_npmVersion":"1.0.27","_id":"nock@0.1.2","scripts":{"test":"node_modules/.bin/tap tests"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"_defaultsLoaded":true,"_npmJsonOpts":{"contributors":false,"file":"/Users/pedroteixeira/.npm/nock/0.1.2/package/package.json","wscript":false,"serverjs":false},"_nodeVersion":"v0.4.11","version":"0.1.2","directories":{}},"0.48.2":{"scripts":{"jshint":"jshint lib/*.js","test":"node node_modules/tap/bin/tap.js --dd tests"},"_id":"nock@0.48.2","_npmVersion":"1.4.28","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"}],"devDependencies":{"aws-sdk":"^2.0.15","hyperquest":"^0.3.0","restify":"^2.8.1","needle":"^0.7.1","tap":"*","superagent":"~0.15.7","request":"*","pre-commit":"0.0.9","jshint":"^2.5.6"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"version":"0.48.2","pre-commit":["jshint","test"],"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"name":"nock","_from":".","bugs":{"url":"http://github.com/pgte/nock/issues"},"description":"HTTP Server mocking for Node.js","dist":{"shasum":"d72be38f5c98942273f71259d18d2a2b1bae6464","tarball":"https://registry.npmjs.org/nock/-/nock-0.48.2.tgz"},"homepage":"https://github.com/pgte/nock","dependencies":{"debug":"^1.0.4","lodash":"2.4.1","propagate":"0.3.x"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","gitHead":"1e1b414aaa6b37d5e1b3d9e39c3b62780112754d","engines":["node >= 0.10.0"],"main":"./index","_shasum":"d72be38f5c98942273f71259d18d2a2b1bae6464","directories":{}},"0.11.5":{"main":"./index","_engineSupported":true,"repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.11.5.tgz","shasum":"edfb200150bfb72b6160a4fbfc6d00e9d3c864dc"},"dependencies":{},"bugs":{"url":"http://github.com/pgte/nock/issues"},"_defaultsLoaded":true,"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"_nodeVersion":"v0.6.11","version":"0.11.5","name":"nock","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"}],"optionalDependencies":{},"_npmVersion":"1.1.1","author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"tap":"0.2.x","request":"*"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.11.5","directories":{}},"7.3.0":{"gitHead":"5cf92d157657b97e49854838cbda2150676f9c2f","engines":["node >= 0.10.0"],"repository":{"type":"git","url":"git+ssh://git@github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","dependencies":{"propagate":"0.3.x","json-stringify-safe":"^5.0.1","chai":">=1.9.2 <4.0.0","qs":"^6.0.2","lodash":"^3.10.1","deep-equal":"^1.0.0","debug":"^2.2.0","mkdirp":"^0.5.0"},"dist":{"shasum":"3d653e65e66bc52613fa10166987690c5a05c65b","tarball":"https://registry.npmjs.org/nock/-/nock-7.3.0.tgz"},"homepage":"https://github.com/pgte/nock#readme","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","_npmOperationalInternal":{"host":"packages-5-east.internal.npmjs.com","tmp":"tmp/nock-7.3.0.tgz_1456323432002_0.46297255577519536"},"_shasum":"3d653e65e66bc52613fa10166987690c5a05c65b","main":"./index","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"pre-commit":"0.0.9","jshint":"^2.5.6","isomorphic-fetch":"^2.2.0","istanbul":"^0.3.8","rimraf":"^2.3.2","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","needle":"^0.7.1","restify":"^2.8.1","restler":"3.2.2","request":"2.61.0","browserify":"^12.0.1","zombie":"^4.2.1","request-promise":"^0.4.3","node-static":"^0.7.7","coveralls":"^2.11.2","tap":"^0.7.1","superagent":"^1.4.0"},"_npmVersion":"2.14.7","contributors":[{"url":"https://github.com/BinChang","name":"Bin Chang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"url":"https://github.com/jagoda","name":"Jeffrey Jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"},{"email":"kelaban17@gmail.com","name":"Keith Laban","url":"https://github.com/kelaban"},{"url":"https://github.com/ruimarinho","name":"Rui Marinho","email":"ruipmarinho@gmail.com"},{"url":"https://github.com/DavidTPate","name":"David Pate","email":"davidtpate@gmail.com"},{"url":"https://github.com/matto1990","name":"Matt Oakes"}],"_id":"nock@7.3.0","scripts":{"jshint":"jshint lib/*.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","test":"node --harmony tests/test.js","changelog":"changelog nock all -m > CHANGELOG.md","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","_from":".","_nodeVersion":"4.2.3","version":"7.3.0","pre-commit":["jshint","coverage"],"maintainers":[{"email":"ivan@softwaremarbles.com","name":"ierceg"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"name":"svnlto","email":"me@svenlito.com"}],"directories":{}},"1.4.0":{"version":"1.4.0","_nodeVersion":"1.4.2","pre-commit":["jshint","coverage"],"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"},{"name":"ierceg","email":"ivan@softwaremarbles.com"}],"name":"nock","_from":".","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"test":"node tests/test.js","coverage":"istanbul cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","coveralls":"istanbul cover tests/test.js && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"},"_id":"nock@1.4.0","_npmVersion":"2.6.1","contributors":[{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"}],"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"pre-commit":"0.0.9","jshint":"^2.5.6","istanbul":"^0.3.8","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","tap":"*","request":"2.51.0","superagent":"~0.15.7","restler":"3.2.2","restify":"^2.8.1","coveralls":"^2.11.2","needle":"^0.7.1"},"main":"./index","_shasum":"fdb4f180a08687301a33b913bf609eee67b298f1","description":"HTTP Server mocking for Node.js","dist":{"shasum":"fdb4f180a08687301a33b913bf609eee67b298f1","tarball":"https://registry.npmjs.org/nock/-/nock-1.4.0.tgz"},"homepage":"https://github.com/pgte/nock","dependencies":{"mkdirp":"^0.5.0","debug":"^1.0.4","lodash":"2.4.1","chai":"^1.9.2","propagate":"0.3.x"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"license":"MIT","gitHead":"e255024667803b030b5d08199f0c4aeaa8b608fc","engines":["node >= 0.10.0"],"directories":{}},"0.44.1":{"scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"_id":"nock@0.44.1","_npmVersion":"1.4.21","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"}],"devDependencies":{"hyperquest":"^0.3.0","tap":"*","request":"*","superagent":"~0.15.7","restify":"^2.8.1","needle":"^0.7.1"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"version":"0.44.1","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"_from":".","name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"description":"HTTP Server mocking for Node.js","dist":{"shasum":"2ed74a0816008948151bfeebaba42119f69396d8","tarball":"https://registry.npmjs.org/nock/-/nock-0.44.1.tgz"},"dependencies":{"propagate":"0.2.x","debug":"^0.8.1","lodash":"2.4.1"},"homepage":"https://github.com/pgte/nock","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"license":"MIT","gitHead":"b1df64dc1197681f87eba8e20a202f178dac1303","engines":["node >= 0.10.0"],"main":"./index","_shasum":"2ed74a0816008948151bfeebaba42119f69396d8","directories":{}},"3.3.0":{"main":"./index","_shasum":"cf9069cf8957f89b6dae373a80a7ae65b0106a2c","description":"HTTP Server mocking for Node.js","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dist":{"shasum":"cf9069cf8957f89b6dae373a80a7ae65b0106a2c","tarball":"https://registry.npmjs.org/nock/-/nock-3.3.0.tgz"},"dependencies":{"mkdirp":"^0.5.0","debug":"^2.2.0","deep-equal":"^1.0.0","lodash":"2.4.1","chai":">=1.9.2 <4.0.0","propagate":"0.3.x"},"homepage":"https://github.com/pgte/nock#readme","license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"git+ssh://git@github.com/pgte/nock.git"},"gitHead":"fed784594805c3fc3a8b57c3aacedc9c69b438d9","engines":["node >= 0.10.0"],"maintainers":[{"email":"ivan@softwaremarbles.com","name":"ierceg"},{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"email":"me@svenlito.com","name":"svnlto"}],"version":"3.3.0","_nodeVersion":"0.12.7","pre-commit":["jshint","coverage"],"name":"nock","_from":".","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"test":"node --harmony tests/test.js","jshint":"jshint lib/*.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","changelog":"changelog nock all -m > CHANGELOG.md"},"_id":"nock@3.3.0","contributors":[{"url":"https://github.com/RomanGotsiy","name":"Roman Hotsiy"},{"url":"https://github.com/jagoda","name":"Jeffrey Jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"},{"url":"https://github.com/kelaban","name":"Keith Laban","email":"kelaban17@gmail.com"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"url":"https://github.com/DavidTPate","name":"David Pate","email":"davidtpate@gmail.com"},{"url":"https://github.com/matto1990","name":"Matt Oakes"}],"_npmVersion":"2.11.3","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"node-static":"^0.7.7","coveralls":"^2.11.2","tap":"^0.7.1","superagent":"^1.4.0","request-promise":"^0.4.3","browserify":"^12.0.1","zombie":"^4.2.1","needle":"^0.7.1","restler":"3.2.2","restify":"^2.8.1","request":"2.61.0","changelog":"^1.0.7","rimraf":"^2.3.2","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.3.8","pre-commit":"0.0.9","jshint":"^2.5.6"},"directories":{}},"0.24.1":{"_id":"nock@0.24.1","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"devDependencies":{"tap":"*","request":"*"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"_npmVersion":"1.3.14","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"}],"_from":".","name":"nock","version":"0.24.1","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"bugs":{"url":"http://github.com/pgte/nock/issues"},"dist":{"shasum":"37e178c3d3a3de37913788f92401b9e8a4834599","tarball":"https://registry.npmjs.org/nock/-/nock-0.24.1.tgz"},"dependencies":{"propagate":"0.2.x"},"homepage":"https://github.com/pgte/nock","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"license":"MIT","main":"./index","directories":{}},"0.10.2":{"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"}],"optionalDependencies":{},"_npmVersion":"1.1.1","devDependencies":{"tap":"0.2.x"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.10.2","bugs":{"url":"http://github.com/pgte/nock/issues"},"_defaultsLoaded":true,"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"_nodeVersion":"v0.6.11","version":"0.10.2","name":"nock","_engineSupported":true,"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dist":{"shasum":"ebbbfba5559f94ecff675ec8c8f95c39b617890e","tarball":"https://registry.npmjs.org/nock/-/nock-0.10.2.tgz"},"dependencies":{},"main":"./index","directories":{}},"0.48.1":{"name":"nock","_from":".","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"}],"version":"0.48.1","bugs":{"url":"http://github.com/pgte/nock/issues"},"_id":"nock@0.48.1","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"devDependencies":{"aws-sdk":"^2.0.15","hyperquest":"^0.3.0","superagent":"~0.15.7","tap":"*","request":"*","needle":"^0.7.1","restify":"^2.8.1"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"}],"_npmVersion":"1.4.28","main":"./index","_shasum":"f6173f1ffe7af2c97755a3a22cb839d30aca184e","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dist":{"shasum":"f6173f1ffe7af2c97755a3a22cb839d30aca184e","tarball":"https://registry.npmjs.org/nock/-/nock-0.48.1.tgz"},"homepage":"https://github.com/pgte/nock","dependencies":{"debug":"^1.0.4","lodash":"2.4.1","propagate":"0.3.x"},"description":"HTTP Server mocking for Node.js","gitHead":"154ff56437340cc5aa3e96d7ddeb7cec1f05e47d","engines":["node >= 0.10.0"],"license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"directories":{}},"7.6.0":{"bugs":{"url":"http://github.com/node-nock/nock/issues"},"_nodeVersion":"4.2.3","version":"7.6.0","pre-commit":["jshint","coverage"],"maintainers":[{"email":"ivan@softwaremarbles.com","name":"ierceg"},{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"email":"me@svenlito.com","name":"svnlto"}],"_from":".","name":"nock","_npmVersion":"2.14.7","contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"url":"https://github.com/jagoda","name":"Jeffrey Jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"},{"email":"kelaban17@gmail.com","name":"Keith Laban","url":"https://github.com/kelaban"},{"email":"ruipmarinho@gmail.com","name":"Rui Marinho","url":"https://github.com/ruimarinho"},{"email":"davidtpate@gmail.com","name":"David Pate","url":"https://github.com/DavidTPate"},{"url":"https://github.com/matto1990","name":"Matt Oakes"}],"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"node-static":"^0.7.7","coveralls":"^2.11.2","superagent":"^1.4.0","tap":"^0.7.1","browserify":"^12.0.1","zombie":"^4.2.1","request-promise":"^0.4.3","rimraf":"^2.3.2","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","restify":"^2.8.1","restler":"3.2.2","needle":"^0.7.1","request":"2.61.0","pre-commit":"0.0.9","jshint":"^2.5.6","isomorphic-fetch":"^2.2.0","istanbul":"^0.3.8"},"scripts":{"coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","test":"node --harmony tests/test.js","changelog":"changelog nock all -m > CHANGELOG.md","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"},"_id":"nock@7.6.0","_shasum":"d8b21f7a4803e1f2a8fd334e8d05f47b245ac409","_npmOperationalInternal":{"tmp":"tmp/nock-7.6.0.tgz_1458902273571_0.30329734249971807","host":"packages-12-west.internal.npmjs.com"},"main":"./index","tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"license":"MIT","gitHead":"5d8f1d9a3ca74c85c2cc2d23580a5993cb152f57","engines":["node >= 0.10.0"],"description":"HTTP Server mocking for Node.js","dependencies":{"qs":"^6.0.2","chai":">=1.9.2 <4.0.0","mkdirp":"^0.5.0","debug":"^2.2.0","deep-equal":"^1.0.0","lodash":"^3.10.1","json-stringify-safe":"^5.0.1","propagate":"0.3.x"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-7.6.0.tgz","shasum":"d8b21f7a4803e1f2a8fd334e8d05f47b245ac409"},"homepage":"https://github.com/node-nock/nock#readme","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"directories":{}},"0.10.5":{"main":"./index","engines":["node >= 0.4.10"],"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"_engineSupported":true,"dependencies":{},"dist":{"shasum":"3d14790f35e084d3b69759e14385817d4cb50577","tarball":"https://registry.npmjs.org/nock/-/nock-0.10.5.tgz"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","version":"0.10.5","_nodeVersion":"v0.6.11","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"_defaultsLoaded":true,"devDependencies":{"request":"* ","tap":"0.2.x"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"optionalDependencies":{},"_npmVersion":"1.1.1","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"}],"_id":"nock@0.10.5","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"directories":{}},"2.16.1":{"license":"MIT","repository":{"url":"git+ssh://git@github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"engines":["node >= 0.10.0"],"gitHead":"5937b9d3a5801479367226919bc6b5cc53b68ea2","description":"HTTP Server mocking for Node.js","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-2.16.1.tgz","shasum":"2cbdab65a4bc665a47cc44635fec8cc1fb2064f1"},"dependencies":{"debug":"^1.0.4","mkdirp":"^0.5.0","lodash":"2.4.1","deep-equal":"^1.0.0","chai":">=1.9.2 <4.0.0","propagate":"0.3.x"},"homepage":"https://github.com/pgte/nock#readme","_shasum":"2cbdab65a4bc665a47cc44635fec8cc1fb2064f1","main":"./index","contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"},{"url":"https://github.com/kelaban","name":"Keith Laban","email":"kelaban17@gmail.com"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"url":"https://github.com/DavidTPate","email":"davidtpate@gmail.com","name":"David Pate"},{"url":"https://github.com/matto1990","name":"Matt Oakes"}],"_npmVersion":"2.11.3","author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"request-promise":"^0.4.3","istanbul":"^0.3.8","jshint":"^2.5.6","pre-commit":"0.0.9","restler":"3.2.2","needle":"^0.7.1","restify":"^2.8.1","coveralls":"^2.11.2","request":"2.61.0","tap":"^0.7.1","superagent":"~0.15.7","rimraf":"^2.3.2","hyperquest":"^0.3.0","aws-sdk":"^2.0.15"},"scripts":{"coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","coverage":"istanbul cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","test":"node tests/test.js"},"_id":"nock@2.16.1","bugs":{"url":"http://github.com/pgte/nock/issues"},"maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"version":"2.16.1","_nodeVersion":"0.12.7","pre-commit":["jshint","coverage"],"_from":".","name":"nock","directories":{}},"5.1.0":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"_from":".","name":"nock","maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"name":"svnlto","email":"me@svenlito.com"}],"_nodeVersion":"4.2.3","version":"5.1.0","pre-commit":["jshint","coverage"],"devDependencies":{"request-promise":"^0.4.3","zombie":"^4.2.1","browserify":"^12.0.1","superagent":"^1.4.0","tap":"^0.7.1","node-static":"^0.7.7","coveralls":"^2.11.2","istanbul":"^0.3.8","isomorphic-fetch":"^2.2.0","jshint":"^2.5.6","pre-commit":"0.0.9","request":"2.61.0","needle":"^0.7.1","restler":"3.2.2","restify":"^2.8.1","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","rimraf":"^2.3.2"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"url":"https://github.com/RomanGotsiy","name":"Roman Hotsiy"},{"url":"https://github.com/jagoda","name":"Jeffrey Jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"},{"email":"kelaban17@gmail.com","name":"Keith Laban","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"email":"davidtpate@gmail.com","name":"David Pate","url":"https://github.com/DavidTPate"},{"url":"https://github.com/matto1990","name":"Matt Oakes"}],"_npmVersion":"2.14.7","_id":"nock@5.1.0","scripts":{"jshint":"jshint lib/*.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","test":"node --harmony tests/test.js","changelog":"changelog nock all -m > CHANGELOG.md","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"},"_shasum":"34e2feb744baffffe705d05dba85ba2534b5109c","main":"./index","gitHead":"e6b963538c697065943698cc7b8413364d3bdda9","engines":["node >= 0.10.0"],"license":"MIT","repository":{"type":"git","url":"git+ssh://git@github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dependencies":{"deep-equal":"^1.0.0","lodash":"^3.10.1","mkdirp":"^0.5.0","debug":"^2.2.0","json-stringify-safe":"^5.0.1","propagate":"0.3.x","chai":">=1.9.2 <4.0.0"},"dist":{"shasum":"34e2feb744baffffe705d05dba85ba2534b5109c","tarball":"https://registry.npmjs.org/nock/-/nock-5.1.0.tgz"},"homepage":"https://github.com/pgte/nock#readme","description":"HTTP Server mocking for Node.js","directories":{}},"7.7.0":{"_from":".","name":"nock","maintainers":[{"email":"ivan@softwaremarbles.com","name":"ierceg"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"name":"svnlto","email":"me@svenlito.com"}],"_nodeVersion":"4.2.3","version":"7.7.0","pre-commit":["jshint","coverage"],"bugs":{"url":"http://github.com/node-nock/nock/issues"},"_id":"nock@7.7.0","scripts":{"jshint":"jshint lib/*.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","test":"node --harmony tests/test.js","changelog":"changelog nock all -m > CHANGELOG.md","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"istanbul":"^0.3.8","isomorphic-fetch":"^2.2.0","pre-commit":"0.0.9","jshint":"^2.5.6","request":"2.61.0","restler":"3.2.2","needle":"^0.7.1","restify":"^2.8.1","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","rimraf":"^2.3.2","request-promise":"^0.4.3","browserify":"^12.0.1","zombie":"^4.2.1","tap":"^0.7.1","superagent":"^1.4.0","coveralls":"^2.11.2","node-static":"^0.7.7"},"contributors":[{"url":"https://github.com/BinChang","name":"Bin Chang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"url":"https://github.com/ruimarinho","name":"Rui Marinho","email":"ruipmarinho@gmail.com"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"url":"https://github.com/matto1990","name":"Matt Oakes"}],"_npmVersion":"2.14.7","main":"./index","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/nock-7.7.0.tgz_1458927663140_0.28217990952543914"},"_shasum":"fbdde8c2db8e370cd944148bf3e07d7f1bd90bcc","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dist":{"shasum":"fbdde8c2db8e370cd944148bf3e07d7f1bd90bcc","tarball":"https://registry.npmjs.org/nock/-/nock-7.7.0.tgz"},"dependencies":{"json-stringify-safe":"^5.0.1","propagate":"0.3.x","mkdirp":"^0.5.0","debug":"^2.2.0","lodash":"^3.10.1","deep-equal":"^1.0.0","qs":"^6.0.2","chai":">=1.9.2 <4.0.0"},"homepage":"https://github.com/node-nock/nock#readme","description":"HTTP Server mocking for Node.js","gitHead":"bc95ed6ab63d2ee5c139d77e4e4a1ac8052b4308","engines":["node >= 0.10.0"],"license":"MIT","repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"directories":{}},"0.7.0":{"description":"HTTP Server mocking for Node.js","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dist":{"shasum":"49d6394dc8cb5b47f28527c9a9cfc84211cbe4b1","tarball":"https://registry.npmjs.org/nock/-/nock-0.7.0.tgz"},"dependencies":{},"_engineSupported":true,"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"engines":["node >= 0.4.10"],"main":"./index","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.7.0","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"}],"_npmVersion":"1.1.0-alpha-6","devDependencies":{"tap":"0.0.x"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"_defaultsLoaded":true,"_nodeVersion":"v0.6.5","version":"0.7.0","name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"directories":{}},"0.50.0":{"gitHead":"15a62d80f606a497ccc4570e0dac8964f73ced53","engines":["node >= 0.10.0"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"license":"MIT","dist":{"shasum":"af78f874836281ebd8b4bb54e4e0b0e8bee2ac8e","tarball":"https://registry.npmjs.org/nock/-/nock-0.50.0.tgz"},"homepage":"https://github.com/pgte/nock","dependencies":{"propagate":"0.3.x","debug":"^1.0.4","lodash":"2.4.1"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","_shasum":"af78f874836281ebd8b4bb54e4e0b0e8bee2ac8e","main":"./index","author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"aws-sdk":"^2.0.15","hyperquest":"^0.3.0","needle":"^0.7.1","restify":"^2.8.1","request":"*","tap":"*","superagent":"~0.15.7","pre-commit":"0.0.9","jshint":"^2.5.6"},"_npmVersion":"1.4.28","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"}],"_id":"nock@0.50.0","scripts":{"jshint":"jshint lib/*.js","test":"node node_modules/tap/bin/tap.js --dd tests"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"_from":".","name":"nock","pre-commit":["jshint","test"],"version":"0.50.0","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"}],"directories":{}},"0.10.8":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"_defaultsLoaded":true,"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"version":"0.10.8","_nodeVersion":"v0.6.11","name":"nock","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"}],"_npmVersion":"1.1.1","optionalDependencies":{},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"request":"* ","tap":"0.2.x"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.10.8","main":"./index","_engineSupported":true,"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dependencies":{},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.10.8.tgz","shasum":"84473da0ef5f89ad72838c2386cfafb136e21282"},"directories":{}},"0.6.0":{"engines":["node >= 0.4.10"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"_engineSupported":true,"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.6.0.tgz","shasum":"23368d27ee67a9fc560521067ac3bcb27626567f"},"dependencies":{},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","main":"./index","author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"tap":"0.0.x"},"_npmVersion":"1.1.0-alpha-6","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"}],"_id":"nock@0.6.0","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","_nodeVersion":"v0.6.5","version":"0.6.0","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"_defaultsLoaded":true,"directories":{}},"0.18.1":{"bugs":{"url":"http://github.com/flatiron/nock/issues"},"_from":".","name":"nock","version":"0.18.1","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"tap":"*","request":"*"},"_npmVersion":"1.2.17","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"}],"_id":"nock@0.18.1","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"main":"./index","engines":["node >= 0.4.10"],"repository":{"url":"http://github.com/flatiron/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.18.1.tgz","shasum":"2bccd2e8fdaf13c103b41185d16667c9b78e60a2"},"dependencies":{"propagate":"0.2.x"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","directories":{}},"0.3.0":{"_id":"nock@0.3.0","scripts":{"test":"node_modules/.bin/tap tests"},"devDependencies":{"tap":"0.0.x"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"_npmVersion":"1.0.27","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"}],"name":"nock","_nodeVersion":"v0.4.11","version":"0.3.0","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"_npmJsonOpts":{"contributors":false,"serverjs":false,"wscript":false,"file":"/Users/pedroteixeira/.npm/nock/0.3.0/package/package.json"},"_defaultsLoaded":true,"bugs":{"url":"http://github.com/pgte/nock/issues"},"dependencies":{},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.3.0.tgz","shasum":"4825b1c36214e51d2b1e9d25b5ca0eff2b1155d7"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"_engineSupported":true,"main":"./index","directories":{}},"0.48.0":{"name":"nock","_from":".","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"}],"version":"0.48.0","bugs":{"url":"http://github.com/pgte/nock/issues"},"_id":"nock@0.48.0","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"hyperquest":"^0.3.0","aws-sdk":"^2.0.15","tap":"*","superagent":"~0.15.7","request":"*","needle":"^0.7.1","restify":"^2.8.1"},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"}],"_npmVersion":"1.4.21","main":"./index","_shasum":"19d7aaf0ffe9cd0638b82b0f646eccea713ccd57","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.48.0.tgz","shasum":"19d7aaf0ffe9cd0638b82b0f646eccea713ccd57"},"dependencies":{"propagate":"0.3.x","lodash":"2.4.1","debug":"^1.0.4"},"homepage":"https://github.com/pgte/nock","description":"HTTP Server mocking for Node.js","engines":["node >= 0.10.0"],"gitHead":"165d6effd9b8187c903aabefc0ca9967beec7207","license":"MIT","repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"directories":{}},"0.25.0":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"_from":".","name":"nock","version":"0.25.0","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"tap":"*","superagent":"~0.15.7","request":"*"},"_npmVersion":"1.3.14","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"}],"_id":"nock@0.25.0","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"main":"./index","engines":["node >= 0.4.10"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.25.0.tgz","shasum":"5cb1643709ab51febbd9deef54eb734a87e850ab"},"homepage":"https://github.com/pgte/nock","dependencies":{"propagate":"0.2.x"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","directories":{}},"2.18.2":{"repository":{"type":"git","url":"git+ssh://git@github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","gitHead":"c142ac153d977ba58d659c63b186683308cc19c2","engines":["node >= 0.10.0"],"description":"HTTP Server mocking for Node.js","homepage":"https://github.com/pgte/nock#readme","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-2.18.2.tgz","shasum":"a138aecbfe5d2a837be4397918abd239483ce40c"},"dependencies":{"lodash":"2.4.1","deep-equal":"^1.0.0","debug":"^1.0.4","mkdirp":"^0.5.0","chai":">=1.9.2 <4.0.0","propagate":"0.3.x"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"_shasum":"a138aecbfe5d2a837be4397918abd239483ce40c","main":"./index","_npmVersion":"2.11.3","contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"email":"ruipmarinho@gmail.com","name":"Rui Marinho","url":"https://github.com/ruimarinho"},{"email":"davidtpate@gmail.com","name":"David Pate","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"request":"2.61.0","needle":"^0.7.1","restify":"^2.8.1","restler":"3.2.2","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","rimraf":"^2.3.2","istanbul":"^0.3.8","isomorphic-fetch":"^2.2.0","pre-commit":"0.0.9","jshint":"^2.5.6","superagent":"~0.15.7","tap":"^0.7.1","node-static":"^0.7.7","coveralls":"^2.11.2","request-promise":"^0.4.3","browserify":"^12.0.1","zombie":"^4.2.1"},"scripts":{"jshint":"jshint lib/*.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","test":"node --harmony tests/test.js","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"},"_id":"nock@2.18.2","bugs":{"url":"http://github.com/pgte/nock/issues"},"version":"2.18.2","_nodeVersion":"0.12.7","pre-commit":["jshint","coverage"],"maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"email":"me@svenlito.com","name":"svnlto"}],"name":"nock","_from":".","directories":{}},"7.4.0":{"version":"7.4.0","_nodeVersion":"4.2.3","pre-commit":["jshint","coverage"],"maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"}],"name":"nock","_from":".","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","test":"node --harmony tests/test.js","changelog":"changelog nock all -m > CHANGELOG.md","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"},"_id":"nock@7.4.0","_npmVersion":"2.14.7","contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"url":"https://github.com/RomanGotsiy","name":"Roman Hotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"},{"url":"https://github.com/kelaban","email":"kelaban17@gmail.com","name":"Keith Laban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"url":"https://github.com/DavidTPate","name":"David Pate","email":"davidtpate@gmail.com"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"istanbul":"^0.3.8","isomorphic-fetch":"^2.2.0","jshint":"^2.5.6","pre-commit":"0.0.9","request":"2.61.0","restify":"^2.8.1","needle":"^0.7.1","restler":"3.2.2","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","rimraf":"^2.3.2","request-promise":"^0.4.3","zombie":"^4.2.1","browserify":"^12.0.1","tap":"^0.7.1","superagent":"^1.4.0","node-static":"^0.7.7","coveralls":"^2.11.2"},"main":"./index","_shasum":"e21e17ab2746847921b0c007162675e212d55c6d","_npmOperationalInternal":{"tmp":"tmp/nock-7.4.0.tgz_1457123139136_0.2993289262522012","host":"packages-13-west.internal.npmjs.com"},"description":"HTTP Server mocking for Node.js","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-7.4.0.tgz","shasum":"e21e17ab2746847921b0c007162675e212d55c6d"},"homepage":"https://github.com/pgte/nock#readme","dependencies":{"deep-equal":"^1.0.0","lodash":"^3.10.1","debug":"^2.2.0","mkdirp":"^0.5.0","chai":">=1.9.2 <4.0.0","qs":"^6.0.2","propagate":"0.3.x","json-stringify-safe":"^5.0.1"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+ssh://git@github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","gitHead":"dc19e6c13653406d5710236dbc5f764a9f19798b","engines":["node >= 0.10.0"],"directories":{}},"0.18.0":{"engines":["node >= 0.4.10"],"repository":{"type":"git","url":"http://github.com/flatiron/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dist":{"shasum":"5be10ae1d3d33dd7b2184351e06d7a4c7cd7c3a1","tarball":"https://registry.npmjs.org/nock/-/nock-0.18.0.tgz"},"dependencies":{"propagate":"0.2.x"},"description":"HTTP Server mocking for Node.js","main":"./index","devDependencies":{"tap":"*","request":"*"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"}],"_npmVersion":"1.2.17","_id":"nock@0.18.0","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"bugs":{"url":"http://github.com/flatiron/nock/issues"},"_from":".","name":"nock","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"version":"0.18.0","directories":{}},"0.2.2":{"dependencies":{},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.2.2.tgz","shasum":"f5505c7b55111015eb52a46aa4b53bd65efc9652"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"_engineSupported":true,"main":"./index","_id":"nock@0.2.2","scripts":{"test":"node_modules/.bin/tap tests"},"devDependencies":{"tap":"0.0.x"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"_npmVersion":"1.0.27","contributors":[{"name":"Roly Fentanes"}],"name":"nock","version":"0.2.2","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"_npmJsonOpts":{"contributors":false,"file":"/Users/pedroteixeira/.npm/nock/0.2.2/package/package.json","wscript":false,"serverjs":false},"bugs":{"url":"http://github.com/pgte/nock/issues"},"directories":{}},"3.5.0":{"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-3.5.0.tgz","shasum":"2313ca537c94ecc3707fef4d53b039b228bff427"},"dependencies":{"chai":">=1.9.2 <4.0.0","json-stringify-safe":"^5.0.1","propagate":"0.3.x","mkdirp":"^0.5.0","debug":"^2.2.0","lodash":"2.4.1","deep-equal":"^1.0.0"},"homepage":"https://github.com/pgte/nock#readme","description":"HTTP Server mocking for Node.js","gitHead":"afe80426e8d7f6968d69321c0a46434772c70941","engines":["node >= 0.10.0"],"license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git+ssh://git@github.com/pgte/nock.git","type":"git"},"main":"./index","_shasum":"2313ca537c94ecc3707fef4d53b039b228bff427","_id":"nock@3.5.0","scripts":{"changelog":"changelog nock all -m > CHANGELOG.md","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","test":"node --harmony tests/test.js"},"devDependencies":{"browserify":"^12.0.1","zombie":"^4.2.1","request-promise":"^0.4.3","tap":"^0.7.1","superagent":"^1.4.0","node-static":"^0.7.7","coveralls":"^2.11.2","pre-commit":"0.0.9","jshint":"^2.5.6","istanbul":"^0.3.8","isomorphic-fetch":"^2.2.0","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","rimraf":"^2.3.2","request":"2.61.0","needle":"^0.7.1","restler":"3.2.2","restify":"^2.8.1"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"url":"https://github.com/RomanGotsiy","name":"Roman Hotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"},{"email":"kelaban17@gmail.com","name":"Keith Laban","url":"https://github.com/kelaban"},{"email":"ruipmarinho@gmail.com","name":"Rui Marinho","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"url":"https://github.com/matto1990","name":"Matt Oakes"}],"_npmVersion":"2.14.7","name":"nock","_from":".","maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"email":"me@svenlito.com","name":"svnlto"}],"_nodeVersion":"4.2.3","version":"3.5.0","pre-commit":["jshint","coverage"],"bugs":{"url":"http://github.com/pgte/nock/issues"},"directories":{}},"2.10.0":{"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"git+ssh://git@github.com/pgte/nock.git"},"license":"MIT","gitHead":"a407b73ac8f0daa947dccf4a29b86b8f99138157","engines":["node >= 0.10.0"],"description":"HTTP Server mocking for Node.js","homepage":"https://github.com/pgte/nock#readme","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-2.10.0.tgz","shasum":"dc13e94575956af48c98bd58b60aeb0169e89baa"},"dependencies":{"propagate":"0.3.x","chai":">=1.9.2 <3.0.0","debug":"^1.0.4","mkdirp":"^0.5.0","deep-equal":"^1.0.0","lodash":"2.4.1"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"_shasum":"dc13e94575956af48c98bd58b60aeb0169e89baa","main":"./index","_npmVersion":"2.9.1","contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"},{"url":"https://github.com/kelaban","name":"Keith Laban","email":"kelaban17@gmail.com"}],"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"istanbul":"^0.3.8","jshint":"^2.5.6","pre-commit":"0.0.9","needle":"^0.7.1","restler":"3.2.2","restify":"^2.8.1","coveralls":"^2.11.2","tap":"^0.7.1","superagent":"~0.15.7","request":"2.51.0","rimraf":"^2.3.2","hyperquest":"^0.3.0","aws-sdk":"^2.0.15"},"scripts":{"coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","test":"node tests/test.js","jshint":"jshint lib/*.js","coverage":"istanbul cover tests/test.js && istanbul check-coverage"},"_id":"nock@2.10.0","bugs":{"url":"http://github.com/pgte/nock/issues"},"_nodeVersion":"0.12.3","version":"2.10.0","pre-commit":["jshint","coverage"],"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"name":"nock","_from":".","directories":{}},"0.57.0":{"_shasum":"c669c661a6a2f2c9e4bd037862754c558bc2a0d4","main":"./index","gitHead":"d0e5871e6ad69e3711e81a8ee3f542919f3f1d5b","engines":["node >= 0.10.0"],"license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dist":{"shasum":"c669c661a6a2f2c9e4bd037862754c558bc2a0d4","tarball":"https://registry.npmjs.org/nock/-/nock-0.57.0.tgz"},"dependencies":{"debug":"^1.0.4","mkdirp":"^0.5.0","lodash":"2.4.1","propagate":"0.3.x","chai":"^1.9.2"},"homepage":"https://github.com/pgte/nock","description":"HTTP Server mocking for Node.js","bugs":{"url":"http://github.com/pgte/nock/issues"},"_from":".","name":"nock","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"pre-commit":["jshint","test"],"version":"0.57.0","devDependencies":{"tap":"*","superagent":"~0.15.7","request":"*","needle":"^0.7.1","restify":"^2.8.1","restler":"3.2.2","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","pre-commit":"0.0.9","jshint":"^2.5.6"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"}],"_npmVersion":"1.4.28","_id":"nock@0.57.0","scripts":{"jshint":"jshint lib/*.js","test":"node node_modules/tap/bin/tap.js --dd tests"},"directories":{}},"1.7.0":{"scripts":{"coveralls":"istanbul cover tests/test.js && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","test":"node tests/test.js","jshint":"jshint lib/*.js","coverage":"istanbul cover tests/test.js && istanbul check-coverage"},"_id":"nock@1.7.0","_npmVersion":"2.7.4","contributors":[{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"}],"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"istanbul":"^0.3.8","jshint":"^2.5.6","pre-commit":"0.0.9","needle":"^0.7.1","restler":"3.2.2","restify":"^2.8.1","coveralls":"^2.11.2","request":"2.51.0","tap":"*","superagent":"~0.15.7","rimraf":"^2.3.2","hyperquest":"^0.3.0","aws-sdk":"^2.0.15"},"version":"1.7.0","_nodeVersion":"0.12.2","pre-commit":["jshint","coverage"],"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"_from":".","name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"description":"HTTP Server mocking for Node.js","dist":{"shasum":"0c50319c7a6c3daa35494d43024ed46c9c32d0f1","tarball":"https://registry.npmjs.org/nock/-/nock-1.7.0.tgz"},"dependencies":{"propagate":"0.3.x","chai":"^1.9.2","debug":"^1.0.4","mkdirp":"^0.5.0","lodash":"2.4.1"},"homepage":"https://github.com/pgte/nock","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"license":"MIT","engines":["node >= 0.10.0"],"gitHead":"606d79b34db50da0a3b5035e9470a7fb76e86a66","main":"./index","_shasum":"0c50319c7a6c3daa35494d43024ed46c9c32d0f1","directories":{}},"0.4.0":{"dependencies":{},"dist":{"shasum":"a9927cceb97be1d64080fca8b087b9ad72edc3d6","tarball":"https://registry.npmjs.org/nock/-/nock-0.4.0.tgz"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"_engineSupported":true,"main":"./index","_id":"nock@0.4.0","scripts":{"test":"node_modules/.bin/tap tests"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"tap":"0.0.x"},"_npmVersion":"1.0.105","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"}],"name":"nock","_nodeVersion":"v0.4.12","version":"0.4.0","_defaultsLoaded":true,"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"bugs":{"url":"http://github.com/pgte/nock/issues"},"directories":{}},"0.52.0":{"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"}],"pre-commit":["jshint","test"],"version":"0.52.0","_from":".","name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests","jshint":"jshint lib/*.js"},"_id":"nock@0.52.0","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"}],"_npmVersion":"1.4.28","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"superagent":"~0.15.7","tap":"*","request":"*","restify":"^2.8.1","needle":"^0.7.1","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","jshint":"^2.5.6","pre-commit":"0.0.9"},"main":"./index","_shasum":"f11a593b31c11539bcadceb2f74b79919dacc377","description":"HTTP Server mocking for Node.js","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"homepage":"https://github.com/pgte/nock","dist":{"shasum":"f11a593b31c11539bcadceb2f74b79919dacc377","tarball":"https://registry.npmjs.org/nock/-/nock-0.52.0.tgz"},"dependencies":{"debug":"^1.0.4","lodash":"2.4.1","propagate":"0.3.x"},"license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"gitHead":"b1348d629ffac7c15fd78c0e6e5715f0a04bd343","engines":["node >= 0.10.0"],"directories":{}},"0.42.1":{"scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"_id":"nock@0.42.1","_npmVersion":"1.4.9","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"}],"devDependencies":{"needle":"^0.7.1","restify":"^2.8.1","tap":"*","superagent":"~0.15.7","request":"*"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"version":"0.42.1","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"name":"svnlto","email":"me@svenlito.com"}],"name":"nock","_from":".","bugs":{"url":"http://github.com/pgte/nock/issues"},"description":"HTTP Server mocking for Node.js","homepage":"https://github.com/pgte/nock","dist":{"shasum":"5d4c8b7fc778d783c411dd2c9c9a24c8657923cd","tarball":"https://registry.npmjs.org/nock/-/nock-0.42.1.tgz"},"dependencies":{"propagate":"0.2.x","debug":"^0.8.1","lodash":"2.4.1"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","engines":["node >= 0.10.0"],"main":"./index","_shasum":"5d4c8b7fc778d783c411dd2c9c9a24c8657923cd","directories":{}},"0.5.1":{"_nodeVersion":"v0.4.12","version":"0.5.1","_defaultsLoaded":true,"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"test":"node_modules/.bin/tap tests"},"_id":"nock@0.5.1","_npmVersion":"1.0.105","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"}],"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"tap":"0.0.x"},"main":"./index","description":"HTTP Server mocking for Node.js","dist":{"shasum":"8b514d79f1ab8bb37780a5e4d83f3de859de2b59","tarball":"https://registry.npmjs.org/nock/-/nock-0.5.1.tgz"},"dependencies":{},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"_engineSupported":true,"engines":["node >= 0.4.10"],"directories":{}},"0.58.0":{"_id":"nock@0.58.0","scripts":{"jshint":"jshint lib/*.js","test":"node node_modules/tap/bin/tap.js --dd tests"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"pre-commit":"0.0.9","jshint":"^2.5.6","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","needle":"^0.7.1","restify":"^2.8.1","restler":"3.2.2","tap":"*","superagent":"~0.15.7","request":"2.51.0"},"_npmVersion":"1.4.28","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"},{"url":"https://github.com/kelaban","email":"kelaban17@gmail.com","name":"Keith Laban"}],"_from":".","name":"nock","version":"0.58.0","pre-commit":["jshint","test"],"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"name":"svnlto","email":"me@svenlito.com"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"bugs":{"url":"http://github.com/pgte/nock/issues"},"homepage":"https://github.com/pgte/nock","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.58.0.tgz","shasum":"105d15efdf9196d5f73ad790f7a9e364a60bf1b1"},"dependencies":{"lodash":"2.4.1","mkdirp":"^0.5.0","debug":"^1.0.4","propagate":"0.3.x","chai":"^1.9.2"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","gitHead":"f192a57bd02fbf26fd3493cfdf5dad28f8b93cc0","engines":["node >= 0.10.0"],"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","main":"./index","_shasum":"105d15efdf9196d5f73ad790f7a9e364a60bf1b1","directories":{}},"0.55.0":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","_from":".","pre-commit":["jshint","test"],"version":"0.55.0","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"}],"devDependencies":{"jshint":"^2.5.6","pre-commit":"0.0.9","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","needle":"^0.7.1","restify":"^2.8.1","request":"*","tap":"*","superagent":"~0.15.7"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"_npmVersion":"1.4.28","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"url":"https://github.com/kelaban","email":"kelaban17@gmail.com","name":"Keith Laban"}],"_id":"nock@0.55.0","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests","jshint":"jshint lib/*.js"},"_shasum":"851150a0714e9a91fdf441ffc47afe683fb2afb0","main":"./index","gitHead":"64400817f94475e34979482cb7799baef77f3272","engines":["node >= 0.10.0"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","dependencies":{"propagate":"0.3.x","chai":"^1.9.2","mkdirp":"^0.5.0","debug":"^1.0.4","lodash":"2.4.1"},"dist":{"shasum":"851150a0714e9a91fdf441ffc47afe683fb2afb0","tarball":"https://registry.npmjs.org/nock/-/nock-0.55.0.tgz"},"homepage":"https://github.com/pgte/nock","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","directories":{}},"2.8.0":{"_shasum":"e421b9df477a1186a71edd75251b44f14c6ce5f8","main":"./index","license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git+ssh://git@github.com/pgte/nock.git","type":"git"},"gitHead":"10554301ed2a96be703334a48177b70096920387","engines":["node >= 0.10.0"],"description":"HTTP Server mocking for Node.js","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"homepage":"https://github.com/pgte/nock#readme","dist":{"shasum":"e421b9df477a1186a71edd75251b44f14c6ce5f8","tarball":"https://registry.npmjs.org/nock/-/nock-2.8.0.tgz"},"dependencies":{"mkdirp":"^0.5.0","debug":"^1.0.4","deep-equal":"^1.0.0","lodash":"2.4.1","propagate":"0.3.x","chai":">=1.9.2 <3.0.0"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"ierceg","email":"ivan@softwaremarbles.com"}],"pre-commit":["jshint","coverage"],"_nodeVersion":"0.12.3","version":"2.8.0","name":"nock","_from":".","contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"},{"email":"kelaban17@gmail.com","name":"Keith Laban","url":"https://github.com/kelaban"}],"_npmVersion":"2.9.1","devDependencies":{"istanbul":"^0.3.8","pre-commit":"0.0.9","jshint":"^2.5.6","restler":"3.2.2","restify":"^2.8.1","coveralls":"^2.11.2","needle":"^0.7.1","request":"2.51.0","tap":"^0.7.1","superagent":"~0.15.7","rimraf":"^2.3.2","aws-sdk":"^2.0.15","hyperquest":"^0.3.0"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"scripts":{"coveralls":"istanbul cover tests/test.js && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","jshint":"jshint lib/*.js","coverage":"istanbul cover tests/test.js && istanbul check-coverage","test":"node tests/test.js"},"_id":"nock@2.8.0","directories":{}},"1.5.0":{"engines":["node >= 0.10.0"],"gitHead":"f321e1a2033dc156a06cd4da1a13becad66bf28a","license":"MIT","repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dist":{"shasum":"eb0a019ddc2e4c9f2349e18c98af954168bbe674","tarball":"https://registry.npmjs.org/nock/-/nock-1.5.0.tgz"},"homepage":"https://github.com/pgte/nock","dependencies":{"chai":"^1.9.2","propagate":"0.3.x","lodash":"2.4.1","mkdirp":"^0.5.0","debug":"^1.0.4"},"description":"HTTP Server mocking for Node.js","_shasum":"eb0a019ddc2e4c9f2349e18c98af954168bbe674","main":"./index","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"pre-commit":"0.0.9","jshint":"^2.5.6","istanbul":"^0.3.8","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","restify":"^2.8.1","restler":"3.2.2","needle":"^0.7.1","coveralls":"^2.11.2","request":"2.51.0","tap":"*","superagent":"~0.15.7"},"contributors":[{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"}],"_npmVersion":"2.7.4","_id":"nock@1.5.0","scripts":{"jshint":"jshint lib/*.js","coverage":"istanbul cover tests/test.js && istanbul check-coverage","test":"node tests/test.js","coveralls":"istanbul cover tests/test.js && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","_from":".","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"_nodeVersion":"1.6.3","version":"1.5.0","pre-commit":["jshint","coverage"],"directories":{}},"3.3.2":{"scripts":{"test":"node --harmony tests/test.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","changelog":"changelog nock all -m > CHANGELOG.md"},"_id":"nock@3.3.2","_npmVersion":"3.3.10","contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"},{"url":"https://github.com/kelaban","name":"Keith Laban","email":"kelaban17@gmail.com"},{"url":"https://github.com/ruimarinho","name":"Rui Marinho","email":"ruipmarinho@gmail.com"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"devDependencies":{"changelog":"^1.0.7","request":"2.61.0","restify":"^2.8.1","needle":"^0.7.1","restler":"3.2.2","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","rimraf":"^2.3.2","istanbul":"^0.3.8","isomorphic-fetch":"^2.2.0","pre-commit":"0.0.9","jshint":"^2.5.6","superagent":"^1.4.0","tap":"^0.7.1","node-static":"^0.7.7","coveralls":"^2.11.2","request-promise":"^0.4.3","browserify":"^12.0.1","zombie":"^4.2.1"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"_nodeVersion":"4.2.2","version":"3.3.2","pre-commit":["jshint","coverage"],"maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"name":"svnlto","email":"me@svenlito.com"}],"name":"nock","_from":".","bugs":{"url":"http://github.com/pgte/nock/issues"},"description":"HTTP Server mocking for Node.js","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-3.3.2.tgz","shasum":"5a690a0498e3b5eae232ef35719e167b8710ea21"},"homepage":"https://github.com/pgte/nock#readme","dependencies":{"json-stringify-safe":"^5.0.1","propagate":"0.3.x","chai":">=1.9.2 <4.0.0","debug":"^2.2.0","mkdirp":"^0.5.0","deep-equal":"^1.0.0","lodash":"2.4.1"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git+ssh://git@github.com/pgte/nock.git","type":"git"},"license":"MIT","gitHead":"83daa071894f960ca1fee457e8856159e3a04436","engines":["node >= 0.10.0"],"main":"./index","_shasum":"5a690a0498e3b5eae232ef35719e167b8710ea21","directories":{}},"0.8.0":{"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"_engineSupported":true,"engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.8.0.tgz","shasum":"abdd6e9f1f3dbb5c0527b9b379d977c808d8354a"},"dependencies":{},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"main":"./index","_npmVersion":"1.0.106","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"}],"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"tap":"0.0.x"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.8.0","bugs":{"url":"http://github.com/pgte/nock/issues"},"version":"0.8.0","_nodeVersion":"v0.4.11","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"_defaultsLoaded":true,"name":"nock","directories":{}},"0.32.2":{"version":"0.32.2","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"_from":".","name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"_id":"nock@0.32.2","_npmVersion":"1.3.14","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"}],"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"restify":"^2.8.1","needle":"^0.7.1","request":"*","superagent":"~0.15.7","tap":"*"},"main":"./index","description":"HTTP Server mocking for Node.js","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.32.2.tgz","shasum":"c57f475800b2a97a271689824904a3f1626877a8"},"homepage":"https://github.com/pgte/nock","dependencies":{"propagate":"0.2.x","lodash":"2.4.1","debug":"^0.8.1"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","engines":["node >= 0.10.0"],"directories":{}},"2.3.1":{"scripts":{"coveralls":"istanbul cover tests/test.js && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","jshint":"jshint lib/*.js","coverage":"istanbul cover tests/test.js && istanbul check-coverage","test":"node tests/test.js"},"_id":"nock@2.3.1","_npmVersion":"2.7.4","contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"url":"https://github.com/jagoda","name":"Jeffrey Jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"},{"email":"kelaban17@gmail.com","name":"Keith Laban","url":"https://github.com/kelaban"}],"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"superagent":"~0.15.7","tap":"^0.7.1","request":"2.51.0","restler":"3.2.2","needle":"^0.7.1","restify":"^2.8.1","coveralls":"^2.11.2","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","rimraf":"^2.3.2","istanbul":"^0.3.8","jshint":"^2.5.6","pre-commit":"0.0.9"},"version":"2.3.1","_nodeVersion":"1.6.3","pre-commit":["jshint","coverage"],"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"},{"name":"ierceg","email":"ivan@softwaremarbles.com"}],"_from":".","name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"description":"HTTP Server mocking for Node.js","homepage":"https://github.com/pgte/nock","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-2.3.1.tgz","shasum":"834823b1afd908465fd32bc9d6659ce4e76677db"},"dependencies":{"propagate":"0.3.x","chai":">=1.9.2 <3.0.0","mkdirp":"^0.5.0","debug":"^1.0.4","lodash":"2.4.1"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","engines":["node >= 0.10.0"],"gitHead":"7e83ba0a7a4f3e3d03e8c4579d96ca2d1dc9a6dd","main":"./index","_shasum":"834823b1afd908465fd32bc9d6659ce4e76677db","directories":{}},"2.4.1":{"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"ierceg","email":"ivan@softwaremarbles.com"}],"_nodeVersion":"1.6.3","version":"2.4.1","pre-commit":["jshint","coverage"],"_from":".","name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"coveralls":"istanbul cover tests/test.js && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","test":"node tests/test.js","jshint":"jshint lib/*.js","coverage":"istanbul cover tests/test.js && istanbul check-coverage"},"_id":"nock@2.4.1","contributors":[{"url":"https://github.com/RomanGotsiy","name":"Roman Hotsiy"},{"url":"https://github.com/jagoda","name":"Jeffrey Jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"},{"url":"https://github.com/kelaban","email":"kelaban17@gmail.com","name":"Keith Laban"}],"_npmVersion":"2.7.4","devDependencies":{"aws-sdk":"^2.0.15","hyperquest":"^0.3.0","rimraf":"^2.3.2","superagent":"~0.15.7","tap":"^0.7.1","request":"2.51.0","needle":"^0.7.1","restler":"3.2.2","restify":"^2.8.1","coveralls":"^2.11.2","pre-commit":"0.0.9","jshint":"^2.5.6","istanbul":"^0.3.8"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"main":"./index","_shasum":"94dbc3682b00f4e731ee44317520a2787ba3e667","description":"HTTP Server mocking for Node.js","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-2.4.1.tgz","shasum":"94dbc3682b00f4e731ee44317520a2787ba3e667"},"homepage":"https://github.com/pgte/nock","dependencies":{"propagate":"0.3.x","chai":">=1.9.2 <3.0.0","mkdirp":"^0.5.0","debug":"^1.0.4","deep-equal":"^1.0.0","lodash":"2.4.1"},"license":"MIT","repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"gitHead":"38a0c1392dec645ba6a0fcb9d5b0e153c084307f","engines":["node >= 0.10.0"],"directories":{}},"0.9.1":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"_nodeVersion":"v0.6.8","version":"0.9.1","_defaultsLoaded":true,"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"name":"nock","_npmVersion":"1.1.0-2","optionalDependencies":{},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"}],"devDependencies":{"tap":"0.2.x"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.9.1","main":"./index","repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"_engineSupported":true,"engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.9.1.tgz","shasum":"b5739d280011839b6626306b88cde5f5a8667e50"},"dependencies":{},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"directories":{}},"0.14.4":{"main":"./index","description":"HTTP Server mocking for Node.js","dist":{"shasum":"fce09bf27bbf6ed8eb2164e9d627e55a9d138849","tarball":"https://registry.npmjs.org/nock/-/nock-0.14.4.tgz"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"repository":{"url":"http://github.com/flatiron/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"engines":["node >= 0.4.10"],"version":"0.14.4","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"name":"nock","bugs":{"url":"http://github.com/flatiron/nock/issues"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.14.4","_npmVersion":"1.1.65","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"}],"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"tap":"0.2.x","request":"*"},"directories":{}},"0.8.4":{"main":"./index","repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"_engineSupported":true,"engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.8.4.tgz","shasum":"d9e198c3e42bdfd9db8f58ececa86e25d17d186b"},"dependencies":{},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"_nodeVersion":"v0.6.8","version":"0.8.4","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"_defaultsLoaded":true,"name":"nock","_npmVersion":"1.1.0-2","optionalDependencies":{},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"}],"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"tap":"0.0.x"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.8.4","directories":{}},"0.1.3":{"main":"./index","description":"HTTP Server mocking for Node.js","dependencies":{},"dist":{"shasum":"4a7952e35994ee72d952e2ae33e929ad5e445d9f","tarball":"https://registry.npmjs.org/nock/-/nock-0.1.3.tgz"},"_engineSupported":true,"repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"engines":["node >= 0.4.10"],"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"_defaultsLoaded":true,"_npmJsonOpts":{"wscript":false,"serverjs":false,"file":"/Users/pedroteixeira/.npm/nock/0.1.3/package/package.json","contributors":false},"version":"0.1.3","_nodeVersion":"v0.4.11","name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"test":"node_modules/.bin/tap tests"},"_id":"nock@0.1.3","_npmVersion":"1.0.27","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"tap":"0.0.x"},"directories":{}},"0.31.2":{"main":"./index","description":"HTTP Server mocking for Node.js","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dependencies":{"lodash":"2.4.1","debug":"^0.8.1","propagate":"0.2.x"},"dist":{"shasum":"33a7aa87208ea4c52925033c953cfec3f7633155","tarball":"https://registry.npmjs.org/nock/-/nock-0.31.2.tgz"},"homepage":"https://github.com/pgte/nock","license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"engines":["node >= 0.4.10"],"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"}],"version":"0.31.2","name":"nock","_from":".","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"_id":"nock@0.31.2","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"}],"_npmVersion":"1.3.14","author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"tap":"*","superagent":"~0.15.7","request":"*","needle":"^0.7.1"},"directories":{}},"0.6.2":{"engines":["node >= 0.4.10"],"_engineSupported":true,"repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dependencies":{},"dist":{"shasum":"87c0059268abf27f6fa099a107e3ca3e32e3a572","tarball":"https://registry.npmjs.org/nock/-/nock-0.6.2.tgz"},"description":"HTTP Server mocking for Node.js","main":"./index","devDependencies":{"tap":"0.0.x"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"}],"_npmVersion":"1.1.0-alpha-6","_id":"nock@0.6.2","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","_defaultsLoaded":true,"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"_nodeVersion":"v0.6.5","version":"0.6.2","directories":{}},"0.59.0":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"_from":".","name":"nock","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"pre-commit":["jshint","test"],"version":"0.59.0","devDependencies":{"pre-commit":"0.0.9","jshint":"^2.5.6","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","restify":"^2.8.1","needle":"^0.7.1","restler":"3.2.2","tap":"*","superagent":"~0.15.7","request":"2.51.0"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"},{"email":"kelaban17@gmail.com","name":"Keith Laban","url":"https://github.com/kelaban"}],"_npmVersion":"1.4.28","_id":"nock@0.59.0","scripts":{"jshint":"jshint lib/*.js","test":"node node_modules/tap/bin/tap.js --dd tests"},"_shasum":"01b3b7021e2e73c25e6a2b26e196081373ef138f","main":"./index","gitHead":"d81bcf07d0aef54624bc86dca7cff61cbc1de253","engines":["node >= 0.10.0"],"license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dist":{"shasum":"01b3b7021e2e73c25e6a2b26e196081373ef138f","tarball":"https://registry.npmjs.org/nock/-/nock-0.59.0.tgz"},"homepage":"https://github.com/pgte/nock","dependencies":{"debug":"^1.0.4","mkdirp":"^0.5.0","lodash":"2.4.1","propagate":"0.3.x","chai":"^1.9.2"},"description":"HTTP Server mocking for Node.js","directories":{}},"7.0.0":{"devDependencies":{"aws-sdk":"^2.0.15","hyperquest":"^0.3.0","rimraf":"^2.3.2","request":"2.61.0","restler":"3.2.2","needle":"^0.7.1","restify":"^2.8.1","pre-commit":"0.0.9","jshint":"^2.5.6","istanbul":"^0.3.8","isomorphic-fetch":"^2.2.0","tap":"^0.7.1","superagent":"^1.4.0","node-static":"^0.7.7","coveralls":"^2.11.2","browserify":"^12.0.1","zombie":"^4.2.1","request-promise":"^0.4.3"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"url":"https://github.com/jagoda","name":"Jeffrey Jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"url":"https://github.com/kelaban","name":"Keith Laban","email":"kelaban17@gmail.com"},{"url":"https://github.com/ruimarinho","name":"Rui Marinho","email":"ruipmarinho@gmail.com"},{"url":"https://github.com/DavidTPate","name":"David Pate","email":"davidtpate@gmail.com"},{"url":"https://github.com/matto1990","name":"Matt Oakes"}],"_npmVersion":"2.14.7","_id":"nock@7.0.0","scripts":{"coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","changelog":"changelog nock all -m > CHANGELOG.md","test":"node --harmony tests/test.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"_from":".","name":"nock","maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"email":"me@svenlito.com","name":"svnlto"}],"_nodeVersion":"4.2.3","pre-commit":["jshint","coverage"],"version":"7.0.0","gitHead":"fd73ca8d9c20294d1f451a3908a52af81e849950","engines":["node >= 0.10.0"],"license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git+ssh://git@github.com/pgte/nock.git","type":"git"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dependencies":{"propagate":"0.3.x","json-stringify-safe":"^5.0.1","qs":"^6.0.2","chai":">=1.9.2 <4.0.0","mkdirp":"^0.5.0","debug":"^2.2.0","lodash":"^3.10.1","deep-equal":"^1.0.0"},"dist":{"shasum":"d9fe31a88d80e1b6ed970a975a348e68b5b63c4c","tarball":"https://registry.npmjs.org/nock/-/nock-7.0.0.tgz"},"homepage":"https://github.com/pgte/nock#readme","description":"HTTP Server mocking for Node.js","_shasum":"d9fe31a88d80e1b6ed970a975a348e68b5b63c4c","main":"./index","directories":{}},"0.7.2":{"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"}],"_npmVersion":"1.0.106","devDependencies":{"tap":"0.0.x"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.7.2","bugs":{"url":"http://github.com/pgte/nock/issues"},"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"_defaultsLoaded":true,"_nodeVersion":"v0.4.11","version":"0.7.2","name":"nock","_engineSupported":true,"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dist":{"shasum":"71a601426c84194eb4d8b6fd0259cf242229f148","tarball":"https://registry.npmjs.org/nock/-/nock-0.7.2.tgz"},"dependencies":{},"main":"./index","directories":{}},"0.52.4":{"version":"0.52.4","pre-commit":["jshint","test"],"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"_from":".","name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"jshint":"jshint lib/*.js","test":"node node_modules/tap/bin/tap.js --dd tests"},"_id":"nock@0.52.4","_npmVersion":"1.4.28","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"}],"devDependencies":{"aws-sdk":"^2.0.15","hyperquest":"^0.3.0","tap":"*","superagent":"~0.15.7","request":"*","needle":"^0.7.1","restify":"^2.8.1","pre-commit":"0.0.9","jshint":"^2.5.6"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"main":"./index","_shasum":"cfda642b35e9e0e73b5328c4827a3fc110d63ea1","description":"HTTP Server mocking for Node.js","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.52.4.tgz","shasum":"cfda642b35e9e0e73b5328c4827a3fc110d63ea1"},"dependencies":{"propagate":"0.3.x","lodash":"2.4.1","debug":"^1.0.4"},"homepage":"https://github.com/pgte/nock","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"license":"MIT","gitHead":"16db14b999ba95238725f1d26cb1f1f6c474b6f8","engines":["node >= 0.10.0"],"directories":{}},"0.36.2":{"devDependencies":{"superagent":"~0.15.7","request":"*","tap":"*","needle":"^0.7.1","restify":"^2.8.1"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"_npmVersion":"1.4.9","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"}],"_id":"nock@0.36.2","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","_from":".","version":"0.36.2","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"}],"engines":["node >= 0.10.0"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"license":"MIT","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.36.2.tgz","shasum":"f23e0a2b4ae45ce3e123f8e624df9ecf77518983"},"homepage":"https://github.com/pgte/nock","dependencies":{"debug":"^0.8.1","lodash":"2.4.1","propagate":"0.2.x"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","_shasum":"f23e0a2b4ae45ce3e123f8e624df9ecf77518983","main":"./index","directories":{}},"0.6.3":{"name":"nock","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"_defaultsLoaded":true,"version":"0.6.3","_nodeVersion":"v0.6.5","bugs":{"url":"http://github.com/pgte/nock/issues"},"_id":"nock@0.6.3","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"tap":"0.0.x"},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"}],"_npmVersion":"1.1.0-alpha-6","main":"./index","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.6.3.tgz","shasum":"91a7f4c0de70bdd91d742e63d1aa8a708ab4f2ba"},"dependencies":{},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"_engineSupported":true,"repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"directories":{}},"0.11.6":{"main":"./index","_engineSupported":true,"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.11.6.tgz","shasum":"442bd019de44c76998a7f505729d37c3db1c843b"},"dependencies":{},"bugs":{"url":"http://github.com/pgte/nock/issues"},"_defaultsLoaded":true,"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"version":"0.11.6","_nodeVersion":"v0.6.11","name":"nock","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"}],"_npmVersion":"1.1.1","optionalDependencies":{},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"tap":"0.2.x","request":"*"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.11.6","directories":{}},"0.15.1":{"description":"HTTP Server mocking for Node.js","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.15.1.tgz","shasum":"a25baa6596fda09bfe7d8b39cf5740bc7c300a87"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"repository":{"url":"http://github.com/flatiron/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"engines":["node >= 0.4.10"],"main":"./index","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.15.1","_npmVersion":"1.1.65","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"}],"devDependencies":{"request":"*","tap":"0.4.x"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"version":"0.15.1","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"name":"nock","bugs":{"url":"http://github.com/flatiron/nock/issues"},"directories":{}},"0.45.0":{"scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"_id":"nock@0.45.0","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"}],"_npmVersion":"1.4.21","devDependencies":{"restify":"^2.8.1","needle":"^0.7.1","tap":"*","request":"*","superagent":"~0.15.7","hyperquest":"^0.3.0"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"name":"svnlto","email":"me@svenlito.com"}],"version":"0.45.0","name":"nock","_from":".","bugs":{"url":"http://github.com/pgte/nock/issues"},"description":"HTTP Server mocking for Node.js","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dependencies":{"lodash":"2.4.1","debug":"^0.8.1","propagate":"0.2.x"},"dist":{"shasum":"ad0ced6b6b1e1ffc7ebb034f478957c420dc4654","tarball":"https://registry.npmjs.org/nock/-/nock-0.45.0.tgz"},"homepage":"https://github.com/pgte/nock","license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"gitHead":"547d7cf1c9841200d8c4d97d35e96b39c913b2a7","engines":["node >= 0.10.0"],"main":"./index","_shasum":"ad0ced6b6b1e1ffc7ebb034f478957c420dc4654","directories":{}},"2.5.0":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"_nodeVersion":"2.2.1","version":"2.5.0","pre-commit":["jshint","coverage"],"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"name":"svnlto","email":"me@svenlito.com"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"name":"nock","_from":".","_npmVersion":"2.11.0","contributors":[{"url":"https://github.com/RomanGotsiy","name":"Roman Hotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"}],"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"hyperquest":"^0.3.0","aws-sdk":"^2.0.15","rimraf":"^2.3.2","tap":"^0.7.1","request":"2.51.0","superagent":"~0.15.7","restler":"3.2.2","needle":"^0.7.1","restify":"^2.8.1","coveralls":"^2.11.2","jshint":"^2.5.6","pre-commit":"0.0.9","istanbul":"^0.3.8"},"scripts":{"coverage":"istanbul cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","test":"node tests/test.js","coveralls":"istanbul cover tests/test.js && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"},"_id":"nock@2.5.0","_shasum":"621a332411180905a73c1a9cbc8bb9dae7f6fbad","main":"./index","tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git+ssh://git@github.com/pgte/nock.git","type":"git"},"license":"MIT","gitHead":"05bdf2bdd7c01a91f18ef1959fbc5df374634164","engines":["node >= 0.10.0"],"description":"HTTP Server mocking for Node.js","dependencies":{"propagate":"0.3.x","chai":">=1.9.2 <3.0.0","debug":"^1.0.4","mkdirp":"^0.5.0","lodash":"2.4.1","deep-equal":"^1.0.0"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-2.5.0.tgz","shasum":"621a332411180905a73c1a9cbc8bb9dae7f6fbad"},"homepage":"https://github.com/pgte/nock#readme","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"directories":{}},"7.5.0":{"gitHead":"f49c1269415dec1a476558da852d9c8f733f1553","engines":["node >= 0.10.0"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git+ssh://git@github.com/node-nock/nock.git","type":"git"},"license":"MIT","dist":{"shasum":"e287dd3e5458cd305c3a859c7a80dfed369c0bbe","tarball":"https://registry.npmjs.org/nock/-/nock-7.5.0.tgz"},"homepage":"https://github.com/node-nock/nock#readme","dependencies":{"chai":">=1.9.2 <4.0.0","qs":"^6.0.2","lodash":"^3.10.1","deep-equal":"^1.0.0","mkdirp":"^0.5.0","debug":"^2.2.0","propagate":"0.3.x","json-stringify-safe":"^5.0.1"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","_npmOperationalInternal":{"host":"packages-13-west.internal.npmjs.com","tmp":"tmp/nock-7.5.0.tgz_1458496892946_0.9794187701772898"},"_shasum":"e287dd3e5458cd305c3a859c7a80dfed369c0bbe","main":"./index","author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"rimraf":"^2.3.2","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","restify":"^2.8.1","needle":"^0.7.1","restler":"3.2.2","request":"2.61.0","jshint":"^2.5.6","pre-commit":"0.0.9","isomorphic-fetch":"^2.2.0","istanbul":"^0.3.8","node-static":"^0.7.7","coveralls":"^2.11.2","tap":"^0.7.1","superagent":"^1.4.0","zombie":"^4.2.1","browserify":"^12.0.1","request-promise":"^0.4.3"},"_npmVersion":"2.14.7","contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"url":"https://github.com/RomanGotsiy","name":"Roman Hotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"},{"url":"https://github.com/kelaban","name":"Keith Laban","email":"kelaban17@gmail.com"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"url":"https://github.com/DavidTPate","email":"davidtpate@gmail.com","name":"David Pate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"_id":"nock@7.5.0","scripts":{"test":"node --harmony tests/test.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","changelog":"changelog nock all -m > CHANGELOG.md"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"name":"nock","_from":".","pre-commit":["jshint","coverage"],"_nodeVersion":"4.2.3","version":"7.5.0","maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"name":"svnlto","email":"me@svenlito.com"}],"directories":{}},"0.51.0":{"dist":{"shasum":"ebe70accdb71423ff6cee3eb39760b83854fc5dd","tarball":"https://registry.npmjs.org/nock/-/nock-0.51.0.tgz"},"homepage":"https://github.com/pgte/nock","dependencies":{"propagate":"0.3.x","lodash":"2.4.1","debug":"^1.0.4"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","gitHead":"004ba9ba770696ecfc885b0f1895fdc00806423d","engines":["node >= 0.10.0"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"license":"MIT","main":"./index","_shasum":"ebe70accdb71423ff6cee3eb39760b83854fc5dd","_id":"nock@0.51.0","scripts":{"jshint":"jshint lib/*.js","test":"node node_modules/tap/bin/tap.js --dd tests"},"devDependencies":{"pre-commit":"0.0.9","jshint":"^2.5.6","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","restify":"^2.8.1","needle":"^0.7.1","superagent":"~0.15.7","tap":"*","request":"*"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"_npmVersion":"1.4.28","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"}],"_from":".","name":"nock","version":"0.51.0","pre-commit":["jshint","test"],"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"bugs":{"url":"http://github.com/pgte/nock/issues"},"directories":{}},"3.0.0":{"_from":".","name":"nock","maintainers":[{"email":"ivan@softwaremarbles.com","name":"ierceg"},{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"email":"me@svenlito.com","name":"svnlto"}],"version":"3.0.0","_nodeVersion":"0.12.7","pre-commit":["jshint","coverage"],"bugs":{"url":"http://github.com/pgte/nock/issues"},"_id":"nock@3.0.0","scripts":{"coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","jshint":"jshint lib/*.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","test":"node --harmony tests/test.js"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"rimraf":"^2.3.2","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","needle":"^0.7.1","restify":"^2.8.1","restler":"3.2.2","request":"2.61.0","pre-commit":"0.0.9","jshint":"^2.5.6","isomorphic-fetch":"^2.2.0","istanbul":"^0.3.8","node-static":"^0.7.7","coveralls":"^2.11.2","tap":"^0.7.1","superagent":"~0.15.7","browserify":"^12.0.1","zombie":"^4.2.1","request-promise":"^0.4.3"},"contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"url":"https://github.com/kelaban","name":"Keith Laban","email":"kelaban17@gmail.com"},{"url":"https://github.com/ruimarinho","email":"ruipmarinho@gmail.com","name":"Rui Marinho"},{"email":"davidtpate@gmail.com","name":"David Pate","url":"https://github.com/DavidTPate"},{"url":"https://github.com/matto1990","name":"Matt Oakes"}],"_npmVersion":"2.11.3","main":"./index","_shasum":"745256c7a924dab6c5b8959125f43263fd2bd7d9","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"homepage":"https://github.com/pgte/nock#readme","dist":{"shasum":"745256c7a924dab6c5b8959125f43263fd2bd7d9","tarball":"https://registry.npmjs.org/nock/-/nock-3.0.0.tgz"},"dependencies":{"propagate":"0.3.x","chai":">=1.9.2 <4.0.0","mkdirp":"^0.5.0","debug":"^1.0.4","lodash":"2.4.1","deep-equal":"^1.0.0"},"description":"HTTP Server mocking for Node.js","gitHead":"dd1d1aa713418faf5fea841dade58de6131a70ef","engines":["node >= 0.10.0"],"license":"MIT","repository":{"type":"git","url":"git+ssh://git@github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"directories":{}},"0.16.0":{"main":"./index","description":"HTTP Server mocking for Node.js","dist":{"shasum":"74d84540daeadd9735a7239bc438d6553b87abfc","tarball":"https://registry.npmjs.org/nock/-/nock-0.16.0.tgz"},"dependencies":{"propagate":"0.2.x"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"http://github.com/flatiron/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"engines":["node >= 0.4.10"],"version":"0.16.0","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"name":"nock","_from":".","bugs":{"url":"http://github.com/flatiron/nock/issues"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.16.0","_npmVersion":"1.2.11","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"}],"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"tap":"0.4.x","request":"*"},"directories":{}},"0.28.1":{"_id":"nock@0.28.1","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"tap":"*","superagent":"~0.15.7","request":"*"},"_npmVersion":"1.3.14","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"}],"name":"nock","_from":".","version":"0.28.1","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"}],"bugs":{"url":"http://github.com/pgte/nock/issues"},"dependencies":{"propagate":"0.2.x"},"dist":{"shasum":"6ebe50e116dd86528d922267779380ece877cef5","tarball":"https://registry.npmjs.org/nock/-/nock-0.28.1.tgz"},"homepage":"https://github.com/pgte/nock","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","main":"./index","directories":{}},"0.35.0":{"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.35.0.tgz","shasum":"ca61f496860b099c17097c27dc4860004b9a26cc"},"dependencies":{"propagate":"0.2.x","lodash":"2.4.1","debug":"^0.8.1"},"homepage":"https://github.com/pgte/nock","description":"HTTP Server mocking for Node.js","engines":["node >= 0.10.0"],"license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"main":"./index","_shasum":"ca61f496860b099c17097c27dc4860004b9a26cc","_id":"nock@0.35.0","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"needle":"^0.7.1","restify":"^2.8.1","superagent":"~0.15.7","tap":"*","request":"*"},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"}],"_npmVersion":"1.4.9","name":"nock","_from":".","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"}],"version":"0.35.0","bugs":{"url":"http://github.com/pgte/nock/issues"},"directories":{}},"0.40.0":{"description":"HTTP Server mocking for Node.js","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.40.0.tgz","shasum":"a8dd4b7591cfdfd257e047ff32c1feae088923ba"},"dependencies":{"debug":"^0.8.1","lodash":"2.4.1","propagate":"0.2.x"},"homepage":"https://github.com/pgte/nock","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"license":"MIT","engines":["node >= 0.10.0"],"main":"./index","_shasum":"a8dd4b7591cfdfd257e047ff32c1feae088923ba","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"_id":"nock@0.40.0","_npmVersion":"1.4.9","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"}],"devDependencies":{"restify":"^2.8.1","needle":"^0.7.1","request":"*","superagent":"~0.15.7","tap":"*"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"version":"0.40.0","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"}],"_from":".","name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"directories":{}},"2.0.0":{"main":"./index","_shasum":"621b6e593cefc4fa4330ee35a6fc450bb0309835","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-2.0.0.tgz","shasum":"621b6e593cefc4fa4330ee35a6fc450bb0309835"},"homepage":"https://github.com/pgte/nock","dependencies":{"chai":"^1.9.2","propagate":"0.3.x","mkdirp":"^0.5.0","debug":"^1.0.4","lodash":"2.4.1"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","gitHead":"94704d2d187a8d9dcfbf1628672df8634fd510c3","engines":["node >= 0.10.0"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"license":"MIT","name":"nock","_from":".","version":"2.0.0","pre-commit":["jshint","coverage"],"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"},{"name":"ierceg","email":"ivan@softwaremarbles.com"}],"bugs":{"url":"http://github.com/pgte/nock/issues"},"_id":"nock@2.0.0","scripts":{"test":"node tests/test.js","coverage":"istanbul cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","coveralls":"istanbul cover tests/test.js && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"},"devDependencies":{"tap":"^0.7.1","superagent":"~0.15.7","request":"2.51.0","restify":"^2.8.1","restler":"3.2.2","needle":"^0.7.1","coveralls":"^2.11.2","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","rimraf":"^2.3.2","istanbul":"^0.3.8","jshint":"^2.5.6","pre-commit":"0.0.9"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"_npmVersion":"1.4.28","contributors":[{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"},{"url":"https://github.com/kelaban","name":"Keith Laban","email":"kelaban17@gmail.com"}],"directories":{}},"3.3.1":{"_npmVersion":"3.3.10","contributors":[{"url":"https://github.com/RomanGotsiy","name":"Roman Hotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"url":"https://github.com/ruimarinho","name":"Rui Marinho","email":"ruipmarinho@gmail.com"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"devDependencies":{"changelog":"^1.0.7","request":"2.61.0","needle":"^0.7.1","restler":"3.2.2","restify":"^2.8.1","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","rimraf":"^2.3.2","istanbul":"^0.3.8","isomorphic-fetch":"^2.2.0","jshint":"^2.5.6","pre-commit":"0.0.9","tap":"^0.7.1","superagent":"^1.4.0","coveralls":"^2.11.2","node-static":"^0.7.7","request-promise":"^0.4.3","zombie":"^4.2.1","browserify":"^12.0.1"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"scripts":{"test":"node --harmony tests/test.js","jshint":"jshint lib/*.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","changelog":"changelog nock all -m > CHANGELOG.md"},"_id":"nock@3.3.1","bugs":{"url":"http://github.com/pgte/nock/issues"},"pre-commit":["jshint","coverage"],"_nodeVersion":"4.2.2","version":"3.3.1","maintainers":[{"email":"ivan@softwaremarbles.com","name":"ierceg"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"}],"_from":".","name":"nock","repository":{"url":"git+ssh://git@github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","gitHead":"c22fcd0c56ff0c356c472d4bcd64fbd387b11c29","engines":["node >= 0.10.0"],"description":"HTTP Server mocking for Node.js","dependencies":{"chai":">=1.9.2 <4.0.0","propagate":"0.3.x","deep-equal":"^1.0.0","lodash":"2.4.1","debug":"^2.2.0","mkdirp":"^0.5.0"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-3.3.1.tgz","shasum":"3a381a45399fc9f4ac829733464dede64278175e"},"homepage":"https://github.com/pgte/nock#readme","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"_shasum":"3a381a45399fc9f4ac829733464dede64278175e","main":"./index","directories":{}},"2.9.0":{"_shasum":"fb95078fd86529e0a94773ede7d9bfdc0318167c","main":"./index","tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"git+ssh://git@github.com/pgte/nock.git"},"license":"MIT","gitHead":"d125d5838d7a9e8bed57ddd489a8c0cae6040f2e","engines":["node >= 0.10.0"],"description":"HTTP Server mocking for Node.js","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-2.9.0.tgz","shasum":"fb95078fd86529e0a94773ede7d9bfdc0318167c"},"dependencies":{"lodash":"2.4.1","deep-equal":"^1.0.0","debug":"^1.0.4","mkdirp":"^0.5.0","chai":">=1.9.2 <3.0.0","propagate":"0.3.x"},"homepage":"https://github.com/pgte/nock#readme","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"_nodeVersion":"0.12.3","pre-commit":["jshint","coverage"],"version":"2.9.0","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"_from":".","name":"nock","_npmVersion":"2.9.1","contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"url":"https://github.com/jagoda","name":"Jeffrey Jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"}],"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"istanbul":"^0.3.8","jshint":"^2.5.6","pre-commit":"0.0.9","tap":"^0.7.1","request":"2.51.0","superagent":"~0.15.7","needle":"^0.7.1","restler":"3.2.2","restify":"^2.8.1","coveralls":"^2.11.2","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","rimraf":"^2.3.2"},"scripts":{"test":"node tests/test.js","coverage":"istanbul cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","coveralls":"istanbul cover tests/test.js && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"},"_id":"nock@2.9.0","directories":{}},"0.31.0":{"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"}],"version":"0.31.0","name":"nock","_from":".","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"_id":"nock@0.31.0","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"}],"_npmVersion":"1.3.14","author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"tap":"*","superagent":"~0.15.7","request":"*"},"main":"./index","description":"HTTP Server mocking for Node.js","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"homepage":"https://github.com/pgte/nock","dist":{"shasum":"50f7ffae5cb87381ca379a7e7c3e8819c4761be6","tarball":"https://registry.npmjs.org/nock/-/nock-0.31.0.tgz"},"dependencies":{"lodash":"2.4.1","debug":"^0.8.1","propagate":"0.2.x"},"license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"engines":["node >= 0.4.10"],"directories":{}},"0.30.1":{"main":"./index","description":"HTTP Server mocking for Node.js","dependencies":{"debug":"^0.8.1","lodash":"2.4.1","propagate":"0.2.x"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.30.1.tgz","shasum":"002fe5767b151637f7428b7597949d5dad8ecdbb"},"homepage":"https://github.com/pgte/nock","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"license":"MIT","engines":["node >= 0.4.10"],"version":"0.30.1","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"}],"name":"nock","_from":".","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"_id":"nock@0.30.1","_npmVersion":"1.3.14","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"}],"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"superagent":"~0.15.7","request":"*","tap":"*"},"directories":{}},"2.11.0":{"license":"MIT","repository":{"type":"git","url":"git+ssh://git@github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"gitHead":"c7e1874cd8045cd2f3653fef253a9bc90805b86f","engines":["node >= 0.10.0"],"description":"HTTP Server mocking for Node.js","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-2.11.0.tgz","shasum":"2554cc09f0c3077100aae185b88d030bad950fcd"},"dependencies":{"debug":"^1.0.4","mkdirp":"^0.5.0","lodash":"2.4.1","deep-equal":"^1.0.0","propagate":"0.3.x","chai":">=1.9.2 <4.0.0"},"homepage":"https://github.com/pgte/nock#readme","_shasum":"2554cc09f0c3077100aae185b88d030bad950fcd","main":"./index","contributors":[{"url":"https://github.com/RomanGotsiy","name":"Roman Hotsiy"},{"url":"https://github.com/jagoda","name":"Jeffrey Jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"}],"_npmVersion":"2.11.3","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"pre-commit":"0.0.9","jshint":"^2.5.6","istanbul":"^0.3.8","rimraf":"^2.3.2","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","needle":"^0.7.1","restler":"3.2.2","restify":"^2.8.1","coveralls":"^2.11.2","tap":"^0.7.1","request":"2.51.0","superagent":"~0.15.7"},"scripts":{"coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","test":"node tests/test.js","coverage":"istanbul cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js"},"_id":"nock@2.11.0","bugs":{"url":"http://github.com/pgte/nock/issues"},"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"_nodeVersion":"0.12.7","pre-commit":["jshint","coverage"],"version":"2.11.0","name":"nock","_from":".","directories":{}},"0.17.4":{"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"http://github.com/flatiron/nock.git","type":"git"},"engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","dist":{"shasum":"f91f2652ffbf3d738b50541da07be2120eae0871","tarball":"https://registry.npmjs.org/nock/-/nock-0.17.4.tgz"},"dependencies":{"propagate":"0.2.x"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"main":"./index","_npmVersion":"1.2.17","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"}],"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"request":"*","tap":"*"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.17.4","bugs":{"url":"http://github.com/flatiron/nock/issues"},"version":"0.17.4","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"name":"nock","_from":".","directories":{}},"7.1.0":{"description":"HTTP Server mocking for Node.js","dist":{"shasum":"e8c80a7362d041c8c03394a93cdf0625c9cb7b52","tarball":"https://registry.npmjs.org/nock/-/nock-7.1.0.tgz"},"homepage":"https://github.com/pgte/nock#readme","dependencies":{"propagate":"0.3.x","json-stringify-safe":"^5.0.1","qs":"^6.0.2","chai":">=1.9.2 <4.0.0","mkdirp":"^0.5.0","debug":"^2.2.0","lodash":"^3.10.1","deep-equal":"^1.0.0"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"git+ssh://git@github.com/pgte/nock.git"},"license":"MIT","gitHead":"d79bcd6c57a461f0e2b964f84173c42f0b852743","engines":["node >= 0.10.0"],"main":"./index","_shasum":"e8c80a7362d041c8c03394a93cdf0625c9cb7b52","scripts":{"test":"node --harmony tests/test.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","changelog":"changelog nock all -m > CHANGELOG.md"},"_id":"nock@7.1.0","_npmVersion":"2.14.7","contributors":[{"url":"https://github.com/RomanGotsiy","name":"Roman Hotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"},{"url":"https://github.com/kelaban","email":"kelaban17@gmail.com","name":"Keith Laban"},{"url":"https://github.com/ruimarinho","name":"Rui Marinho","email":"ruipmarinho@gmail.com"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"url":"https://github.com/matto1990","name":"Matt Oakes"}],"devDependencies":{"needle":"^0.7.1","restify":"^2.8.1","restler":"3.2.2","request":"2.61.0","rimraf":"^2.3.2","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.3.8","pre-commit":"0.0.9","jshint":"^2.5.6","node-static":"^0.7.7","coveralls":"^2.11.2","tap":"^0.7.1","superagent":"^1.4.0","request-promise":"^0.4.3","browserify":"^12.0.1","zombie":"^4.2.1"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"version":"7.1.0","_nodeVersion":"4.2.3","pre-commit":["jshint","coverage"],"maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"name":"nock","_from":".","bugs":{"url":"http://github.com/pgte/nock/issues"},"directories":{}},"2.3.0":{"_shasum":"67584c824ecf1366e8c23570aa8e2e0835ae8cd2","main":"./index","license":"MIT","repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"gitHead":"3fb88913da13fec37bbad142e3de8423841eb355","engines":["node >= 0.10.0"],"description":"HTTP Server mocking for Node.js","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"homepage":"https://github.com/pgte/nock","dist":{"shasum":"67584c824ecf1366e8c23570aa8e2e0835ae8cd2","tarball":"https://registry.npmjs.org/nock/-/nock-2.3.0.tgz"},"dependencies":{"propagate":"0.3.x","chai":">=1.9.2 <3.0.0","lodash":"2.4.1","debug":"^1.0.4","mkdirp":"^0.5.0"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"name":"svnlto","email":"me@svenlito.com"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"_nodeVersion":"0.12.2","version":"2.3.0","pre-commit":["jshint","coverage"],"name":"nock","_from":".","contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"url":"https://github.com/jagoda","name":"Jeffrey Jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"}],"_npmVersion":"2.7.4","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"restler":"3.2.2","needle":"^0.7.1","restify":"^2.8.1","coveralls":"^2.11.2","tap":"^0.7.1","request":"2.51.0","superagent":"~0.15.7","rimraf":"^2.3.2","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","istanbul":"^0.3.8","jshint":"^2.5.6","pre-commit":"0.0.9"},"scripts":{"test":"node tests/test.js","jshint":"jshint lib/*.js","coverage":"istanbul cover tests/test.js && istanbul check-coverage","coveralls":"istanbul cover tests/test.js && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"},"_id":"nock@2.3.0","directories":{}},"0.41.0":{"_id":"nock@0.41.0","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"devDependencies":{"needle":"^0.7.1","restify":"^2.8.1","request":"*","superagent":"~0.15.7","tap":"*"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"}],"_npmVersion":"1.4.9","_from":".","name":"nock","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"}],"version":"0.41.0","bugs":{"url":"http://github.com/pgte/nock/issues"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dist":{"shasum":"1f546bac4ff875d9a6afc3ebfa75078cd2972d01","tarball":"https://registry.npmjs.org/nock/-/nock-0.41.0.tgz"},"homepage":"https://github.com/pgte/nock","dependencies":{"debug":"^0.8.1","lodash":"2.4.1","propagate":"0.2.x"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.10.0"],"license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"main":"./index","_shasum":"1f546bac4ff875d9a6afc3ebfa75078cd2972d01","directories":{}},"0.28.0":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"_from":".","name":"nock","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"}],"version":"0.28.0","author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"superagent":"~0.15.7","tap":"*","request":"*"},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"}],"_npmVersion":"1.3.14","_id":"nock@0.28.0","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"main":"./index","engines":["node >= 0.4.10"],"license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dependencies":{"propagate":"0.2.x"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.28.0.tgz","shasum":"546f422065fc9126b29a28dc93fa422c897a7c98"},"homepage":"https://github.com/pgte/nock","description":"HTTP Server mocking for Node.js","directories":{}},"4.1.0":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","_from":".","pre-commit":["jshint","coverage"],"_nodeVersion":"4.2.3","version":"4.1.0","maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"name":"svnlto","email":"me@svenlito.com"}],"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"zombie":"^4.2.1","browserify":"^12.0.1","request-promise":"^0.4.3","node-static":"^0.7.7","coveralls":"^2.11.2","superagent":"^1.4.0","tap":"^0.7.1","jshint":"^2.5.6","pre-commit":"0.0.9","isomorphic-fetch":"^2.2.0","istanbul":"^0.3.8","rimraf":"^2.3.2","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","restify":"^2.8.1","needle":"^0.7.1","restler":"3.2.2","request":"2.61.0"},"_npmVersion":"2.14.7","contributors":[{"url":"https://github.com/RomanGotsiy","name":"Roman Hotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"},{"url":"https://github.com/kelaban","email":"kelaban17@gmail.com","name":"Keith Laban"},{"url":"https://github.com/ruimarinho","name":"Rui Marinho","email":"ruipmarinho@gmail.com"},{"email":"davidtpate@gmail.com","name":"David Pate","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"_id":"nock@4.1.0","scripts":{"test":"node --harmony tests/test.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","changelog":"changelog nock all -m > CHANGELOG.md"},"_shasum":"446d5b661de8bc4bc6bff5d76bd7303ad34f14d4","main":"./index","gitHead":"b0cff5661dd707d3116e95265f465c31aff6a666","engines":["node >= 0.10.0"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git+ssh://git@github.com/pgte/nock.git","type":"git"},"license":"MIT","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-4.1.0.tgz","shasum":"446d5b661de8bc4bc6bff5d76bd7303ad34f14d4"},"dependencies":{"json-stringify-safe":"^5.0.1","propagate":"0.3.x","chai":">=1.9.2 <4.0.0","mkdirp":"^0.5.0","debug":"^2.2.0","deep-equal":"^1.0.0","lodash":"2.4.1"},"homepage":"https://github.com/pgte/nock#readme","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","directories":{}},"0.36.1":{"version":"0.36.1","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"_from":".","name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"_id":"nock@0.36.1","_npmVersion":"1.4.9","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"}],"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"superagent":"~0.15.7","tap":"*","request":"*","restify":"^2.8.1","needle":"^0.7.1"},"main":"./index","_shasum":"7fb78293b0ad112d61b2c8cba47e169bc40df261","description":"HTTP Server mocking for Node.js","dist":{"shasum":"7fb78293b0ad112d61b2c8cba47e169bc40df261","tarball":"https://registry.npmjs.org/nock/-/nock-0.36.1.tgz"},"homepage":"https://github.com/pgte/nock","dependencies":{"propagate":"0.2.x","debug":"^0.8.1","lodash":"2.4.1"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","engines":["node >= 0.10.0"],"directories":{}},"0.1.6":{"description":"HTTP Server mocking for Node.js","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.1.6.tgz","shasum":"dc8ac793ad41c032eee86731fd8cd617fe70b7a4"},"dependencies":{},"_engineSupported":true,"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"engines":["node >= 0.4.10"],"main":"./index","scripts":{"test":"node_modules/.bin/tap tests"},"_id":"nock@0.1.6","_npmVersion":"1.0.27","devDependencies":{"tap":"0.0.x"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"_defaultsLoaded":true,"_npmJsonOpts":{"serverjs":false,"wscript":false,"file":"/Users/pedroteixeira/.npm/nock/0.1.6/package/package.json","contributors":false},"_nodeVersion":"v0.4.11","version":"0.1.6","name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"directories":{}},"0.34.0":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"_from":".","name":"nock","version":"0.34.0","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"name":"svnlto","email":"me@svenlito.com"}],"devDependencies":{"superagent":"~0.15.7","tap":"*","request":"*","restify":"^2.8.1","needle":"^0.7.1"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"_npmVersion":"1.4.9","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"}],"_id":"nock@0.34.0","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"_shasum":"a452c8f56fa19966c00eeadfde26d8f43d989bdb","main":"./index","engines":["node >= 0.10.0"],"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","homepage":"https://github.com/pgte/nock","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.34.0.tgz","shasum":"a452c8f56fa19966c00eeadfde26d8f43d989bdb"},"dependencies":{"debug":"^0.8.1","lodash":"2.4.1","propagate":"0.2.x"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","directories":{}},"2.4.0":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","_from":".","_nodeVersion":"1.6.3","version":"2.4.0","pre-commit":["jshint","coverage"],"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"devDependencies":{"tap":"^0.7.1","superagent":"~0.15.7","request":"2.51.0","restler":"3.2.2","restify":"^2.8.1","needle":"^0.7.1","coveralls":"^2.11.2","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","rimraf":"^2.3.2","istanbul":"^0.3.8","jshint":"^2.5.6","pre-commit":"0.0.9"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"_npmVersion":"2.7.4","contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"url":"https://github.com/jagoda","name":"Jeffrey Jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"}],"_id":"nock@2.4.0","scripts":{"coveralls":"istanbul cover tests/test.js && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","test":"node tests/test.js","jshint":"jshint lib/*.js","coverage":"istanbul cover tests/test.js && istanbul check-coverage"},"_shasum":"df5885a3d73883ba895166b0aa3040c4d92293a1","main":"./index","gitHead":"2535844b044e61c95d04fa0e5b0ffb1cfd3cbe6a","engines":["node >= 0.10.0"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","dependencies":{"mkdirp":"^0.5.0","debug":"^1.0.4","deep-equal":"^1.0.0","lodash":"2.4.1","propagate":"0.3.x","chai":">=1.9.2 <3.0.0"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-2.4.0.tgz","shasum":"df5885a3d73883ba895166b0aa3040c4d92293a1"},"homepage":"https://github.com/pgte/nock","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","directories":{}},"2.7.0":{"dependencies":{"propagate":"0.3.x","chai":">=1.9.2 <3.0.0","lodash":"2.4.1","deep-equal":"^1.0.0","mkdirp":"^0.5.0","debug":"^1.0.4"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-2.7.0.tgz","shasum":"280511086d4fe5e86e29aadc44f5852be6ae752b"},"homepage":"https://github.com/pgte/nock","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","gitHead":"b1f29a37e4507d8f416949dcdb1aa99a250e4d77","engines":["node >= 0.10.0"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","main":"./index","_shasum":"280511086d4fe5e86e29aadc44f5852be6ae752b","_id":"nock@2.7.0","scripts":{"test":"node tests/test.js","jshint":"jshint lib/*.js","coverage":"istanbul cover tests/test.js && istanbul check-coverage","coveralls":"istanbul cover tests/test.js && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"jshint":"^2.5.6","pre-commit":"0.0.9","istanbul":"^0.3.8","rimraf":"^2.3.2","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","needle":"^0.7.1","restler":"3.2.2","restify":"^2.8.1","coveralls":"^2.11.2","tap":"^0.7.1","request":"2.51.0","superagent":"~0.15.7"},"_npmVersion":"2.7.4","contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"url":"https://github.com/jagoda","name":"Jeffrey Jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"url":"https://github.com/kelaban","email":"kelaban17@gmail.com","name":"Keith Laban"}],"_from":".","name":"nock","_nodeVersion":"1.6.3","pre-commit":["jshint","coverage"],"version":"2.7.0","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"ierceg","email":"ivan@softwaremarbles.com"}],"bugs":{"url":"http://github.com/pgte/nock/issues"},"directories":{}},"0.36.0":{"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"}],"version":"0.36.0","name":"nock","_from":".","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"_id":"nock@0.36.0","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"}],"_npmVersion":"1.4.9","author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"restify":"^2.8.1","needle":"^0.7.1","tap":"*","superagent":"~0.15.7","request":"*"},"main":"./index","_shasum":"55e32b87bc2d40e5180e85bb98a0860c27d882b7","description":"HTTP Server mocking for Node.js","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.36.0.tgz","shasum":"55e32b87bc2d40e5180e85bb98a0860c27d882b7"},"dependencies":{"propagate":"0.2.x","debug":"^0.8.1","lodash":"2.4.1"},"homepage":"https://github.com/pgte/nock","license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"engines":["node >= 0.10.0"],"directories":{}},"0.21.0":{"version":"0.21.0","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"_from":".","name":"nock","bugs":{"url":"http://github.com/flatiron/nock/issues"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.21.0","_npmVersion":"1.2.32","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"}],"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"tap":"*","request":"*"},"main":"./index","description":"HTTP Server mocking for Node.js","dist":{"shasum":"b601db4744eb2ca191b14176175faa11a787c904","tarball":"https://registry.npmjs.org/nock/-/nock-0.21.0.tgz"},"dependencies":{"propagate":"0.2.x"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/flatiron/nock.git"},"license":"MIT","engines":["node >= 0.4.10"],"directories":{}},"0.3.1":{"_npmJsonOpts":{"serverjs":false,"wscript":false,"file":"/Users/pedroteixeira/.npm/nock/0.3.1/package/package.json","contributors":false},"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"_defaultsLoaded":true,"version":"0.3.1","_nodeVersion":"v0.4.11","name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"test":"node_modules/.bin/tap tests"},"_id":"nock@0.3.1","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"}],"_npmVersion":"1.0.27","devDependencies":{"tap":"0.0.x"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"main":"./index","description":"HTTP Server mocking for Node.js","dist":{"shasum":"8f6563f95326018a1f072b9c874f276dcf6a1432","tarball":"https://registry.npmjs.org/nock/-/nock-0.3.1.tgz"},"dependencies":{},"_engineSupported":true,"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"engines":["node >= 0.4.10"],"directories":{}},"1.3.0":{"description":"HTTP Server mocking for Node.js","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-1.3.0.tgz","shasum":"b29f99f8eb47b660c4c2bc341613a66e84a1f593"},"dependencies":{"debug":"^1.0.4","mkdirp":"^0.5.0","lodash":"2.4.1","propagate":"0.3.x","chai":"^1.9.2"},"homepage":"https://github.com/pgte/nock","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","gitHead":"5dc876eb99bb104300791f7c58e436bc9f2e63c6","engines":["node >= 0.10.0"],"main":"./index","_shasum":"b29f99f8eb47b660c4c2bc341613a66e84a1f593","scripts":{"coverage":"istanbul cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","test":"node tests/test.js","coveralls":"istanbul cover tests/test.js && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"},"_id":"nock@1.3.0","_npmVersion":"2.6.1","contributors":[{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"},{"email":"kelaban17@gmail.com","name":"Keith Laban","url":"https://github.com/kelaban"}],"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"istanbul":"^0.3.8","jshint":"^2.5.6","pre-commit":"0.0.9","coveralls":"^2.11.2","restler":"3.2.2","restify":"^2.8.1","needle":"^0.7.1","request":"2.51.0","tap":"*","superagent":"~0.15.7","hyperquest":"^0.3.0","aws-sdk":"^2.0.15"},"pre-commit":["jshint","coverage"],"_nodeVersion":"1.4.2","version":"1.3.0","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"ierceg","email":"ivan@softwaremarbles.com"}],"_from":".","name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"directories":{}},"0.11.2":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","version":"0.11.2","_nodeVersion":"v0.6.11","_defaultsLoaded":true,"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"devDependencies":{"tap":"0.2.x","request":"*"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"_npmVersion":"1.1.1","optionalDependencies":{},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"}],"_id":"nock@0.11.2","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"main":"./index","engines":["node >= 0.4.10"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"_engineSupported":true,"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.11.2.tgz","shasum":"1455948577fe19e3860cf6a0677dbee0033413ad"},"dependencies":{},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","directories":{}},"0.11.1":{"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"}],"_npmVersion":"1.1.1","optionalDependencies":{},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"request":"* ","tap":"0.2.x"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.11.1","bugs":{"url":"http://github.com/pgte/nock/issues"},"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"_defaultsLoaded":true,"version":"0.11.1","_nodeVersion":"v0.6.11","name":"nock","_engineSupported":true,"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.11.1.tgz","shasum":"3cb12fc1a41ff971025ead50cc3b6e8da2c594fe"},"dependencies":{},"main":"./index","directories":{}},"2.6.0":{"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"},{"name":"ierceg","email":"ivan@softwaremarbles.com"}],"version":"2.6.0","_nodeVersion":"1.6.3","pre-commit":["jshint","coverage"],"name":"nock","_from":".","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"coveralls":"istanbul cover tests/test.js && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","jshint":"jshint lib/*.js","coverage":"istanbul cover tests/test.js && istanbul check-coverage","test":"node tests/test.js"},"_id":"nock@2.6.0","contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"url":"https://github.com/jagoda","name":"Jeffrey Jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"}],"_npmVersion":"2.7.4","devDependencies":{"rimraf":"^2.3.2","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","restify":"^2.8.1","restler":"3.2.2","needle":"^0.7.1","coveralls":"^2.11.2","superagent":"~0.15.7","tap":"^0.7.1","request":"2.51.0","jshint":"^2.5.6","pre-commit":"0.0.9","istanbul":"^0.3.8"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"main":"./index","_shasum":"8547757ea8ac5aea947d3bb88b96c132f6c55235","description":"HTTP Server mocking for Node.js","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dist":{"shasum":"8547757ea8ac5aea947d3bb88b96c132f6c55235","tarball":"https://registry.npmjs.org/nock/-/nock-2.6.0.tgz"},"homepage":"https://github.com/pgte/nock","dependencies":{"chai":">=1.9.2 <3.0.0","propagate":"0.3.x","mkdirp":"^0.5.0","debug":"^1.0.4","lodash":"2.4.1","deep-equal":"^1.0.0"},"license":"MIT","repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"gitHead":"c7e996eef4937207b57cb38840eb9529a5620053","engines":["node >= 0.10.0"],"directories":{}},"0.10.4":{"_id":"nock@0.10.4","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"tap":"0.2.x","request":"* "},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"}],"_npmVersion":"1.1.1","optionalDependencies":{},"name":"nock","_defaultsLoaded":true,"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"version":"0.10.4","_nodeVersion":"v0.6.11","bugs":{"url":"http://github.com/pgte/nock/issues"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dist":{"shasum":"f57c14a9bbf697ae753bf368c2bb18e3b7af942e","tarball":"https://registry.npmjs.org/nock/-/nock-0.10.4.tgz"},"dependencies":{},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"_engineSupported":true,"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"main":"./index","directories":{}},"2.2.0":{"devDependencies":{"rimraf":"^2.3.2","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","restler":"3.2.2","needle":"^0.7.1","restify":"^2.8.1","coveralls":"^2.11.2","tap":"^0.7.1","superagent":"~0.15.7","request":"2.51.0","pre-commit":"0.0.9","jshint":"^2.5.6","istanbul":"^0.3.8"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"contributors":[{"url":"https://github.com/RomanGotsiy","name":"Roman Hotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"}],"_npmVersion":"2.7.4","_id":"nock@2.2.0","scripts":{"coveralls":"istanbul cover tests/test.js && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","test":"node tests/test.js","coverage":"istanbul cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"_from":".","name":"nock","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"},{"name":"ierceg","email":"ivan@softwaremarbles.com"}],"_nodeVersion":"1.6.3","version":"2.2.0","pre-commit":["jshint","coverage"],"gitHead":"20a68efede3f5fe962d04c22883601dd13df1286","engines":["node >= 0.10.0"],"license":"MIT","repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dist":{"shasum":"d0e6efd123b885e9a8da73cb3a26072aa5bc8ba2","tarball":"https://registry.npmjs.org/nock/-/nock-2.2.0.tgz"},"homepage":"https://github.com/pgte/nock","dependencies":{"propagate":"0.3.x","chai":"^1.9.2","mkdirp":"^0.5.0","debug":"^1.0.4","lodash":"2.4.1"},"description":"HTTP Server mocking for Node.js","_shasum":"d0e6efd123b885e9a8da73cb3a26072aa5bc8ba2","main":"./index","directories":{}},"3.4.0":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"_nodeVersion":"4.2.2","pre-commit":["jshint","coverage"],"version":"3.4.0","maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"}],"name":"nock","_from":".","_npmVersion":"3.3.10","contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"url":"https://github.com/kelaban","email":"kelaban17@gmail.com","name":"Keith Laban"},{"email":"ruipmarinho@gmail.com","name":"Rui Marinho","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"zombie":"^4.2.1","browserify":"^12.0.1","request-promise":"^0.4.3","superagent":"^1.4.0","tap":"^0.7.1","node-static":"^0.7.7","coveralls":"^2.11.2","jshint":"^2.5.6","pre-commit":"0.0.9","istanbul":"^0.3.8","isomorphic-fetch":"^2.2.0","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","rimraf":"^2.3.2","request":"2.61.0","restler":"3.2.2","needle":"^0.7.1","restify":"^2.8.1"},"scripts":{"jshint":"jshint lib/*.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","test":"node --harmony tests/test.js","changelog":"changelog nock all -m > CHANGELOG.md","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"},"_id":"nock@3.4.0","_shasum":"9a13fb0df2796f4f74040bfbeb511787ae81dd24","main":"./index","repository":{"type":"git","url":"git+ssh://git@github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","gitHead":"bf3250e6f1176c2ec194649070d80f224423aeaf","engines":["node >= 0.10.0"],"description":"HTTP Server mocking for Node.js","dependencies":{"propagate":"0.3.x","json-stringify-safe":"^5.0.1","chai":">=1.9.2 <4.0.0","lodash":"2.4.1","deep-equal":"^1.0.0","debug":"^2.2.0","mkdirp":"^0.5.0"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-3.4.0.tgz","shasum":"9a13fb0df2796f4f74040bfbeb511787ae81dd24"},"homepage":"https://github.com/pgte/nock#readme","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"directories":{}},"1.8.0":{"scripts":{"coveralls":"istanbul cover tests/test.js && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","test":"node tests/test.js","jshint":"jshint lib/*.js","coverage":"istanbul cover tests/test.js && istanbul check-coverage"},"_id":"nock@1.8.0","_npmVersion":"2.7.4","contributors":[{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"}],"devDependencies":{"aws-sdk":"^2.0.15","hyperquest":"^0.3.0","rimraf":"^2.3.2","superagent":"~0.15.7","tap":"*","request":"2.51.0","restler":"3.2.2","coveralls":"^2.11.2","restify":"^2.8.1","needle":"^0.7.1","pre-commit":"0.0.9","jshint":"^2.5.6","istanbul":"^0.3.8"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"_nodeVersion":"1.6.3","version":"1.8.0","pre-commit":["jshint","coverage"],"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"},{"name":"ierceg","email":"ivan@softwaremarbles.com"}],"name":"nock","_from":".","bugs":{"url":"http://github.com/pgte/nock/issues"},"description":"HTTP Server mocking for Node.js","dist":{"shasum":"c69762494d24f2d9da5119816bc9d17f4ccab0cc","tarball":"https://registry.npmjs.org/nock/-/nock-1.8.0.tgz"},"homepage":"https://github.com/pgte/nock","dependencies":{"lodash":"2.4.1","mkdirp":"^0.5.0","debug":"^1.0.4","propagate":"0.3.x","chai":"^1.9.2"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","gitHead":"8b4350a3b12504137975b629dc33788a83d31f77","engines":["node >= 0.10.0"],"main":"./index","_shasum":"c69762494d24f2d9da5119816bc9d17f4ccab0cc","directories":{}},"7.2.1":{"maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"pre-commit":["jshint","coverage"],"_nodeVersion":"4.2.3","version":"7.2.1","name":"nock","_from":".","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"changelog":"changelog nock all -m > CHANGELOG.md","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","test":"node --harmony tests/test.js"},"_id":"nock@7.2.1","contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"url":"https://github.com/jagoda","name":"Jeffrey Jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"},{"url":"https://github.com/kelaban","name":"Keith Laban","email":"kelaban17@gmail.com"},{"email":"ruipmarinho@gmail.com","name":"Rui Marinho","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"_npmVersion":"2.14.7","devDependencies":{"tap":"^0.7.1","superagent":"^1.4.0","node-static":"^0.7.7","coveralls":"^2.11.2","browserify":"^12.0.1","zombie":"^4.2.1","request-promise":"^0.4.3","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","rimraf":"^2.3.2","request":"2.61.0","needle":"^0.7.1","restler":"3.2.2","restify":"^2.8.1","pre-commit":"0.0.9","jshint":"^2.5.6","istanbul":"^0.3.8","isomorphic-fetch":"^2.2.0"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"main":"./index","_shasum":"fa1d7c0bb397efb0b2330b080a62c5e18815ed75","_npmOperationalInternal":{"tmp":"tmp/nock-7.2.1.tgz_1455555627637_0.3692788614425808","host":"packages-9-west.internal.npmjs.com"},"description":"HTTP Server mocking for Node.js","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dependencies":{"chai":">=1.9.2 <4.0.0","qs":"^6.0.2","deep-equal":"^1.0.0","lodash":"^3.10.1","mkdirp":"^0.5.0","debug":"^2.2.0","propagate":"0.3.x","json-stringify-safe":"^5.0.1"},"dist":{"shasum":"fa1d7c0bb397efb0b2330b080a62c5e18815ed75","tarball":"https://registry.npmjs.org/nock/-/nock-7.2.1.tgz"},"homepage":"https://github.com/pgte/nock#readme","license":"MIT","repository":{"url":"git+ssh://git@github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"engines":["node >= 0.10.0"],"gitHead":"ccc1342ae7c2e66b9435e112a83170b3a622c5d2","directories":{}},"1.1.0":{"_shasum":"2c1244d120b504e1d21864fc5a9a466ad73d62aa","main":"./index","tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"license":"MIT","gitHead":"acb383c207260b044b13339756b7833e6dc5df6d","engines":["node >= 0.10.0"],"description":"HTTP Server mocking for Node.js","homepage":"https://github.com/pgte/nock","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-1.1.0.tgz","shasum":"2c1244d120b504e1d21864fc5a9a466ad73d62aa"},"dependencies":{"lodash":"2.4.1","debug":"^1.0.4","mkdirp":"^0.5.0","chai":"^1.9.2","propagate":"0.3.x"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"version":"1.1.0","_nodeVersion":"1.4.2","pre-commit":["jshint","test"],"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"},{"name":"ierceg","email":"ivan@softwaremarbles.com"}],"name":"nock","_from":".","_npmVersion":"2.6.1","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"},{"url":"https://github.com/kelaban","name":"Keith Laban","email":"kelaban17@gmail.com"}],"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"restify":"^2.8.1","restler":"3.2.2","needle":"^0.7.1","request":"2.51.0","tap":"*","superagent":"~0.15.7","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","jshint":"^2.5.6","pre-commit":"0.0.9"},"scripts":{"test":"node tests/test_common && node tests/test_intercept && node tests/test_aws_dynamo && node tests/test_back && node tests/test_https_allowunmocked && node tests/test_net_connect && node tests/test_nock_off && node tests/test_recorder && node tests/test_redirects && node tests/test_s3 && node tests/test_url_encoding","jshint":"jshint lib/*.js"},"_id":"nock@1.1.0","directories":{}},"0.56.0":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","_from":".","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"version":"0.56.0","pre-commit":["jshint","test"],"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"pre-commit":"0.0.9","jshint":"^2.5.6","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","tap":"*","superagent":"~0.15.7","request":"*","restify":"^2.8.1","needle":"^0.7.1","restler":"3.2.2"},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"},{"email":"kelaban17@gmail.com","name":"Keith Laban","url":"https://github.com/kelaban"}],"_npmVersion":"1.4.28","_id":"nock@0.56.0","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests","jshint":"jshint lib/*.js"},"_shasum":"29dbc1cdcb457d66f0cc7f96c7b294023924f2c3","main":"./index","gitHead":"bccc54dd5931a7c8f057ddb23fffa546b7dedbc2","engines":["node >= 0.10.0"],"license":"MIT","repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"homepage":"https://github.com/pgte/nock","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.56.0.tgz","shasum":"29dbc1cdcb457d66f0cc7f96c7b294023924f2c3"},"dependencies":{"propagate":"0.3.x","chai":"^1.9.2","mkdirp":"^0.5.0","debug":"^1.0.4","lodash":"2.4.1"},"description":"HTTP Server mocking for Node.js","directories":{}},"0.17.5":{"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"request":"*","tap":"*"},"_npmVersion":"1.2.17","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"}],"_id":"nock@0.17.5","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"bugs":{"url":"http://github.com/flatiron/nock/issues"},"name":"nock","_from":".","version":"0.17.5","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"engines":["node >= 0.4.10"],"repository":{"type":"git","url":"http://github.com/flatiron/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"dependencies":{"propagate":"0.2.x"},"dist":{"shasum":"fd96a0d0d511c7859f774e92d405bb95dba02db0","tarball":"https://registry.npmjs.org/nock/-/nock-0.17.5.tgz"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","main":"./index","directories":{}},"4.0.0":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","_from":".","version":"4.0.0","_nodeVersion":"4.2.3","pre-commit":["jshint","coverage"],"maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"email":"me@svenlito.com","name":"svnlto"}],"devDependencies":{"isomorphic-fetch":"^2.2.0","istanbul":"^0.3.8","jshint":"^2.5.6","pre-commit":"0.0.9","restler":"3.2.2","needle":"^0.7.1","restify":"^2.8.1","request":"2.61.0","rimraf":"^2.3.2","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","request-promise":"^0.4.3","zombie":"^4.2.1","browserify":"^12.0.1","node-static":"^0.7.7","coveralls":"^2.11.2","tap":"^0.7.1","superagent":"^1.4.0"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"_npmVersion":"2.14.7","contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"url":"https://github.com/jagoda","name":"Jeffrey Jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"url":"https://github.com/ruimarinho","name":"Rui Marinho","email":"ruipmarinho@gmail.com"},{"url":"https://github.com/DavidTPate","name":"David Pate","email":"davidtpate@gmail.com"},{"url":"https://github.com/matto1990","name":"Matt Oakes"}],"_id":"nock@4.0.0","scripts":{"changelog":"changelog nock all -m > CHANGELOG.md","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","test":"node --harmony tests/test.js"},"_shasum":"dbe65b25e87ac15655a512ceab6646750b84a077","main":"./index","gitHead":"c1ecbbfcb48a5bed56dae145a02a9971c8b7e9ca","engines":["node >= 0.10.0"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git+ssh://git@github.com/pgte/nock.git","type":"git"},"license":"MIT","dist":{"shasum":"dbe65b25e87ac15655a512ceab6646750b84a077","tarball":"https://registry.npmjs.org/nock/-/nock-4.0.0.tgz"},"homepage":"https://github.com/pgte/nock#readme","dependencies":{"lodash":"2.4.1","deep-equal":"^1.0.0","debug":"^2.2.0","mkdirp":"^0.5.0","chai":">=1.9.2 <4.0.0","propagate":"0.3.x","json-stringify-safe":"^5.0.1"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","directories":{}},"0.1.0":{"engines":["node >= 0.4.10"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"_engineSupported":true,"dependencies":{},"dist":{"shasum":"d1ec153ba4c4a180be10f3328048cb1eafacd0a8","tarball":"https://registry.npmjs.org/nock/-/nock-0.1.0.tgz"},"description":"HTTP Server mocking for Node.js","main":"./index","devDependencies":{"tap":"0.0.x"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"_npmVersion":"1.0.27","_id":"nock@0.1.0","scripts":{"test":"node_modules/.bin/tap tests"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","version":"0.1.0","_nodeVersion":"v0.4.11","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"_npmJsonOpts":{"file":"/Users/pedroteixeira/.npm/nock/0.1.0/package/package.json","serverjs":false,"wscript":false,"contributors":false},"_defaultsLoaded":true,"directories":{}},"0.32.3":{"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"}],"_npmVersion":"1.3.14","author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"needle":"^0.7.1","restify":"^2.8.1","request":"*","superagent":"~0.15.7","tap":"*"},"scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"_id":"nock@0.32.3","bugs":{"url":"http://github.com/pgte/nock/issues"},"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"}],"version":"0.32.3","_from":".","name":"nock","license":"MIT","repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"engines":["node >= 0.10.0"],"description":"HTTP Server mocking for Node.js","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dependencies":{"lodash":"2.4.1","debug":"^0.8.1","propagate":"0.2.x"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.32.3.tgz","shasum":"75277d31e34b26a69ab9fe750a2312d66bc0c6c4"},"homepage":"https://github.com/pgte/nock","main":"./index","directories":{}},"1.0.0":{"_shasum":"f3d87bf4dde01e0fdb4b852b689acb288627d5ff","main":"./index","gitHead":"0c75fd0bdab8570667feb7e1e468d3cb40b0d21a","engines":["node >= 0.10.0"],"license":"MIT","repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dist":{"shasum":"f3d87bf4dde01e0fdb4b852b689acb288627d5ff","tarball":"https://registry.npmjs.org/nock/-/nock-1.0.0.tgz"},"dependencies":{"chai":"^1.9.2","propagate":"0.3.x","lodash":"2.4.1","debug":"^1.0.4","mkdirp":"^0.5.0"},"homepage":"https://github.com/pgte/nock","description":"HTTP Server mocking for Node.js","bugs":{"url":"http://github.com/pgte/nock/issues"},"_from":".","name":"nock","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"_nodeVersion":"1.4.2","version":"1.0.0","pre-commit":["jshint","test"],"devDependencies":{"pre-commit":"0.0.9","jshint":"^2.5.6","tap":"*","superagent":"~0.15.7","request":"2.51.0","restify":"^2.8.1","needle":"^0.7.1","restler":"3.2.2","aws-sdk":"^2.0.15","hyperquest":"^0.3.0"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"},{"email":"kelaban17@gmail.com","name":"Keith Laban","url":"https://github.com/kelaban"}],"_npmVersion":"2.6.1","_id":"nock@1.0.0","scripts":{"jshint":"jshint lib/*.js","test":"node tests/test_common && node tests/test_intercept && node tests/test_aws_dynamo && node tests/test_back && node tests/test_https_allowunmocked && node tests/test_net_connect && node tests/test_nock_off && node tests/test_recorder && node tests/test_redirects && node tests/test_s3 && node tests/test_url_encoding"},"directories":{}},"0.8.2":{"main":"./index","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dist":{"shasum":"8b1dbf54db8ec02dc02f3d265c639158c386112f","tarball":"https://registry.npmjs.org/nock/-/nock-0.8.2.tgz"},"dependencies":{},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"_engineSupported":true,"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"name":"nock","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"_defaultsLoaded":true,"version":"0.8.2","_nodeVersion":"v0.4.11","bugs":{"url":"http://github.com/pgte/nock/issues"},"_id":"nock@0.8.2","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"devDependencies":{"tap":"0.0.x"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"}],"_npmVersion":"1.0.106","directories":{}},"0.11.4":{"_nodeVersion":"v0.6.11","version":"0.11.4","_defaultsLoaded":true,"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.11.4","optionalDependencies":{},"_npmVersion":"1.1.1","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"}],"devDependencies":{"tap":"0.2.x","request":"*"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"main":"./index","description":"HTTP Server mocking for Node.js","dependencies":{},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.11.4.tgz","shasum":"68c9c8586418cd184ed3139adda46d1590829431"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"_engineSupported":true,"engines":["node >= 0.4.10"],"directories":{}},"0.9.2":{"_id":"nock@0.9.2","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"devDependencies":{"tap":"0.2.x"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"optionalDependencies":{},"_npmVersion":"1.1.0-2","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"}],"name":"nock","version":"0.9.2","_nodeVersion":"v0.6.8","_defaultsLoaded":true,"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"bugs":{"url":"http://github.com/pgte/nock/issues"},"dependencies":{},"dist":{"shasum":"3e4e17e6ec24b89f11ec74e8b574d0e8677fa037","tarball":"https://registry.npmjs.org/nock/-/nock-0.9.2.tgz"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"_engineSupported":true,"main":"./index","directories":{}},"0.10.3":{"engines":["node >= 0.4.10"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"_engineSupported":true,"dependencies":{},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.10.3.tgz","shasum":"785764e7da6dc2355e7e1e328de356da1058ae00"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","main":"./index","devDependencies":{"request":"* ","tap":"0.2.x"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"_npmVersion":"1.1.1","optionalDependencies":{},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"}],"_id":"nock@0.10.3","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","_nodeVersion":"v0.6.11","version":"0.10.3","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"_defaultsLoaded":true,"directories":{}},"0.24.2":{"description":"HTTP Server mocking for Node.js","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dependencies":{"propagate":"0.2.x"},"dist":{"shasum":"d884d3bab693a011eff7d35fcdddf8d8f18fd5d6","tarball":"https://registry.npmjs.org/nock/-/nock-0.24.2.tgz"},"homepage":"https://github.com/pgte/nock","license":"MIT","repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"engines":["node >= 0.4.10"],"main":"./index","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.24.2","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"}],"_npmVersion":"1.3.14","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"superagent":"~0.15.7","tap":"*","request":"*"},"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"version":"0.24.2","_from":".","name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"directories":{}},"0.5.2":{"_npmVersion":"1.0.105","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"}],"devDependencies":{"tap":"0.0.x"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"scripts":{"test":"node_modules/.bin/tap tests"},"_id":"nock@0.5.2","bugs":{"url":"http://github.com/pgte/nock/issues"},"version":"0.5.2","_nodeVersion":"v0.4.12","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"_defaultsLoaded":true,"name":"nock","repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"_engineSupported":true,"engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","dependencies":{},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.5.2.tgz","shasum":"32852588ba4c644ebe4dbe10c59cbe9fd44dbbda"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"main":"./index","directories":{}},"1.2.0":{"license":"MIT","repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"gitHead":"e8496e59ff13b485c22c08fc67f2124fca6a89c3","engines":["node >= 0.10.0"],"description":"HTTP Server mocking for Node.js","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-1.2.0.tgz","shasum":"0f235eeec98aa6b630051d7b359c8787255e92f4"},"dependencies":{"lodash":"2.4.1","mkdirp":"^0.5.0","debug":"^1.0.4","chai":"^1.9.2","propagate":"0.3.x"},"homepage":"https://github.com/pgte/nock","_shasum":"0f235eeec98aa6b630051d7b359c8787255e92f4","main":"./index","contributors":[{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"}],"_npmVersion":"2.6.1","devDependencies":{"restler":"3.2.2","restify":"^2.8.1","needle":"^0.7.1","tap":"*","superagent":"~0.15.7","request":"2.51.0","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","jshint":"^2.5.6","pre-commit":"0.0.9"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"scripts":{"jshint":"jshint lib/*.js","test":"node tests/test_common && node tests/test_intercept && node tests/test_aws_dynamo && node tests/test_back && node tests/test_https_allowunmocked && node tests/test_net_connect && node tests/test_nock_off && node tests/test_recorder && node tests/test_redirects && node tests/test_s3 && node tests/test_url_encoding"},"_id":"nock@1.2.0","bugs":{"url":"http://github.com/pgte/nock/issues"},"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"name":"svnlto","email":"me@svenlito.com"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"_nodeVersion":"1.4.2","pre-commit":["jshint","test"],"version":"1.2.0","name":"nock","_from":".","directories":{}},"0.29.0":{"main":"./index","engines":["node >= 0.4.10"],"license":"MIT","repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dependencies":{"lodash":"2.4.1","propagate":"0.2.x"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.29.0.tgz","shasum":"57c6d669cdc321fc6cf6ce4d9a0cf4df1b9e3f2c"},"homepage":"https://github.com/pgte/nock","description":"HTTP Server mocking for Node.js","bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","_from":".","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"version":"0.29.0","devDependencies":{"superagent":"~0.15.7","request":"*","tap":"*"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"}],"_npmVersion":"1.3.14","_id":"nock@0.29.0","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"directories":{}},"0.10.7":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"_nodeVersion":"v0.6.11","version":"0.10.7","_defaultsLoaded":true,"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"name":"nock","optionalDependencies":{},"_npmVersion":"1.1.1","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"}],"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"tap":"0.2.x","request":"* "},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.10.7","main":"./index","repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"_engineSupported":true,"engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.10.7.tgz","shasum":"c7e095b6b690329ffea875129b60ed0af68dc9ec"},"dependencies":{},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"directories":{}},"0.29.1":{"_from":".","name":"nock","version":"0.29.1","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"bugs":{"url":"http://github.com/pgte/nock/issues"},"_id":"nock@0.29.1","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"devDependencies":{"tap":"*","superagent":"~0.15.7","request":"*"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"_npmVersion":"1.3.14","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"}],"main":"./index","dependencies":{"lodash":"2.4.1","debug":"^0.8.1","propagate":"0.2.x"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.29.1.tgz","shasum":"a2f3c4d129541ca9998ebac746e89e30c947300d"},"homepage":"https://github.com/pgte/nock","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","directories":{}},"2.1.0":{"_from":".","name":"nock","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"},{"name":"ierceg","email":"ivan@softwaremarbles.com"}],"_nodeVersion":"1.6.3","pre-commit":["jshint","coverage"],"version":"2.1.0","bugs":{"url":"http://github.com/pgte/nock/issues"},"_id":"nock@2.1.0","scripts":{"coveralls":"istanbul cover tests/test.js && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","test":"node tests/test.js","jshint":"jshint lib/*.js","coverage":"istanbul cover tests/test.js && istanbul check-coverage"},"devDependencies":{"aws-sdk":"^2.0.15","hyperquest":"^0.3.0","rimraf":"^2.3.2","request":"2.51.0","tap":"^0.7.1","superagent":"~0.15.7","restler":"3.2.2","coveralls":"^2.11.2","restify":"^2.8.1","needle":"^0.7.1","pre-commit":"0.0.9","jshint":"^2.5.6","istanbul":"^0.3.8"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"contributors":[{"url":"https://github.com/RomanGotsiy","name":"Roman Hotsiy"},{"url":"https://github.com/jagoda","name":"Jeffrey Jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"},{"url":"https://github.com/kelaban","name":"Keith Laban","email":"kelaban17@gmail.com"}],"_npmVersion":"2.7.4","main":"./index","_shasum":"a16baa9c80110cc30f4d9b3f167352dbfd24a5b4","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dist":{"shasum":"a16baa9c80110cc30f4d9b3f167352dbfd24a5b4","tarball":"https://registry.npmjs.org/nock/-/nock-2.1.0.tgz"},"homepage":"https://github.com/pgte/nock","dependencies":{"lodash":"2.4.1","mkdirp":"^0.5.0","debug":"^1.0.4","chai":"^1.9.2","propagate":"0.3.x"},"description":"HTTP Server mocking for Node.js","gitHead":"e786a390a7dbc6b238c092a5a4ba46cdcd3c5ad3","engines":["node >= 0.10.0"],"license":"MIT","repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"directories":{}},"2.18.0-alpha.1":{"_shasum":"8ca67bbb62a1e740bee5dcbf047cdb01ea51abcb","main":"./index","repository":{"type":"git","url":"git+ssh://git@github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","gitHead":"647d491131746be7baa702edcdde686c8acbd1d2","engines":["node >= 0.10.0"],"description":"HTTP Server mocking for Node.js","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-2.18.0-alpha.1.tgz","shasum":"8ca67bbb62a1e740bee5dcbf047cdb01ea51abcb"},"dependencies":{"chai":">=1.9.2 <4.0.0","propagate":"0.3.x","debug":"^1.0.4","mkdirp":"^0.5.0","lodash":"2.4.1","deep-equal":"^1.0.0"},"homepage":"https://github.com/pgte/nock#readme","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"_nodeVersion":"5.0.0","version":"2.18.0-alpha.1","pre-commit":["jshint","coverage"],"maintainers":[{"email":"ivan@softwaremarbles.com","name":"ierceg"},{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"name":"nock","_from":".","_npmVersion":"3.3.6","contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"url":"https://github.com/ruimarinho","email":"ruipmarinho@gmail.com","name":"Rui Marinho"},{"email":"davidtpate@gmail.com","name":"David Pate","url":"https://github.com/DavidTPate"},{"url":"https://github.com/matto1990","name":"Matt Oakes"}],"devDependencies":{"node-static":"^0.7.7","coveralls":"^2.11.2","tap":"^0.7.1","superagent":"~0.15.7","request-promise":"^0.4.3","browserify":"^12.0.1","zombie":"^4.2.1","restify":"^2.8.1","needle":"^0.7.1","restler":"3.2.2","request":"2.61.0","rimraf":"^2.3.2","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","istanbul":"^0.3.8","pre-commit":"0.0.9","jshint":"^2.5.6"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"scripts":{"jshint":"jshint lib/*.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","test":"node --harmony tests/test.js","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"},"_id":"nock@2.18.0-alpha.1","directories":{}},"1.6.1":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"_from":".","name":"nock","pre-commit":["jshint","coverage"],"_nodeVersion":"0.12.2","version":"1.6.1","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"tap":"*","superagent":"~0.15.7","request":"2.51.0","restler":"3.2.2","coveralls":"^2.11.2","restify":"^2.8.1","needle":"^0.7.1","hyperquest":"^0.3.0","aws-sdk":"^2.0.15","rimraf":"^2.3.2","istanbul":"^0.3.8","jshint":"^2.5.6","pre-commit":"0.0.9"},"_npmVersion":"2.7.4","contributors":[{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"},{"email":"kelaban17@gmail.com","name":"Keith Laban","url":"https://github.com/kelaban"}],"_id":"nock@1.6.1","scripts":{"coverage":"istanbul cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","test":"node tests/test.js","coveralls":"istanbul cover tests/test.js && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"},"_shasum":"1e6830dd80576195315f21f7e60791c4563d8de6","main":"./index","engines":["node >= 0.10.0"],"gitHead":"a7c9b1f9f9618e32496efbf5deec0b27a1cc38bd","tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"license":"MIT","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-1.6.1.tgz","shasum":"1e6830dd80576195315f21f7e60791c4563d8de6"},"homepage":"https://github.com/pgte/nock","dependencies":{"chai":"^1.9.2","propagate":"0.3.x","debug":"^1.0.4","mkdirp":"^0.5.0","lodash":"2.4.1"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","directories":{}},"0.33.0":{"_shasum":"f16c8ba7cee4ddbdf4918f360870c74ff5631963","main":"./index","engines":["node >= 0.10.0"],"license":"MIT","repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.33.0.tgz","shasum":"f16c8ba7cee4ddbdf4918f360870c74ff5631963"},"dependencies":{"debug":"^0.8.1","lodash":"2.4.1","propagate":"0.2.x"},"homepage":"https://github.com/pgte/nock","description":"HTTP Server mocking for Node.js","bugs":{"url":"http://github.com/pgte/nock/issues"},"_from":".","name":"nock","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"}],"version":"0.33.0","devDependencies":{"request":"*","superagent":"~0.15.7","tap":"*","needle":"^0.7.1","restify":"^2.8.1"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"}],"_npmVersion":"1.4.9","_id":"nock@0.33.0","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"directories":{}},"2.17.0":{"_shasum":"b2cba422a3ae9d9f95f682888c4b20e798c8bc7f","main":"./index","license":"MIT","repository":{"url":"git+ssh://git@github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"gitHead":"a7596a9593df2ddff1443ab90403f653c345fb05","engines":["node >= 0.10.0"],"description":"HTTP Server mocking for Node.js","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dist":{"shasum":"b2cba422a3ae9d9f95f682888c4b20e798c8bc7f","tarball":"https://registry.npmjs.org/nock/-/nock-2.17.0.tgz"},"dependencies":{"chai":">=1.9.2 <4.0.0","propagate":"0.3.x","debug":"^1.0.4","mkdirp":"^0.5.0","deep-equal":"^1.0.0","lodash":"2.4.1"},"homepage":"https://github.com/pgte/nock#readme","bugs":{"url":"http://github.com/pgte/nock/issues"},"maintainers":[{"email":"ivan@softwaremarbles.com","name":"ierceg"},{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"name":"svnlto","email":"me@svenlito.com"}],"pre-commit":["jshint","coverage"],"_nodeVersion":"0.12.7","version":"2.17.0","_from":".","name":"nock","contributors":[{"url":"https://github.com/RomanGotsiy","name":"Roman Hotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"email":"ivan@softwaremarbles.com","name":"Ivan Erceg","url":"https://github.com/ierceg"},{"url":"https://github.com/kelaban","name":"Keith Laban","email":"kelaban17@gmail.com"},{"email":"ruipmarinho@gmail.com","name":"Rui Marinho","url":"https://github.com/ruimarinho"},{"url":"https://github.com/DavidTPate","name":"David Pate","email":"davidtpate@gmail.com"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"_npmVersion":"2.11.3","devDependencies":{"rimraf":"^2.3.2","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","restify":"^2.8.1","restler":"3.2.2","coveralls":"^2.11.2","needle":"^0.7.1","superagent":"~0.15.7","tap":"^0.7.1","request":"2.61.0","pre-commit":"0.0.9","jshint":"^2.5.6","request-promise":"^0.4.3","istanbul":"^0.3.8"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"scripts":{"coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","jshint":"jshint lib/*.js","coverage":"istanbul cover tests/test.js && istanbul check-coverage","test":"node tests/test.js"},"_id":"nock@2.17.0","directories":{}},"0.32.0":{"_id":"nock@0.32.0","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"needle":"^0.7.1","superagent":"~0.15.7","request":"*","tap":"*"},"_npmVersion":"1.3.14","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"}],"name":"nock","_from":".","version":"0.32.0","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"bugs":{"url":"http://github.com/pgte/nock/issues"},"dist":{"shasum":"82e6bc8e57adf5328321a9b9d71e70b771c6b2f2","tarball":"https://registry.npmjs.org/nock/-/nock-0.32.0.tgz"},"homepage":"https://github.com/pgte/nock","dependencies":{"propagate":"0.2.x","lodash":"2.4.1","debug":"^0.8.1"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","main":"./index","directories":{}},"5.0.0":{"scripts":{"test":"node --harmony tests/test.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","changelog":"changelog nock all -m > CHANGELOG.md"},"_id":"nock@5.0.0","_npmVersion":"2.14.7","contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"url":"https://github.com/ghiden","name":"Hidenari Nozaki"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"},{"url":"https://github.com/kelaban","name":"Keith Laban","email":"kelaban17@gmail.com"},{"email":"ruipmarinho@gmail.com","name":"Rui Marinho","url":"https://github.com/ruimarinho"},{"url":"https://github.com/DavidTPate","email":"davidtpate@gmail.com","name":"David Pate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"superagent":"^1.4.0","tap":"^0.7.1","node-static":"^0.7.7","coveralls":"^2.11.2","browserify":"^12.0.1","zombie":"^4.2.1","request-promise":"^0.4.3","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","rimraf":"^2.3.2","request":"2.61.0","needle":"^0.7.1","restify":"^2.8.1","restler":"3.2.2","pre-commit":"0.0.9","jshint":"^2.5.6","istanbul":"^0.3.8","isomorphic-fetch":"^2.2.0"},"_nodeVersion":"4.2.3","version":"5.0.0","pre-commit":["jshint","coverage"],"maintainers":[{"email":"ivan@softwaremarbles.com","name":"ierceg"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"email":"me@svenlito.com","name":"svnlto"}],"name":"nock","_from":".","bugs":{"url":"http://github.com/pgte/nock/issues"},"description":"HTTP Server mocking for Node.js","homepage":"https://github.com/pgte/nock#readme","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-5.0.0.tgz","shasum":"d2c7cdc3581d2fa4ea9cea59d6df2a71ab8339d5"},"dependencies":{"chai":">=1.9.2 <4.0.0","json-stringify-safe":"^5.0.1","propagate":"0.3.x","deep-equal":"^1.0.0","lodash":"^3.10.1","mkdirp":"^0.5.0","debug":"^2.2.0"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"git+ssh://git@github.com/pgte/nock.git"},"license":"MIT","engines":["node >= 0.10.0"],"gitHead":"beb9bc6c3c48c4d954291da1cc3ca9fe7feb6164","main":"./index","_shasum":"d2c7cdc3581d2fa4ea9cea59d6df2a71ab8339d5","directories":{}},"0.17.0":{"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"}],"_npmVersion":"1.2.15","devDependencies":{"tap":"*","request":"*"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.17.0","bugs":{"url":"http://github.com/flatiron/nock/issues"},"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"version":"0.17.0","_from":".","name":"nock","repository":{"url":"http://github.com/flatiron/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dependencies":{"propagate":"0.2.x"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.17.0.tgz","shasum":"611d6b3b46c4af7277c84eda545ef1e66b673ee1"},"main":"./index","directories":{}},"0.26.0":{"main":"./index","license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dependencies":{"propagate":"0.2.x"},"dist":{"shasum":"abcc66013fe96aabf6f622762db06e704f47423c","tarball":"https://registry.npmjs.org/nock/-/nock-0.26.0.tgz"},"homepage":"https://github.com/pgte/nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"version":"0.26.0","_from":".","name":"nock","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"}],"_npmVersion":"1.3.14","devDependencies":{"superagent":"~0.15.7","tap":"*","request":"*"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.26.0","directories":{}},"0.15.2":{"main":"./index","dependencies":{"propagate":"0.2.x"},"dist":{"shasum":"3c32c1ae6012cd398eb9240a059244b59508dd8d","tarball":"https://registry.npmjs.org/nock/-/nock-0.15.2.tgz"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"repository":{"type":"git","url":"http://github.com/flatiron/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"name":"nock","version":"0.15.2","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"bugs":{"url":"http://github.com/flatiron/nock/issues"},"_id":"nock@0.15.2","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"devDependencies":{"request":"*","tap":"0.4.x"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"_npmVersion":"1.1.65","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"}],"directories":{}},"2.12.0":{"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"name":"svnlto","email":"me@svenlito.com"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"version":"2.12.0","pre-commit":["jshint","coverage"],"name":"nock","_from":".","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"coverage":"istanbul cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","test":"node tests/test.js","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"},"_id":"nock@2.12.0","contributors":[{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"url":"https://github.com/ksheedlo","name":"Ken Sheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"},{"email":"kelaban17@gmail.com","name":"Keith Laban","url":"https://github.com/kelaban"}],"_npmVersion":"1.4.28","devDependencies":{"coveralls":"^2.11.2","restler":"3.2.2","restify":"^2.8.1","needle":"^0.7.1","superagent":"~0.15.7","tap":"^0.7.1","request":"2.61.0","rimraf":"^2.3.2","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","istanbul":"^0.3.8","pre-commit":"0.0.9","jshint":"^2.5.6"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"main":"./index","_shasum":"3e75438872f809f912c6ebbfc9c7a14b6ceb6b7b","description":"HTTP Server mocking for Node.js","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"homepage":"https://github.com/pgte/nock","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-2.12.0.tgz","shasum":"3e75438872f809f912c6ebbfc9c7a14b6ceb6b7b"},"dependencies":{"chai":">=1.9.2 <4.0.0","propagate":"0.3.x","mkdirp":"^0.5.0","debug":"^1.0.4","deep-equal":"^1.0.0","lodash":"2.4.1"},"license":"MIT","repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"gitHead":"8ebeae8e934709cdc51582d189eff4c96d2c655e","engines":["node >= 0.10.0"],"directories":{}},"2.9.1":{"main":"./index","_shasum":"5f89c399c9792cdad3492980efefda7546130928","description":"HTTP Server mocking for Node.js","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"homepage":"https://github.com/pgte/nock#readme","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-2.9.1.tgz","shasum":"5f89c399c9792cdad3492980efefda7546130928"},"dependencies":{"propagate":"0.3.x","chai":">=1.9.2 <3.0.0","lodash":"2.4.1","deep-equal":"^1.0.0","mkdirp":"^0.5.0","debug":"^1.0.4"},"license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"git+ssh://git@github.com/pgte/nock.git"},"gitHead":"adca6c3d1c42bf9fb7d55c993a0a9e40ee86aea6","engines":["node >= 0.10.0"],"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"version":"2.9.1","_nodeVersion":"0.12.3","pre-commit":["jshint","coverage"],"name":"nock","_from":".","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"test":"node tests/test.js","jshint":"jshint lib/*.js","coverage":"istanbul cover tests/test.js && istanbul check-coverage","coveralls":"istanbul cover tests/test.js && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"},"_id":"nock@2.9.1","contributors":[{"url":"https://github.com/RomanGotsiy","name":"Roman Hotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"url":"https://github.com/benurb","name":"Benjamin Urban"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"email":"kelaban17@gmail.com","name":"Keith Laban","url":"https://github.com/kelaban"}],"_npmVersion":"2.9.1","devDependencies":{"restify":"^2.8.1","restler":"3.2.2","needle":"^0.7.1","coveralls":"^2.11.2","request":"2.51.0","tap":"^0.7.1","superagent":"~0.15.7","rimraf":"^2.3.2","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","istanbul":"^0.3.8","pre-commit":"0.0.9","jshint":"^2.5.6"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"directories":{}},"2.18.1":{"devDependencies":{"node-static":"^0.7.7","coveralls":"^2.11.2","superagent":"~0.15.7","tap":"^0.7.1","request-promise":"^0.4.3","browserify":"^12.0.1","zombie":"^4.2.1","needle":"^0.7.1","restify":"^2.8.1","restler":"3.2.2","request":"2.61.0","rimraf":"^2.3.2","aws-sdk":"^2.0.15","hyperquest":"^0.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.3.8","pre-commit":"0.0.9","jshint":"^2.5.6"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"_npmVersion":"2.11.3","contributors":[{"url":"https://github.com/RomanGotsiy","name":"Roman Hotsiy"},{"url":"https://github.com/jagoda","name":"Jeffrey Jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"url":"https://github.com/douglaseggleton","name":"Douglas Eggleton"},{"url":"https://github.com/jfromaniello","name":"José F. Romaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"},{"email":"kelaban17@gmail.com","name":"Keith Laban","url":"https://github.com/kelaban"},{"email":"ruipmarinho@gmail.com","name":"Rui Marinho","url":"https://github.com/ruimarinho"},{"url":"https://github.com/DavidTPate","name":"David Pate","email":"davidtpate@gmail.com"},{"url":"https://github.com/matto1990","name":"Matt Oakes"}],"_id":"nock@2.18.1","scripts":{"coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","test":"node --harmony tests/test.js","jshint":"jshint lib/*.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"_from":".","name":"nock","_nodeVersion":"0.12.7","version":"2.18.1","pre-commit":["jshint","coverage"],"maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"gitHead":"68f4aa752c3d6dd916b3ffda86731c3639796450","engines":["node >= 0.10.0"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"git+ssh://git@github.com/pgte/nock.git"},"license":"MIT","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-2.18.1.tgz","shasum":"9a84dcabab9f4d2f1e0e311a8d13566622a892a8"},"dependencies":{"propagate":"0.3.x","chai":">=1.9.2 <4.0.0","debug":"^1.0.4","mkdirp":"^0.5.0","deep-equal":"^1.0.0","lodash":"2.4.1"},"homepage":"https://github.com/pgte/nock#readme","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","_shasum":"9a84dcabab9f4d2f1e0e311a8d13566622a892a8","main":"./index","directories":{}},"0.42.3":{"_id":"nock@0.42.3","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"restify":"^2.8.1","needle":"^0.7.1","request":"*","tap":"*","superagent":"~0.15.7","hyperquest":"^0.3.0"},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"}],"_npmVersion":"1.4.14","name":"nock","_from":".","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"version":"0.42.3","bugs":{"url":"http://github.com/pgte/nock/issues"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"homepage":"https://github.com/pgte/nock","dist":{"shasum":"f9714ba5439c0a660548d8faee0aac5b9abcab33","tarball":"https://registry.npmjs.org/nock/-/nock-0.42.3.tgz"},"dependencies":{"propagate":"0.2.x","lodash":"2.4.1","debug":"^0.8.1"},"description":"HTTP Server mocking for Node.js","gitHead":"3e2372689533e6c54e0a16717488459264c20755","engines":["node >= 0.10.0"],"license":"MIT","repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"main":"./index","_shasum":"f9714ba5439c0a660548d8faee0aac5b9abcab33","directories":{}},"0.0.1":{"devDependencies":{"tap":"0.0.x"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"_npmVersion":"1.0.27","_id":"nock@0.0.1","scripts":{"test":"node_modules/.bin/tap tests"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","_npmJsonOpts":{"file":"/Users/pedroteixeira/.npm/nock/0.0.1/package/package.json","serverjs":false,"wscript":false,"contributors":false},"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"_defaultsLoaded":true,"version":"0.0.1","_nodeVersion":"v0.4.11","engines":["node >= 0.4.10"],"_engineSupported":true,"repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"dependencies":{},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.0.1.tgz","shasum":"8bd3da5d96839e7bef355eb411eaea35f9027062"},"description":"HTTP Server mocking for Node.js","main":"./index","directories":{}},"1.2.1":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","_from":".","pre-commit":["jshint","coverage"],"_nodeVersion":"1.4.2","version":"1.2.1","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"ierceg","email":"ivan@softwaremarbles.com"}],"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"hyperquest":"^0.3.0","aws-sdk":"^2.0.15","restler":"3.2.2","restify":"^2.8.1","needle":"^0.7.1","coveralls":"^2.11.2","superagent":"~0.15.7","tap":"*","request":"2.51.0","jshint":"^2.5.6","pre-commit":"0.0.9","istanbul":"^0.3.8"},"_npmVersion":"2.6.1","contributors":[{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"url":"https://github.com/justincy","name":"Justin"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"},{"url":"https://github.com/kelaban","email":"kelaban17@gmail.com","name":"Keith Laban"}],"_id":"nock@1.2.1","scripts":{"test":"node tests/test.js","coverage":"istanbul cover tests/test.js && istanbul check-coverage","jshint":"jshint lib/*.js","coveralls":"istanbul cover tests/test.js && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"},"_shasum":"0bd14ee48c5c6bf51489a3792a44306053f035cf","main":"./index","gitHead":"8fee3ee9916d681a55c9880424dcbccc33b3cf39","engines":["node >= 0.10.0"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"license":"MIT","dist":{"shasum":"0bd14ee48c5c6bf51489a3792a44306053f035cf","tarball":"https://registry.npmjs.org/nock/-/nock-1.2.1.tgz"},"homepage":"https://github.com/pgte/nock","dependencies":{"debug":"^1.0.4","mkdirp":"^0.5.0","lodash":"2.4.1","propagate":"0.3.x","chai":"^1.9.2"},"_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"description":"HTTP Server mocking for Node.js","directories":{}},"0.13.5":{"_npmVersion":"1.1.63","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"}],"devDependencies":{"tap":"0.2.x","request":"*"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.13.5","bugs":{"url":"http://github.com/flatiron/nock/issues"},"version":"0.13.5","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"name":"nock","repository":{"url":"http://github.com/flatiron/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"engines":["node >= 0.4.10"],"description":"HTTP Server mocking for Node.js","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.13.5.tgz","shasum":"6d7a06f993ae3f7a1048c681c6a5a5a659c77f87"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"main":"./index","directories":{}},"0.46.1":{"main":"./index","_shasum":"d6536e96c9f256aa55484a51d5bec32e0f539092","description":"HTTP Server mocking for Node.js","homepage":"https://github.com/pgte/nock","dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.46.1.tgz","shasum":"d6536e96c9f256aa55484a51d5bec32e0f539092"},"dependencies":{"debug":"^1.0.4","lodash":"2.4.1","propagate":"0.3.x"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"license":"MIT","gitHead":"6e4c4a78fb9c5ac2549d5b96b7a94fe3d35f04fd","engines":["node >= 0.10.0"],"version":"0.46.1","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"}],"name":"nock","_from":".","bugs":{"url":"http://github.com/pgte/nock/issues"},"scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"_id":"nock@0.46.1","_npmVersion":"1.4.21","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"}],"devDependencies":{"hyperquest":"^0.3.0","aws-sdk":"^2.0.15","restify":"^2.8.1","needle":"^0.7.1","tap":"*","superagent":"~0.15.7","request":"*"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"directories":{}},"0.19.0":{"_from":".","name":"nock","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"version":"0.19.0","bugs":{"url":"http://github.com/flatiron/nock/issues"},"_id":"nock@0.19.0","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"request":"*","tap":"*"},"contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"}],"_npmVersion":"1.2.32","main":"./index","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dist":{"shasum":"f8fc67a38c8313b267c8c10e0e49da23493d66bc","tarball":"https://registry.npmjs.org/nock/-/nock-0.19.0.tgz"},"dependencies":{"propagate":"0.2.x"},"description":"HTTP Server mocking for Node.js","engines":["node >= 0.4.10"],"tags":["Mock","HTTP","testing","isolation"],"repository":{"type":"git","url":"http://github.com/flatiron/nock.git"},"directories":{}},"0.44.2":{"description":"HTTP Server mocking for Node.js","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"dist":{"shasum":"f0a6832098fd95df43087c1026b26f938a13e510","tarball":"https://registry.npmjs.org/nock/-/nock-0.44.2.tgz"},"dependencies":{"propagate":"0.2.x","lodash":"2.4.1","debug":"^0.8.1"},"homepage":"https://github.com/pgte/nock","license":"MIT","tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"gitHead":"f8e0a68f0c35ee6a5e2fbb09f29018a558231811","engines":["node >= 0.10.0"],"main":"./index","_shasum":"f0a6832098fd95df43087c1026b26f938a13e510","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"_id":"nock@0.44.2","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"}],"_npmVersion":"1.4.21","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"restify":"^2.8.1","needle":"^0.7.1","superagent":"~0.15.7","tap":"*","request":"*","hyperquest":"^0.3.0"},"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"name":"svnlto","email":"me@svenlito.com"}],"version":"0.44.2","name":"nock","_from":".","bugs":{"url":"http://github.com/pgte/nock/issues"},"directories":{}},"0.44.3":{"scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests"},"_id":"nock@0.44.3","_npmVersion":"1.4.21","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","name":"Ivan Erceg","email":"ivan@softwaremarbles.com"}],"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"needle":"^0.7.1","restify":"^2.8.1","request":"*","tap":"*","superagent":"~0.15.7","hyperquest":"^0.3.0"},"version":"0.44.3","maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"name":"svnlto","email":"me@svenlito.com"}],"_from":".","name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"description":"HTTP Server mocking for Node.js","homepage":"https://github.com/pgte/nock","dist":{"shasum":"eb2ea2b4085914cc07b99e2a14b2d95f28175819","tarball":"https://registry.npmjs.org/nock/-/nock-0.44.3.tgz"},"dependencies":{"propagate":"0.2.x","lodash":"2.4.1","debug":"^0.8.1"},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"repository":{"type":"git","url":"http://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","gitHead":"3e98c1994e68fb3247bfcc5c352d5c77401b5035","engines":["node >= 0.10.0"],"main":"./index","_shasum":"eb2ea2b4085914cc07b99e2a14b2d95f28175819","directories":{}},"0.1.5":{"engines":["node >= 0.4.10"],"_engineSupported":true,"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"dependencies":{},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.1.5.tgz","shasum":"f0818c6f5faec336ff63dc6f5291ff0108f7fe20"},"description":"HTTP Server mocking for Node.js","main":"./index","author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"tap":"0.0.x"},"_npmVersion":"1.0.27","_id":"nock@0.1.5","scripts":{"test":"node_modules/.bin/tap tests"},"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","_defaultsLoaded":true,"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"_npmJsonOpts":{"serverjs":false,"wscript":false,"file":"/Users/pedroteixeira/.npm/nock/0.1.5/package/package.json","contributors":false},"version":"0.1.5","_nodeVersion":"v0.4.11","directories":{}},"0.9.3":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"name":"nock","version":"0.9.3","_nodeVersion":"v0.6.8","maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"_defaultsLoaded":true,"devDependencies":{"tap":"0.2.x"},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"optionalDependencies":{},"_npmVersion":"1.1.0-2","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"}],"_id":"nock@0.9.3","scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"main":"./index","engines":["node >= 0.4.10"],"repository":{"type":"git","url":"git://github.com/pgte/nock.git"},"tags":["Mock","HTTP","testing","isolation"],"_engineSupported":true,"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.9.3.tgz","shasum":"6a253182aec005128158af2bec57427af5f11f58"},"dependencies":{},"_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","directories":{}},"0.59.1":{"main":"./index","_shasum":"71c0363d72d27726cdea7de00450ba2610aa3e8a","dependencies":{"lodash":"2.4.1","debug":"^1.0.4","mkdirp":"^0.5.0","chai":"^1.9.2","propagate":"0.3.x"},"dist":{"shasum":"71c0363d72d27726cdea7de00450ba2610aa3e8a","tarball":"https://registry.npmjs.org/nock/-/nock-0.59.1.tgz"},"homepage":"https://github.com/pgte/nock","_npmUser":{"email":"pedro.teixeira@gmail.com","name":"pgte"},"description":"HTTP Server mocking for Node.js","gitHead":"efa75a8b0de274472cb971511b99ed0b293aba3f","engines":["node >= 0.10.0"],"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"tags":["Mock","HTTP","testing","isolation"],"license":"MIT","_from":".","name":"nock","version":"0.59.1","pre-commit":["jshint","test"],"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"bugs":{"url":"http://github.com/pgte/nock/issues"},"_id":"nock@0.59.1","scripts":{"test":"node node_modules/tap/bin/tap.js --dd tests","jshint":"jshint lib/*.js"},"author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"devDependencies":{"pre-commit":"0.0.9","jshint":"^2.5.6","request":"2.51.0","tap":"*","superagent":"~0.15.7","restler":"3.2.2","restify":"^2.8.1","needle":"^0.7.1","aws-sdk":"^2.0.15","hyperquest":"^0.3.0"},"_npmVersion":"1.4.28","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"email":"kelaban17@gmail.com","name":"Keith Laban","url":"https://github.com/kelaban"}],"directories":{}},"0.13.3":{"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.13.3","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"}],"optionalDependencies":{},"_npmVersion":"1.1.16","author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"request":"*","tap":"0.2.x"},"maintainers":[{"name":"pgte","email":"pedro.teixeira@gmail.com"}],"_defaultsLoaded":true,"version":"0.13.3","_nodeVersion":"v0.6.15","name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"description":"HTTP Server mocking for Node.js","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dependencies":{},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.13.3.tgz","shasum":"b715ebe1a77d7ed8095d1e8b0a49e994228e49fe"},"_engineSupported":true,"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"engines":["node >= 0.4.10"],"main":"./index","directories":{}},"0.13.2":{"scripts":{"test":"node node_modules/tap/bin/tap.js tests"},"_id":"nock@0.13.2","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"}],"_npmVersion":"1.1.16","optionalDependencies":{},"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"request":"*","tap":"0.2.x"},"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"}],"_defaultsLoaded":true,"version":"0.13.2","_nodeVersion":"v0.6.15","name":"nock","bugs":{"url":"http://github.com/pgte/nock/issues"},"description":"HTTP Server mocking for Node.js","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"dist":{"shasum":"f378d2dc5a2adcb277b48e50571bfbb7624ef316","tarball":"https://registry.npmjs.org/nock/-/nock-0.13.2.tgz"},"dependencies":{},"_engineSupported":true,"tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"git://github.com/pgte/nock.git","type":"git"},"engines":["node >= 0.4.10"],"main":"./index","directories":{}},"0.52.1":{"bugs":{"url":"http://github.com/pgte/nock/issues"},"version":"0.52.1","pre-commit":["jshint","test"],"maintainers":[{"email":"pedro.teixeira@gmail.com","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"}],"_from":".","name":"nock","_npmVersion":"1.4.28","contributors":[{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"email":"bacchusrx@eightstar.ca","name":"bacchusrx"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"email":"contact@tinogomes.com","name":"Celestino Gomes"},{"name":"David Rousselie"},{"name":"spenceralger"},{"url":"https://github.com/ierceg","email":"ivan@softwaremarbles.com","name":"Ivan Erceg"}],"author":{"email":"pedro.teixeira@gmail.com","name":"Pedro Teixeira"},"devDependencies":{"aws-sdk":"^2.0.15","hyperquest":"^0.3.0","superagent":"~0.15.7","tap":"*","request":"*","needle":"^0.7.1","restify":"^2.8.1","pre-commit":"0.0.9","jshint":"^2.5.6"},"scripts":{"jshint":"jshint lib/*.js","test":"node node_modules/tap/bin/tap.js --dd tests"},"_id":"nock@0.52.1","_shasum":"96b88e153af94b976ad22286837e209d6255fd03","main":"./index","tags":["Mock","HTTP","testing","isolation"],"repository":{"url":"http://github.com/pgte/nock.git","type":"git"},"license":"MIT","gitHead":"999eabcff6373876326f526249482953b04f2eb0","engines":["node >= 0.10.0"],"description":"HTTP Server mocking for Node.js","dependencies":{"debug":"^1.0.4","lodash":"2.4.1","propagate":"0.3.x"},"dist":{"tarball":"https://registry.npmjs.org/nock/-/nock-0.52.1.tgz","shasum":"96b88e153af94b976ad22286837e209d6255fd03"},"homepage":"https://github.com/pgte/nock","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"directories":{}},"7.7.2":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"7.7.2","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 0.10.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^3.10.1","mkdirp":"^0.5.0","propagate":"0.3.x","qs":"^6.0.2"},"devDependencies":{"aws-sdk":"^2.0.15","browserify":"^12.0.1","coveralls":"^2.11.2","hyperquest":"^0.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.3.8","jshint":"^2.5.6","needle":"^0.7.1","node-static":"^0.7.7","pre-commit":"0.0.9","request":"2.61.0","request-promise":"^0.4.3","restify":"^2.8.1","restler":"3.2.2","rimraf":"^2.3.2","superagent":"^1.4.0","tap":"^0.7.1","zombie":"^4.2.1"},"scripts":{"test":"node --harmony tests/test.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","jshint":"jshint lib/*.js","changelog":"changelog nock all -m > CHANGELOG.md"},"pre-commit":["jshint","coverage"],"license":"MIT","gitHead":"646dfd2ce9b14afa495b0e857d55e09665583f4a","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@7.7.2","_shasum":"e0a198ddacf69b2a8cf79afdf776ccf72209f4ab","_from":".","_npmVersion":"2.14.7","_nodeVersion":"4.2.3","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"maintainers":[{"email":"ivan@softwaremarbles.com","name":"ierceg"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"dist":{"shasum":"e0a198ddacf69b2a8cf79afdf776ccf72209f4ab","tarball":"https://registry.npmjs.org/nock/-/nock-7.7.2.tgz"},"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/nock-7.7.2.tgz_1458946657241_0.09965665731579065"},"directories":{}},"7.7.3":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"7.7.3","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 0.10.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^3.10.1","mkdirp":"^0.5.0","propagate":"0.3.x","qs":"^6.0.2"},"devDependencies":{"aws-sdk":"^2.0.15","browserify":"^12.0.1","coveralls":"^2.11.2","hyperquest":"^0.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.3.8","jshint":"^2.5.6","needle":"^0.7.1","node-static":"^0.7.7","pre-commit":"0.0.9","request":"2.61.0","request-promise":"^0.4.3","restify":"^2.8.1","restler":"3.2.2","rimraf":"^2.3.2","superagent":"^1.4.0","tap":"^0.7.1","zombie":"^4.2.1"},"scripts":{"test":"node --harmony tests/test.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","jshint":"jshint lib/*.js","changelog":"changelog nock all -m > CHANGELOG.md"},"pre-commit":["jshint","coverage"],"license":"MIT","gitHead":"5d8e77dca8586c48bc4edfb3b5e6f845d923a579","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@7.7.3","_shasum":"d0600980a4443edf6e50b5ed3314602cb7ccc489","_from":".","_npmVersion":"2.14.7","_nodeVersion":"4.2.3","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"maintainers":[{"email":"ivan@softwaremarbles.com","name":"ierceg"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"dist":{"shasum":"d0600980a4443edf6e50b5ed3314602cb7ccc489","tarball":"https://registry.npmjs.org/nock/-/nock-7.7.3.tgz"},"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/nock-7.7.3.tgz_1459768612090_0.38043208117596805"},"directories":{}},"8.0.0":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"8.0.0","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 0.10.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.8.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2"},"devDependencies":{"async":"^1.5.2","aws-sdk":"^2.0.15","browserify":"^13.0.0","coveralls":"^2.11.2","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","jshint":"^2.5.6","needle":"^1.0.0","node-static":"^0.7.7","pre-commit":"1.1.2","request":"2.70.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","superagent":"^1.4.0","tap":"^5.7.0","zombie":"^4.2.1"},"scripts":{"test":"node --harmony tests/test.js","coverage":"node --harmony node_modules/istanbul/lib/cli.js cover tests/test.js && istanbul check-coverage","coveralls":"cat ./coverage/lcov.info | coveralls && rm -rf ./coverage","jshint":"jshint lib/*.js","changelog":"changelog nock all -m > CHANGELOG.md"},"pre-commit":["jshint","coverage"],"license":"MIT","gitHead":"c7b156ab1b81359855ea42eb07acc181f5595d77","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@8.0.0","_shasum":"f86d676568c73a3bb2144ebc80791d447bb334d2","_from":".","_npmVersion":"2.14.7","_nodeVersion":"4.2.3","_npmUser":{"name":"pgte","email":"pedro.teixeira@gmail.com"},"maintainers":[{"email":"ivan@softwaremarbles.com","name":"ierceg"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"}],"dist":{"shasum":"f86d676568c73a3bb2144ebc80791d447bb334d2","tarball":"https://registry.npmjs.org/nock/-/nock-8.0.0.tgz"},"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/nock-8.0.0.tgz_1459936469097_0.26148671470582485"},"directories":{}},"8.1.0":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"8.1.0","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 0.10.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.9.0","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2"},"devDependencies":{"async":"^1.5.2","aws-sdk":"^2.0.15","browserify":"^13.0.0","coveralls":"^2.11.2","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","jshint":"^2.5.6","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^8.3.0","pre-commit":"1.1.2","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","superagent":"^1.4.0","tap":"^5.7.0","zombie":"^4.2.1"},"scripts":{"test":"tap --harmony ./tests/test_*.js","coverage":"nyc --reporter=lcov tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","jshint":"jshint lib/*.js","changelog":"changelog nock all -m > CHANGELOG.md"},"pre-commit":["jshint","coverage"],"license":"MIT","gitHead":"90845b39f1d56a4e0ab42182c3fe36ea7837bfe4","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@8.1.0","_shasum":"21a91a1293d4f23058ba3eeff80a08c53d76bb60","_from":".","_npmVersion":"3.10.3","_nodeVersion":"6.3.0","_npmUser":{"name":"vrinek","email":"kostas@vrinek.io"},"dist":{"shasum":"21a91a1293d4f23058ba3eeff80a08c53d76bb60","tarball":"https://registry.npmjs.org/nock/-/nock-8.1.0.tgz"},"maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"vrinek","email":"kostas@vrinek.io"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/nock-8.1.0.tgz_1476115424997_0.8612595135346055"},"directories":{}},"8.2.0":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"8.2.0","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 0.10.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.9.0","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","jshint":"^2.5.6","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^8.3.0","pre-commit":"1.1.2","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","superagent":"^1.4.0","tap":"^5.7.0","zombie":"^4.2.1"},"scripts":{"test":"tap --harmony ./tests/test_*.js","coverage":"nyc --reporter=lcov tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","jshint":"jshint lib/*.js","changelog":"changelog nock all -m > CHANGELOG.md"},"pre-commit":["jshint","coverage"],"license":"MIT","gitHead":"540720dfcc92515ff6c98d95cc3f19b5709d4a11","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@8.2.0","_shasum":"98e815d9ec6c0d12016b0fadf2d9b0a910cc2096","_from":".","_npmVersion":"3.10.3","_nodeVersion":"6.3.0","_npmUser":{"name":"vrinek","email":"kostas@vrinek.io"},"dist":{"shasum":"98e815d9ec6c0d12016b0fadf2d9b0a910cc2096","tarball":"https://registry.npmjs.org/nock/-/nock-8.2.0.tgz"},"maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"vrinek","email":"kostas@vrinek.io"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/nock-8.2.0.tgz_1477224174573_0.44788612495176494"},"directories":{}},"9.0.0":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.0","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.9.0","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","jshint":"^2.5.6","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^8.3.0","pre-commit":"1.1.2","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","superagent":"^1.4.0","tap":"^5.7.0","zombie":"^4.2.1"},"scripts":{"test":"tap --harmony ./tests/test_*.js","coverage":"nyc --reporter=lcov tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","jshint":"jshint lib/*.js","changelog":"changelog nock all -m > CHANGELOG.md"},"pre-commit":["jshint","coverage"],"license":"MIT","gitHead":"b3caf8a0581307dda548f8a56c4fce4ee6d32115","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.0","_shasum":"e1e4212eabed6fa8174bbfcb99b198a9767ea037","_from":".","_npmVersion":"3.10.3","_nodeVersion":"6.3.0","_npmUser":{"name":"vrinek","email":"kostas@vrinek.io"},"dist":{"shasum":"e1e4212eabed6fa8174bbfcb99b198a9767ea037","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.0.tgz"},"maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"vrinek","email":"kostas@vrinek.io"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/nock-9.0.0.tgz_1477229223187_0.9106894817668945"},"directories":{}},"9.0.1":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.1","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.9.0","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","jshint":"^2.5.6","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^8.3.0","pre-commit":"1.1.2","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","superagent":"^1.4.0","tap":"^5.7.0","zombie":"^4.2.1"},"scripts":{"test":"tap --harmony ./tests/test_*.js","coverage":"nyc --reporter=lcov tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","jshint":"jshint lib/*.js","changelog":"changelog nock all -m > CHANGELOG.md"},"pre-commit":["jshint","coverage"],"license":"MIT","gitHead":"7941d7273129b9d0e9d48b8cf9812c55b2e7daf3","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.1","_shasum":"b510d7b87a281bd4919be0cdac444fd978980161","_from":".","_npmVersion":"3.10.3","_nodeVersion":"6.3.0","_npmUser":{"name":"vrinek","email":"kostas@vrinek.io"},"dist":{"shasum":"b510d7b87a281bd4919be0cdac444fd978980161","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.1.tgz"},"maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"vrinek","email":"kostas@vrinek.io"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/nock-9.0.1.tgz_1477639771509_0.4315032628364861"},"directories":{}},"8.2.1":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"8.2.1","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 0.10.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.9.0","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","jshint":"^2.5.6","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^8.3.0","pre-commit":"1.1.2","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","superagent":"^1.4.0","tap":"^5.7.0","zombie":"^4.2.1"},"scripts":{"test":"tap --harmony ./tests/test_*.js","coverage":"nyc --reporter=lcov tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","jshint":"jshint lib/*.js","changelog":"changelog nock all -m > CHANGELOG.md"},"pre-commit":["jshint","coverage"],"license":"MIT","gitHead":"b7394382efa4a872b305103d52b92d4258c6f6c8","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@8.2.1","_shasum":"64cc65e1bdd3893f58cba7e1abfdc38f40f0364a","_from":".","_npmVersion":"3.10.3","_nodeVersion":"6.3.0","_npmUser":{"name":"vrinek","email":"kostas@vrinek.io"},"dist":{"shasum":"64cc65e1bdd3893f58cba7e1abfdc38f40f0364a","tarball":"https://registry.npmjs.org/nock/-/nock-8.2.1.tgz"},"maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"vrinek","email":"kostas@vrinek.io"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/nock-8.2.1.tgz_1477640191186_0.6355654571671039"},"directories":{}},"9.0.2":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.2","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.9.0","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","jshint":"^2.5.6","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^8.3.0","pre-commit":"1.1.2","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","superagent":"^1.4.0","tap":"^5.7.0","zombie":"^4.2.1"},"scripts":{"test":"tap --harmony ./tests/test_*.js","coverage":"nyc --reporter=lcov tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","jshint":"jshint lib/*.js","changelog":"changelog nock all -m > CHANGELOG.md","toc":"markdown-toc -i README.md"},"pre-commit":["jshint","coverage"],"license":"MIT","gitHead":"b757eb88a2e5b028e4e07c8664c2af02b5517493","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.2","_shasum":"f6a5f4a8d560d61f48b5ad428ccff8dc9b62701e","_from":".","_npmVersion":"3.10.3","_nodeVersion":"6.3.0","_npmUser":{"name":"vrinek","email":"kostas@vrinek.io"},"dist":{"shasum":"f6a5f4a8d560d61f48b5ad428ccff8dc9b62701e","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.2.tgz"},"maintainers":[{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"vrinek","email":"kostas@vrinek.io"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/nock-9.0.2.tgz_1477641981621_0.19190775649622083"},"directories":{}},"9.0.3":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.3","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","jshint":"^2.5.6","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","pre-commit":"1.1.2","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","superagent":"^1.4.0","tap":"^9.0.3","zombie":"^5.0.1"},"scripts":{"test":"tap --harmony ./tests/test_*.js","coverage":"nyc --reporter=lcov tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","jshint":"jshint lib/*.js","changelog":"changelog nock all -m > CHANGELOG.md","toc":"markdown-toc -i README.md"},"pre-commit":["jshint","coverage"],"license":"MIT","gitHead":"dc4380f24e9a4b8b93d45c1399a8ce076e5bdb03","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.3","_shasum":"43b1e857eabb1b75adf07130269e24f83a3fd0b8","_from":".","_npmVersion":"3.5.3","_nodeVersion":"4.5.0","_npmUser":{"name":"ianwsperber","email":"ianwsperber@gmail.ocm"},"dist":{"shasum":"43b1e857eabb1b75adf07130269e24f83a3fd0b8","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.3.tgz"},"maintainers":[{"name":"ianwsperber","email":"ianwsperber@gmail.ocm"},{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"vrinek","email":"kostas@vrinek.io"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/nock-9.0.3.tgz_1486405086634_0.6554320966824889"},"directories":{}},"9.0.4":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.4","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","jshint":"^2.5.6","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","pre-commit":"1.1.2","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","superagent":"^1.4.0","tap":"^10.0.0","zombie":"^5.0.1"},"scripts":{"test":"tap --harmony ./tests/test_*.js","coverage":"nyc --reporter=lcov tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","jshint":"jshint lib/*.js","changelog":"changelog nock all -m > CHANGELOG.md","toc":"markdown-toc -i README.md"},"pre-commit":["jshint","coverage"],"license":"MIT","gitHead":"8f20a6d6b9254299951b69d84becabcffb01344e","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.4","_shasum":"56156e7d0c19980e294d932312e25859d1e3409b","_from":".","_npmVersion":"3.5.3","_nodeVersion":"4.5.0","_npmUser":{"name":"ianwsperber","email":"ianwsperber@gmail.ocm"},"dist":{"shasum":"56156e7d0c19980e294d932312e25859d1e3409b","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.4.tgz"},"maintainers":[{"name":"ianwsperber","email":"ianwsperber@gmail.ocm"},{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"vrinek","email":"kostas@vrinek.io"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/nock-9.0.4.tgz_1486512652064_0.6402501498814672"},"directories":{}},"9.0.5":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.5","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","jshint":"^2.5.6","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","pre-commit":"1.1.2","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","superagent":"^1.4.0","tap":"^10.0.0","zombie":"^5.0.1"},"scripts":{"test":"tap --harmony ./tests/test_*.js","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","jshint":"jshint lib/*.js","changelog":"changelog nock all -m > CHANGELOG.md","toc":"markdown-toc -i README.md"},"pre-commit":["jshint","coverage"],"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"0fb8c3d839b23028148e786a3353f2bb3c09e8da","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.5","_shasum":"31251030961ce0bea83cf81bd72fe271522c7b7d","_from":".","_npmVersion":"3.5.3","_nodeVersion":"4.5.0","_npmUser":{"name":"ianwsperber","email":"ianwsperber@gmail.ocm"},"dist":{"shasum":"31251030961ce0bea83cf81bd72fe271522c7b7d","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.5.tgz"},"maintainers":[{"name":"ianwsperber","email":"ianwsperber@gmail.ocm"},{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"vrinek","email":"kostas@vrinek.io"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/nock-9.0.5.tgz_1486747799490_0.8119357461109757"},"directories":{}},"9.0.6":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.6","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","jshint":"^2.5.6","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","pre-commit":"1.1.2","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","superagent":"^1.4.0","tap":"^10.0.0","zombie":"^5.0.1"},"scripts":{"test":"tap --harmony ./tests/test_*.js","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","jshint":"jshint lib/*.js","changelog":"changelog nock all -m > CHANGELOG.md","toc":"markdown-toc -i README.md"},"pre-commit":["jshint","coverage"],"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"5856cde22e12694f550f6345c46b3ac4c43f50ec","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.6","_shasum":"4ab39dcae285360d117109442b1c34663303ff33","_from":".","_npmVersion":"3.5.3","_nodeVersion":"4.5.0","_npmUser":{"name":"ianwsperber","email":"ianwsperber@gmail.ocm"},"dist":{"shasum":"4ab39dcae285360d117109442b1c34663303ff33","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.6.tgz"},"maintainers":[{"name":"ianwsperber","email":"ianwsperber@gmail.ocm"},{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"vrinek","email":"kostas@vrinek.io"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/nock-9.0.6.tgz_1487017022514_0.3020821106620133"},"directories":{}},"9.0.7":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.7","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","jshint":"^2.5.6","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","pre-commit":"1.1.2","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","superagent":"^1.4.0","tap":"^10.0.0","zombie":"^5.0.1"},"scripts":{"test":"tap --harmony ./tests/test_*.js","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","jshint":"jshint lib/*.js","changelog":"changelog nock all -m > CHANGELOG.md","toc":"markdown-toc -i README.md"},"pre-commit":["jshint","coverage"],"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"a92a3fb3f71d9b1e6107198b303bc42abc4ce560","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.7","_shasum":"cc93481bb15f38bec2a39c4442be07825235b1a1","_from":".","_npmVersion":"3.5.3","_nodeVersion":"4.5.0","_npmUser":{"name":"ianwsperber","email":"ianwsperber@gmail.ocm"},"dist":{"shasum":"cc93481bb15f38bec2a39c4442be07825235b1a1","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.7.tgz"},"maintainers":[{"name":"ianwsperber","email":"ianwsperber@gmail.ocm"},{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"vrinek","email":"kostas@vrinek.io"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/nock-9.0.7.tgz_1487886758898_0.34359453013166785"},"directories":{}},"9.0.8":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.8","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","jshint":"^2.5.6","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","pre-commit":"1.1.2","request":"2.79.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1"},"scripts":{"test":"tap --harmony ./tests/test_*.js","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","jshint":"jshint lib/*.js","changelog":"changelog nock all -m > CHANGELOG.md","toc":"markdown-toc -i README.md"},"pre-commit":["jshint","coverage"],"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"f8fb1e7cdb8ba4465356dad6ade3c52f972b6870","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.8","_shasum":"263411ccc0248a0750809b4f5dc336c5c07bb3e4","_from":".","_npmVersion":"3.5.3","_nodeVersion":"4.5.0","_npmUser":{"name":"ianwsperber","email":"ianwsperber@gmail.ocm"},"dist":{"shasum":"263411ccc0248a0750809b4f5dc336c5c07bb3e4","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.8.tgz"},"maintainers":[{"name":"ianwsperber","email":"ianwsperber@gmail.ocm"},{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"vrinek","email":"kostas@vrinek.io"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/nock-9.0.8.tgz_1488239438771_0.8895799871534109"},"directories":{}},"9.0.9":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.9","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","jshint":"^2.5.6","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","pre-commit":"1.1.2","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1"},"scripts":{"test":"tap --harmony ./tests/test_*.js","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","jshint":"jshint lib/*.js","changelog":"changelog nock all -m > CHANGELOG.md","toc":"markdown-toc -i README.md"},"pre-commit":["jshint","coverage"],"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"5b1a8d8d1196b75729fcfb35cbb7cfe061ae6e47","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.9","_shasum":"ca4cd923352e206ae3c7d6595cfd7fb223299ec0","_from":".","_npmVersion":"3.5.3","_nodeVersion":"4.5.0","_npmUser":{"name":"ianwsperber","email":"ianwsperber@gmail.ocm"},"dist":{"shasum":"ca4cd923352e206ae3c7d6595cfd7fb223299ec0","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.9.tgz"},"maintainers":[{"name":"ianwsperber","email":"ianwsperber@gmail.ocm"},{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"vrinek","email":"kostas@vrinek.io"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/nock-9.0.9.tgz_1488306743096_0.8336769957095385"},"directories":{}},"9.0.10":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.10","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","jshint":"^2.5.6","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","pre-commit":"1.1.2","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","jshint":"jshint lib/*.js","changelog":"changelog nock all -m > CHANGELOG.md","toc":"markdown-toc -i README.md"},"pre-commit":["jshint","coverage"],"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"d7bced09062e6fb22b426488bf8a853efd657725","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.10","_shasum":"0118101f999ce154c86579a8b808d99745e912f5","_from":".","_npmVersion":"3.5.3","_nodeVersion":"4.5.0","_npmUser":{"name":"ianwsperber","email":"ianwsperber@gmail.ocm"},"dist":{"shasum":"0118101f999ce154c86579a8b808d99745e912f5","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.10.tgz"},"maintainers":[{"name":"ianwsperber","email":"ianwsperber@gmail.ocm"},{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"vrinek","email":"kostas@vrinek.io"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/nock-9.0.10.tgz_1490723197260_0.11220043734647334"},"directories":{}},"9.0.11":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.11","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","jshint":"^2.5.6","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","pre-commit":"1.1.2","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","jshint":"jshint lib/*.js","changelog":"changelog nock all -m > CHANGELOG.md","toc":"markdown-toc -i README.md"},"pre-commit":["jshint","coverage"],"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"30881e2a72dbb950e771f912c5f9ddbcb91c0acd","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.11","_shasum":"10f202e4cc276102d60e26e319f97d68da09be9c","_from":".","_npmVersion":"3.5.3","_nodeVersion":"4.5.0","_npmUser":{"name":"ianwsperber","email":"ianwsperber@gmail.ocm"},"dist":{"shasum":"10f202e4cc276102d60e26e319f97d68da09be9c","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.11.tgz"},"maintainers":[{"name":"ianwsperber","email":"ianwsperber@gmail.ocm"},{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"vrinek","email":"kostas@vrinek.io"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/nock-9.0.11.tgz_1490819948041_0.7563877624925226"},"directories":{}},"9.0.12":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.12","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","jshint":"^2.5.6","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","pre-commit":"1.1.2","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","jshint":"jshint lib/*.js","changelog":"changelog nock all -m > CHANGELOG.md","toc":"markdown-toc -i README.md"},"pre-commit":["jshint","coverage"],"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"91302df8b5b02309b76fc4950ddc20c26a8b499d","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.12","_shasum":"bf3d5a1ef07c714385c42b4cb26fbf4bf6a59362","_from":".","_npmVersion":"3.5.3","_nodeVersion":"4.5.0","_npmUser":{"name":"ianwsperber","email":"ianwsperber@gmail.ocm"},"dist":{"shasum":"bf3d5a1ef07c714385c42b4cb26fbf4bf6a59362","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.12.tgz"},"maintainers":[{"name":"ianwsperber","email":"ianwsperber@gmail.ocm"},{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"vrinek","email":"kostas@vrinek.io"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/nock-9.0.12.tgz_1491846596795_0.4633337187115103"},"directories":{}},"9.0.13":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.13","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","jshint":"^2.5.6","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","pre-commit":"1.1.2","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","jshint":"jshint lib/*.js","changelog":"changelog nock all -m > CHANGELOG.md","toc":"markdown-toc -i README.md"},"pre-commit":["jshint","coverage"],"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"f26818796b2448d00f1cda2d8533afb7d73c4cd2","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.13","_shasum":"d0bc39ef43d3179981e22b2e8ea069f916c5781a","_from":".","_npmVersion":"3.5.3","_nodeVersion":"4.5.0","_npmUser":{"name":"ianwsperber","email":"ianwsperber@gmail.ocm"},"dist":{"shasum":"d0bc39ef43d3179981e22b2e8ea069f916c5781a","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.13.tgz"},"maintainers":[{"name":"ianwsperber","email":"ianwsperber@gmail.ocm"},{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"vrinek","email":"kostas@vrinek.io"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/nock-9.0.13.tgz_1491855476963_0.9329274916090071"},"directories":{}},"9.0.14":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.14","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2","semver":"^5.3.0"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","jshint":"^2.5.6","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","pre-commit":"1.1.2","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","semver":"^5.3.0","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","jshint":"jshint lib/*.js","changelog":"changelog nock all -m > CHANGELOG.md","toc":"markdown-toc -i README.md"},"pre-commit":["jshint","coverage"],"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"8da9ee0d96dba9e6e6b541196e17d5739918e2b6","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.14","_shasum":"2211550253173ce298bcd89fca825e83813ca72b","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.10.3","_npmUser":{"name":"ianwsperber","email":"ianwsperber@gmail.ocm"},"dist":{"shasum":"2211550253173ce298bcd89fca825e83813ca72b","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.14.tgz"},"maintainers":[{"name":"ianwsperber","email":"ianwsperber@gmail.ocm"},{"name":"ierceg","email":"ivan@softwaremarbles.com"},{"name":"pgte","email":"pedro.teixeira@gmail.com"},{"name":"ruimarinho","email":"ruipmarinho@gmail.com"},{"name":"svnlto","email":"me@svenlito.com"},{"name":"vrinek","email":"kostas@vrinek.io"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock-9.0.14.tgz_1500286105919_0.21645913971588016"},"directories":{}},"9.0.15":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.15","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2","semver":"^5.3.0"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","jshint":"^2.5.6","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","pre-commit":"1.1.2","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","semver":"^5.3.0","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","jshint":"jshint lib/*.js","changelog":"changelog nock all -m > CHANGELOG.md","toc":"markdown-toc -i README.md"},"pre-commit":["jshint","coverage"],"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"029be32be528dcfc34f443a86cf2b36348e86612","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.15","_npmVersion":"5.4.2","_nodeVersion":"8.4.0","_npmUser":{"name":"gr2m","email":"gregor@martynus.net"},"dist":{"integrity":"sha512-55z7vTL75uMgG6mGYwEdoWXsNeBR//dXBTSSo+sgq5A7A7feF16EzsA5R/EWfD1MdgOxEI1rbFpA2td18aVXqw==","shasum":"4166f68f0f0c00d115af32c50a75390cb807a22f","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.15.tgz"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"ianwsperber@gmail.ocm","name":"ianwsperber"},{"email":"kostas@vrinek.io","name":"vrinek"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"email":"i@pgte.me","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock-9.0.15.tgz_1505777897314_0.2979805532377213"},"directories":{}},"9.0.16":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.16","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2","semver":"^5.3.0"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","jshint":"^2.5.6","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","pre-commit":"1.1.2","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","semver":"^5.3.0","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","jshint":"jshint lib/*.js","changelog":"changelog nock all -m > CHANGELOG.md","toc":"markdown-toc -i README.md"},"pre-commit":["jshint","coverage"],"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"e8f0641a18961d983826de6aa93d1c6a21a6bbbe","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.16","_npmVersion":"5.4.2","_nodeVersion":"8.4.0","_npmUser":{"name":"gr2m","email":"gregor@martynus.net"},"dist":{"integrity":"sha512-m5OKwYb/h2vICyXVXd676DzmfbYk3D6ygSaOjotJZJv53GTipeLPAzreFpWcMzOqZ/kN00opVHArFsyrFMFJNg==","shasum":"b7875df2aa0e436a489f2d1b91ff69615b542f4b","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.16.tgz"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"ianwsperber@gmail.ocm","name":"ianwsperber"},{"email":"kostas@vrinek.io","name":"vrinek"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"email":"i@pgte.me","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock-9.0.16.tgz_1505791886714_0.3511575360316783"},"directories":{}},"9.0.17":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.17","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2","semver":"^5.3.0"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","jshint":"^2.5.6","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","pre-commit":"1.1.2","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","semver":"^5.3.0","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","jshint":"jshint lib/*.js","changelog":"changelog nock all -m > CHANGELOG.md","toc":"markdown-toc -i README.md"},"pre-commit":["jshint","coverage"],"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"4772c158ffda158bfce2eb2f8d095979dfa47297","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.17","_npmVersion":"5.4.2","_nodeVersion":"8.4.0","_npmUser":{"name":"gr2m","email":"gregor@martynus.net"},"dist":{"integrity":"sha512-Oivlmt8bvcYCSYuL844rwxMLWE3puNLEdGYvZGxLNAL/PVrIbnV1VUNl/HgpPHJobUP8fuRa/pRYVJuDRNCg6w==","shasum":"29ae58972c58dc33cc69108a135d98b2d14d95f2","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.17.tgz"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"ianwsperber@gmail.ocm","name":"ianwsperber"},{"email":"kostas@vrinek.io","name":"vrinek"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"email":"i@pgte.me","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock-9.0.17.tgz_1505868923040_0.7609880573581904"},"directories":{}},"9.0.18":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.18","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2","semver":"^5.3.0"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","jshint":"^2.5.6","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","pre-commit":"1.1.2","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","semver":"^5.3.0","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","jshint":"jshint lib/*.js","changelog":"changelog nock all -m > CHANGELOG.md","toc":"markdown-toc -i README.md"},"pre-commit":["jshint","coverage"],"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"3de396cdbb8096e30ee45cb0d6b07c746eaee757","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.18","_npmVersion":"5.4.2","_nodeVersion":"8.4.0","_npmUser":{"name":"gr2m","email":"gregor@martynus.net"},"dist":{"integrity":"sha512-fyy3OEZdHlWR3e4JdRyArUPRJjqSWHvodOWLwWW/JiPmbFdbs+jY7T/67QQnfaA5F/j2Tn7bTi3t2mdIeotsvA==","shasum":"814b6af376b8399d1bbcbaa17f1a458c653a719b","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.18.tgz"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"ianwsperber@gmail.ocm","name":"ianwsperber"},{"email":"kostas@vrinek.io","name":"vrinek"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"email":"i@pgte.me","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock-9.0.18.tgz_1505966186130_0.3784869040828198"},"directories":{}},"9.0.19":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.19","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2","semver":"^5.3.0"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","jshint":"^2.5.6","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","pre-commit":"1.1.2","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","semver":"^5.3.0","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","jshint":"jshint lib/*.js","changelog":"changelog nock all -m > CHANGELOG.md","toc":"markdown-toc -i README.md"},"pre-commit":["jshint","coverage"],"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"53955100d5eafe9200eefe9ecdbd4523c09d84e5","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.19","_npmVersion":"5.4.2","_nodeVersion":"8.4.0","_npmUser":{"name":"gr2m","email":"gregor@martynus.net"},"dist":{"integrity":"sha512-S+gTVKGc4ojRz/66dQ+6rhocqLr4/oog72z9FXpHWLVYE6DWe7KfkimMP4b0sowRjmNBsUy3s6XBo3HhYqXa8w==","shasum":"6c2349701f130a80cc5ef0e7aedf85798e776e56","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.19.tgz"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"ianwsperber@gmail.ocm","name":"ianwsperber"},{"email":"kostas@vrinek.io","name":"vrinek"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"email":"i@pgte.me","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock-9.0.19.tgz_1506127073244_0.06264442927204072"},"directories":{}},"9.0.20":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.20","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2","semver":"^5.3.0"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","eslint":"^3.19.0","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","semver":"^5.3.0","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run lint && npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","changelog":"changelog nock all -m > CHANGELOG.md","toc":"markdown-toc -i README.md"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"fa915fea5de52f70e1c13e144c0e12374447d4d8","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.20","_npmVersion":"5.4.2","_nodeVersion":"8.4.0","_npmUser":{"name":"gr2m","email":"gregor@martynus.net"},"dist":{"integrity":"sha512-nlId7xk1zwZYOcwcIR3djl3jMT4HbnFA1Pr4fktVz1iYI2SbyRkAgMN2+vZz0QhMhpXpFjMfCBI5Lpm2jdIqRg==","shasum":"a5a38d2a88836e5064bcfe4750f1890aeffc79b1","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.20.tgz"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"ianwsperber@gmail.ocm","name":"ianwsperber"},{"email":"kostas@vrinek.io","name":"vrinek"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"email":"i@pgte.me","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock-9.0.20.tgz_1506238239443_0.1202094613108784"},"directories":{}},"9.0.21":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.21","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2","semver":"^5.3.0"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","eslint":"^3.19.0","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","semver":"^5.3.0","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run lint && npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","changelog":"changelog nock all -m > CHANGELOG.md","toc":"markdown-toc -i README.md"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"52092623fb6ea0c6e7ec7c1e9679c569db2ac297","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.21","_npmVersion":"5.4.2","_nodeVersion":"8.4.0","_npmUser":{"name":"gr2m","email":"gregor@martynus.net"},"dist":{"integrity":"sha512-QPDJLo3IJIwUEkG3UHierx/ibVuDrJKNsrN6HR+oXkhfgwjosQFP3mNsIQNy6AKdWc5MeZbXUBl1XuIcuMlPnQ==","shasum":"538623526454334d9e240a024bffadc87258e24c","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.21.tgz"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"ianwsperber@gmail.ocm","name":"ianwsperber"},{"email":"kostas@vrinek.io","name":"vrinek"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"email":"i@pgte.me","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock-9.0.21.tgz_1506364861340_0.12951094191521406"},"directories":{}},"9.0.22":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.22","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2","semver":"^5.3.0"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","eslint":"^3.19.0","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","semver":"^5.3.0","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run lint && npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","changelog":"changelog nock all -m > CHANGELOG.md","toc":"markdown-toc -i README.md"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"a787666e54a3a7a9dd170123e8409173a61b440a","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.22","_npmVersion":"5.4.2","_nodeVersion":"8.5.0","_npmUser":{"name":"gr2m","email":"gregor@martynus.net"},"dist":{"integrity":"sha512-F5+Z5jhDourTtGIAEdqdtLhuAqO22Kg2rrvszgxwDPl8rMkw/pY0RJUHvFV/4bv1/oReZRAokMNGrUIQlKi/BQ==","shasum":"f6eb8ea58c6232dead857484370c2e46f010a087","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.22.tgz"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"ianwsperber@gmail.ocm","name":"ianwsperber"},{"email":"kostas@vrinek.io","name":"vrinek"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"email":"i@pgte.me","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock-9.0.22.tgz_1506568480646_0.4968233839608729"},"directories":{}},"8.2.2":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"8.2.2","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"}],"repository":{"type":"git","url":"git+ssh://git@github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 0.10.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.9.0","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","jshint":"^2.5.6","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^8.3.0","pre-commit":"1.1.2","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","superagent":"^1.4.0","tap":"^5.7.0","zombie":"^4.2.1"},"scripts":{"test":"tap --harmony ./tests/test_*.js","coverage":"nyc --reporter=lcov tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","jshint":"jshint lib/*.js","changelog":"changelog nock all -m > CHANGELOG.md"},"pre-commit":["jshint","coverage"],"license":"MIT","gitHead":"09fd0df546ed53692f796a229db510825d392371","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@8.2.2","_npmVersion":"5.5.1","_nodeVersion":"8.5.0","_npmUser":{"name":"gr2m","email":"gregor@martynus.net"},"dist":{"integrity":"sha512-f4s5qR4Eg/NgaLuBYTThc/abl5mohCgIvnGdHkoqR5WgRe5amjFQTU2aia085OE8o3OAY7ZerDkRAeXfR720TA==","shasum":"fe9d1b9d30e899e886bd79c420b06de7e90c478f","tarball":"https://registry.npmjs.org/nock/-/nock-8.2.2.tgz"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"ianwsperber@gmail.ocm","name":"ianwsperber"},{"email":"kostas@vrinek.io","name":"vrinek"},{"email":"ruipmarinho@gmail.com","name":"ruimarinho"},{"email":"i@pgte.me","name":"pgte"},{"email":"me@svenlito.com","name":"svnlto"},{"email":"ivan@softwaremarbles.com","name":"ierceg"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock-8.2.2.tgz_1508107619754_0.19151795818470418"},"directories":{}},"9.0.23":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.23","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2","semver":"^5.3.0"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","eslint":"^3.19.0","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","semver":"^5.3.0","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1","semantic-release":"^8.2.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run lint && npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","changelog":"changelog nock all -m > CHANGELOG.md","toc":"markdown-toc -i README.md","semantic-release":"semantic-release pre && npm publish && semantic-release post"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"f13add98552fb25ece39b64b4e910ff5f415c693","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.23","_npmVersion":"5.4.2","_nodeVersion":"8.7.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-xb/8t4RdWcJvUoKb4cJ/BSeV0EANGDkXJqymAYFp1UlZx/pLKYiRSEeCehjq64rZC2/8NAKPAq622oGZfJNhtg==","shasum":"fcd3c5453d58f043c18797f4cac9b9a7c22cb6be","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.23.tgz"},"maintainers":[{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"gregor@martynus.net","name":"gr2m"},{"email":"i@pgte.me","name":"pgte"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock-9.0.23.tgz_1508542829120_0.731643104692921"},"directories":{}},"9.0.24":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.24","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2","semver":"^5.3.0"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","eslint":"^3.19.0","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","semver":"^5.3.0","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1","semantic-release":"^8.2.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run lint && npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","changelog":"changelog nock all -m > CHANGELOG.md","toc":"markdown-toc -i README.md","semantic-release":"semantic-release pre && npm publish && semantic-release post"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"bd387365ff8e6df731cf5a35cc92560346826ec5","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.24","_npmVersion":"5.4.2","_nodeVersion":"8.7.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-Q4u88wVf6MaVRnbsz+BMOWUfOAXFGdeve6hm79nbMG+U/ploywUCn6ISIzUYbiiv+N5EVUZMvIyhwwqLzSzG8Q==","shasum":"b3ed18ee7daee3f0c17957384df8f0bbaf0a9212","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.24.tgz"},"maintainers":[{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"gregor@martynus.net","name":"gr2m"},{"email":"i@pgte.me","name":"pgte"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock-9.0.24.tgz_1508542981152_0.6532552023418248"},"directories":{}},"9.0.25":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.25","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2","semver":"^5.3.0"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","changelog":"^1.0.7","coveralls":"^2.11.2","eslint":"^3.19.0","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","semver":"^5.3.0","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1","semantic-release":"^8.2.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run lint && npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","changelog":"changelog nock all -m > CHANGELOG.md","toc":"markdown-toc -i README.md","semantic-release":"semantic-release pre && npm publish && semantic-release post"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"be7a075c9ea3891e672ee862f310e52d9a60a8a4","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.25","_npmVersion":"5.4.2","_nodeVersion":"8.7.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-NG11AOS9UnnTJ0macXJoeUjp4s/DEoPB4724/Cd5ULIu3k/5tRnn+rCX5Z+S10wwWnHQjKBSh94rTdHZxKOTlA==","shasum":"0eb26c8a1f602919eaa5b488cd99cfa34b259390","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.25.tgz"},"maintainers":[{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"gregor@martynus.net","name":"gr2m"},{"email":"i@pgte.me","name":"pgte"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock-9.0.25.tgz_1508799004215_0.325676602544263"},"directories":{}},"9.0.26":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.26","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2","semver":"^5.3.0"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","coveralls":"^2.11.2","eslint":"^3.19.0","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","semver":"^5.3.0","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1","semantic-release":"^8.2.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run lint && npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md","semantic-release":"semantic-release pre && npm publish && semantic-release post"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"eac534bf692466e6ddca3a8123734bb231527f52","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.26","_npmVersion":"5.4.2","_nodeVersion":"8.8.1","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-sXwyqDXYEe1Z/2T0dtDh5P9JBRL8C11Ktyz9PiubO5weFNhtGYQZPwdPebwCJ4EX72zUykuH4DdAuu9R4jGqdA==","shasum":"aace5ee79ff2372c4a770f4921a4bac08588a29d","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.26.tgz"},"maintainers":[{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"gregor@martynus.net","name":"gr2m"},{"email":"i@pgte.me","name":"pgte"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock-9.0.26.tgz_1509231895513_0.21682170452550054"},"directories":{}},"9.0.27":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.27","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2","semver":"^5.3.0"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","coveralls":"^2.11.2","eslint":"^3.19.0","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","semver":"^5.3.0","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1","semantic-release":"^8.2.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run lint && npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md","semantic-release":"semantic-release pre && npm publish && semantic-release post"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"a908ed9e42c893b1afd0ec04a3424f70c13011a2","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.27","_npmVersion":"5.4.2","_nodeVersion":"8.8.1","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-UCdl4VFGBrnNLgk4Rx2NKjPbzVVk6BSsG4xjDhPcKwWwHWVxYT/TcuCT/9ObG46ez5d/jg7+4EFbPuF3XjDRtQ==","shasum":"3d6f979fb3bcbd45610778662bae09bfcf282a51","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.27.tgz"},"maintainers":[{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"gregor@martynus.net","name":"gr2m"},{"email":"i@pgte.me","name":"pgte"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock-9.0.27.tgz_1509232755387_0.18817369150929153"},"directories":{}},"9.0.28":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.0.28","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2","semver":"^5.3.0"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","coveralls":"^2.11.2","eslint":"^3.19.0","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","semver":"^5.3.0","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1","semantic-release":"^8.2.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run lint && npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md","semantic-release":"semantic-release pre && npm publish && semantic-release post"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"970b0377121e43cf0c52254dcca2ec9e83837c0b","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.0.28","_npmVersion":"5.5.1","_nodeVersion":"8.9.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-MXGP3NA+I8BpwF8r2LnK9N1Dwz69N82peP9Ht3G9EMUAKHK73relYI8Pjik9AwvGSVV0kAo6KA20IbKsCjNyIA==","shasum":"99b879ce0e4827f421e42e47356287d6b4c2b58c","tarball":"https://registry.npmjs.org/nock/-/nock-9.0.28.tgz"},"maintainers":[{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"gregor@martynus.net","name":"gr2m"},{"email":"i@pgte.me","name":"pgte"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock-9.0.28.tgz_1509947591539_0.9631161922588944"},"directories":{}},"9.1.0":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.1.0","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.0.2","semver":"^5.3.0"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","coveralls":"^2.11.2","eslint":"^3.19.0","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","semver":"^5.3.0","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1","semantic-release":"^8.2.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run lint && npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md","semantic-release":"semantic-release pre && npm publish && semantic-release post"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"f3f9bc761d75f019553567b19b46b6695d330175","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.1.0","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-u9QOLOZP0DlcKzmAzCuX5PRsIhbiRJupR7hJn1cCCT7VW3ZKUrEH/oxGEtVA8Xbu4EmzH9d/VK0x/3FxCGRrRg==","shasum":"b6fd783abc1e774cb028058ea81207369a735747","tarball":"https://registry.npmjs.org/nock/-/nock-9.1.0.tgz"},"maintainers":[{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"gregor@martynus.net","name":"gr2m"},{"email":"i@pgte.me","name":"pgte"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock-9.1.0.tgz_1510114535905_0.7267365825828165"},"directories":{}},"9.1.1":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.1.1","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.5.1","semver":"^5.3.0"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","coveralls":"^2.11.2","eslint":"^3.19.0","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","semver":"^5.3.0","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1","semantic-release":"^8.2.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run lint && npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md","semantic-release":"semantic-release pre && npm publish && semantic-release post"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"e8cb44a373be52b04ed9f8df95d17ebb207a59a8","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.1.1","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-5axNdAOCzmWiZuCbfKR+Kx8DZds5cj7dGjyzL12RNwYlu0815zUCacYGLWPtJQZV3IrU/Nz/qLLgBGPDN+qnqA==","shasum":"c8303a36bfe54d3a26a7b9d58347db9a087dac3f","tarball":"https://registry.npmjs.org/nock/-/nock-9.1.1.tgz"},"maintainers":[{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"gregor@martynus.net","name":"gr2m"},{"email":"i@pgte.me","name":"pgte"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock-9.1.1.tgz_1511560187801_0.16558418259955943"},"directories":{}},"9.1.2":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.1.2","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.5.1","semver":"^5.3.0"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","coveralls":"^2.11.2","eslint":"^3.19.0","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","semver":"^5.3.0","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1","semantic-release":"^8.2.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run lint && npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md","semantic-release":"semantic-release pre && npm publish && semantic-release post"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"ebb8af229631ea463bc4d4ab94c0388eba560861","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.1.2","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-Ag25AwKpT62V0+aMmpNCviC1scBTiAvSrHG4xPdX1OB0NRgGiEoJUbLO+XVGjE/J4kkpIgCG0fDpKc7WO08t6g==","shasum":"58f7744d781c3bbc0f495dda1915f1abddfff10e","tarball":"https://registry.npmjs.org/nock/-/nock-9.1.2.tgz"},"maintainers":[{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"gregor@martynus.net","name":"gr2m"},{"email":"i@pgte.me","name":"pgte"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock-9.1.2.tgz_1511560390937_0.9742129263468087"},"directories":{}},"9.1.3":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.1.3","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.5.1","semver":"^5.3.0"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","coveralls":"^2.11.2","eslint":"^3.19.0","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","semver":"^5.3.0","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1","semantic-release":"^8.2.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run lint && npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md","semantic-release":"semantic-release pre && npm publish && semantic-release post"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"fa58493dbe0d4fb7b8cd275ed3f1df55a150c775","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.1.3","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-uIU+rGPnC+OPzIpqMBgr6nubuGTxowYD+CsA1DyxF8DLeE+8d/7wxnuSWvMB78SjffRdGQCqwKSAwT1d/Fx34A==","shasum":"1ab95a973a876c9ae2a844241844e29dbb5a1d89","tarball":"https://registry.npmjs.org/nock/-/nock-9.1.3.tgz"},"maintainers":[{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"gregor@martynus.net","name":"gr2m"},{"email":"i@pgte.me","name":"pgte"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock-9.1.3.tgz_1511637712362_0.8209139246027917"},"directories":{}},"9.1.4":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.1.4","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.5.1","semver":"^5.3.0"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","coveralls":"^2.11.2","eslint":"^3.19.0","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","semver":"^5.3.0","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1","semantic-release":"^8.2.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run lint && npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md","semantic-release":"semantic-release pre && npm publish && semantic-release post"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"a2d04c31437aaf42d22c9d5b77e2ee6e6a2a2aa5","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.1.4","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-O0tkPO0VkiQ7mfCAg3QyL+6tt7srXHq0+m6BMy+SyzuKX+2Oz10ERXnqDL0nJxpVhKFx/E/K/6nT75U6RpvugQ==","shasum":"5cdda89c5effaed0f448486f0135bf7b1e7bf1dc","tarball":"https://registry.npmjs.org/nock/-/nock-9.1.4.tgz"},"maintainers":[{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"gregor@martynus.net","name":"gr2m"},{"email":"i@pgte.me","name":"pgte"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock-9.1.4.tgz_1512173005953_0.43720544409006834"},"directories":{}},"9.1.5":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.1.5","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.5.1","semver":"^5.3.0"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","coveralls":"^2.11.2","eslint":"^3.19.0","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","semver":"^5.3.0","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1","semantic-release":"^8.2.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run lint && npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md","semantic-release":"semantic-release pre && npm publish && semantic-release post"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"d16fe885c239922940592c71aca5c9357a727543","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.1.5","_npmVersion":"5.5.1","_nodeVersion":"8.9.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-ukkBUhGU73CmSKTpTl6N/Qjvb7Hev4rCEjgOuEBKvHmsOqz7jGh2vUXL3dPnX3ndfcmVjsFBPfKpNuJbK94SKg==","shasum":"9e4878e0e1c050bdd93ae1e326e89461ea15618b","tarball":"https://registry.npmjs.org/nock/-/nock-9.1.5.tgz"},"maintainers":[{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"gregor@martynus.net","name":"gr2m"},{"email":"i@pgte.me","name":"pgte"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock-9.1.5.tgz_1513735890511_0.5906368747819215"},"directories":{}},"9.1.6":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.1.6","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.5.1","semver":"^5.3.0"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","browserify":"^13.0.0","coveralls":"^2.11.2","eslint":"^3.19.0","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^0.13.0","needle":"^1.0.0","node-static":"^0.7.7","nyc":"^10.0.0","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","semver":"^5.3.0","superagent":"^3.5.0","tap":"^10.0.0","zombie":"^5.0.1","semantic-release":"^8.2.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run lint && npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md","semantic-release":"semantic-release pre && npm publish && semantic-release post"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"573b42b4b3632a7fa7b7c777a172b8bc54967616","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.1.6","_npmVersion":"5.6.0","_nodeVersion":"8.9.4","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-DuKF+1W/FnMO6MXIGgCIWcM95bETjBbmFdR4v7dAj1zH9a9XhOjAa//PuWh98XIXxcZt7wdiv0JlO0AA0e2kqQ==","shasum":"16395af4c45b0fd84d1a4a9668154e16fa6624db","tarball":"https://registry.npmjs.org/nock/-/nock-9.1.6.tgz"},"maintainers":[{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"gregor@martynus.net","name":"gr2m"},{"email":"i@pgte.me","name":"pgte"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock-9.1.6.tgz_1515438349336_0.9834532539825886"},"directories":{}},"9.1.7":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.1.7","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.5.1","semver":"^5.3.0"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","coveralls":"^2.11.2","eslint":"^3.19.0","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^0.13.0","needle":"^1.0.0","nyc":"^10.0.0","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","semver":"^5.3.0","superagent":"^3.5.0","tap":"^10.0.0","semantic-release":"^8.2.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run lint && npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md","semantic-release":"semantic-release pre && npm publish && semantic-release post"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"f3f8f0f2b82dcfe74129705a1c1dc96e8a5049e9","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.1.7","_npmVersion":"5.6.0","_nodeVersion":"8.9.4","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-2BYZ8jDM48xtpCJOAq3XLCtrVdXPwUcH8PEipt6DvjSQMWnrfwAb+e2MuvB/1pLIp5tw8Fsu/t1hbNX4rfcQeA==","shasum":"37fb27f5b8c3de827f9e4d5788a6eec3408fb3cb","tarball":"https://registry.npmjs.org/nock/-/nock-9.1.7.tgz","fileCount":34,"unpackedSize":152174},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_9.1.7_1519244908028_0.22836846857750848"},"_hasShrinkwrap":false},"9.1.8":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.1.8","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.5.1","semver":"^5.3.0"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","coveralls":"^2.11.2","eslint":"^3.19.0","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^0.13.0","needle":"^1.0.0","nyc":"^10.0.0","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","semver":"^5.3.0","superagent":"^3.5.0","tap":"^10.0.0","semantic-release":"^8.2.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run lint && npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md","semantic-release":"semantic-release pre && npm publish && semantic-release post"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"ebeb815bf2ac997103bc825921e5f7f1cc47245d","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.1.8","_npmVersion":"5.6.0","_nodeVersion":"8.9.4","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-tZCr2o5cjzk1Xib+Mx+0l4uG8yxCV4ysOtyAh67Q5dfXBgAkOZS3ohIOpFA2RxPp5tYjgODbeMFWcGzLOa/70Q==","shasum":"90c851575998dd7ac54c9d829d6f70c9d237f115","tarball":"https://registry.npmjs.org/nock/-/nock-9.1.8.tgz","fileCount":34,"unpackedSize":152121},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_9.1.8_1519246376651_0.5523226376942487"},"_hasShrinkwrap":false},"9.1.9":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.1.9","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.5.1","semver":"^5.3.0"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","coveralls":"^2.11.2","eslint":"^3.19.0","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^0.13.0","needle":"^1.0.0","nyc":"^10.0.0","request":"2.71.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","semver":"^5.3.0","superagent":"^3.5.0","tap":"^10.0.0","semantic-release":"^8.2.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run lint && npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md","semantic-release":"semantic-release pre && npm publish && semantic-release post"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"df04e86e58b359683b5a0914cb5a206f82fc1151","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.1.9","_npmVersion":"5.6.0","_nodeVersion":"8.9.4","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-dQqtJ8EuQ5D5rMHRed9EqhhDbMlmI6Xd9ovMGE0Ff9UEOna9eSFxBWiXWQOTmvrOstq6UG88mku1wvE6624unA==","shasum":"eec261a1b5876e066bc9f9b3da320ffea1663e4d","tarball":"https://registry.npmjs.org/nock/-/nock-9.1.9.tgz","fileCount":34,"unpackedSize":152142},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_9.1.9_1519247659982_0.23572292603638312"},"_hasShrinkwrap":false},"9.1.10":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.1.10","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.5.1","semver":"^5.3.0"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","coveralls":"^2.11.2","eslint":"^3.19.0","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^0.13.0","needle":"^1.0.0","nyc":"^10.0.0","request":"^2.83.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","semver":"^5.3.0","superagent":"^3.5.0","tap":"^10.0.0","semantic-release":"^8.2.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run lint && npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md","semantic-release":"semantic-release pre && npm publish && semantic-release post"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"315104d4c7390199d60fc0c062abdd4ab6a11e89","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.1.10","_npmVersion":"5.6.0","_nodeVersion":"8.9.4","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-GOD0PrGebYZpJWpiU9C4QDGN3y0bX2huQd0zBNv79f6l2Xyu6xuw2nZ7mHjXQDq/3onkaHbX9PBkyvTEIFC8cw==","shasum":"b563ff058608cab3368bb3ba59f84dffd4ff9d65","tarball":"https://registry.npmjs.org/nock/-/nock-9.1.10.tgz","fileCount":34,"unpackedSize":152242},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_9.1.10_1519443556438_0.8881201997449142"},"_hasShrinkwrap":false},"9.2.0":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.2.0","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":">=1.9.2 <4.0.0","debug":"^2.2.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"~4.17.2","mkdirp":"^0.5.0","propagate":"0.4.0","qs":"^6.5.1","semver":"^5.3.0"},"devDependencies":{"async":"^2.1.1","aws-sdk":"^2.0.15","coveralls":"^2.11.2","eslint":"^3.19.0","glob":"^7.1.1","hyperquest":"^1.3.0","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^0.13.0","needle":"^1.0.0","nyc":"^10.0.0","request":"^2.83.0","request-promise":"^2.0.1","restify":"^4.0.4","restler":"3.4.0","rimraf":"^2.3.2","semver":"^5.3.0","superagent":"^3.5.0","tap":"^10.0.0","semantic-release":"^8.2.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","preintegration":"./tests/bin/install_sub_deps versioned","integration":"tap --harmony ./tests/versioned/*/*.tap.js","test":"npm run lint && npm run unit && npm run integration","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md","semantic-release":"semantic-release pre && npm publish && semantic-release post"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"904d1b37aca034d816832d2882fbe07cd01cf450","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.2.0","_npmVersion":"5.6.0","_nodeVersion":"8.9.4","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-2NjQdQifiK8AspqjON+mvKYQnFbnQDTMJySnAlcZkv8d4FJ5jnUxTCHt3Gpys4GcBKwmPwtXyEj5wUZ83fGjfw==","shasum":"d1e0e3b8c159eede50c5676452bbfaf69b70abd2","tarball":"https://registry.npmjs.org/nock/-/nock-9.2.0.tgz","fileCount":34,"unpackedSize":152674},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_9.2.0_1519495463497_0.27185514587218074"},"_hasShrinkwrap":false},"9.2.1":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.2.1","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^3.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1","semver":"^5.5.0"},"devDependencies":{"async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^4.18.1","glob":"^7.1.1","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^1.2.0","needle":"^2.2.0","nyc":"^11.4.1","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.0.0","rimraf":"^2.6.2","semantic-release":"^15.0.0","superagent":"^3.8.2","tap":"^11.1.1"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"b3733393d4151cb6a04bde3878872287502601f0","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.2.1","_npmVersion":"5.6.0","_nodeVersion":"8.9.4","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-+N49+FUwNCQmw3Wy7qisqATUYhgh0z0JA7yxu7Kpb4zJu7uIgCBfqiCnQjDwNnwdg9zF3gKbAK1eSJ2+9IA1kA==","shasum":"7e73561277c3e8f2287e385d3d04c7223a54faea","tarball":"https://registry.npmjs.org/nock/-/nock-9.2.1.tgz","fileCount":34,"unpackedSize":154015},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_9.2.1_1519502686927_0.5994194952791163"},"_hasShrinkwrap":false},"9.2.2":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.2.2","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^3.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1","semver":"^5.5.0"},"devDependencies":{"async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^4.18.1","glob":"^7.1.1","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^1.2.0","needle":"^2.2.0","nyc":"^11.4.1","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.0.0","rimraf":"^2.6.2","semantic-release":"^15.0.0","superagent":"^3.8.2","tap":"^11.1.1"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"6817e76ccc3e3e7d01c4beed340c2d2b5a6644d7","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.2.2","_npmVersion":"5.6.0","_nodeVersion":"8.9.4","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-FFf3Iqojf/JomDKtYz5tFS2/nhsD/J7X4T/nY9ynUe267shd+v6Ph4a5mxy+2I6+/ns8Q20XAD34RvNd0G5R9w==","shasum":"3f302e577965c67bcbdb913cf42402c19ec1b2db","tarball":"https://registry.npmjs.org/nock/-/nock-9.2.2.tgz","fileCount":34,"unpackedSize":153864},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_9.2.2_1519678407563_0.6945134088560065"},"_hasShrinkwrap":false},"9.2.3":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.2.3","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^3.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1","semver":"^5.5.0"},"devDependencies":{"async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^4.18.1","glob":"^7.1.1","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^1.2.0","needle":"^2.2.0","nyc":"^11.4.1","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.0.0","rimraf":"^2.6.2","semantic-release":"^15.0.0","superagent":"^3.8.2","tap":"^11.1.1"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"055593abb036524ffff8f364f8effc91827a130f","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.2.3","_npmVersion":"5.6.0","_nodeVersion":"8.9.4","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-4XYNSJDJ/PvNoH+cCRWcGOOFsq3jtZdNTRIlPIBA7CopGWJO56m5OaPEjjJ3WddxNYfe5HL9sQQAtMt8oyR9AA==","shasum":"39738087d6a0497d3a165fb352612b38a2f9b92f","tarball":"https://registry.npmjs.org/nock/-/nock-9.2.3.tgz","fileCount":34,"unpackedSize":153871},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_9.2.3_1519751683176_0.24445066117857994"},"_hasShrinkwrap":false},"9.2.4":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.2.4","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^3.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1","semver":"^5.5.0"},"devDependencies":{"async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^4.18.1","glob":"^7.1.1","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^1.2.0","needle":"^2.2.0","nyc":"^11.4.1","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.0.0","rimraf":"^2.6.2","semantic-release":"^15.0.0","superagent":"^3.8.2","tap":"^11.1.1"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"58522969401a051303f698cda75c5f2eb9b12dc8","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.2.4","_npmVersion":"5.6.0","_nodeVersion":"8.11.1","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-asFxV9kWqELM1/7nixgH+tbCJdSHhFycwgkah7uaFHHVM+bHuCNJeJEgoijZEL5wy91kD4JSirWNmohbUGFZaA==","shasum":"447ec8aedc7fe0234a93f5f3b2f678b999e51781","tarball":"https://registry.npmjs.org/nock/-/nock-9.2.4.tgz","fileCount":34,"unpackedSize":154218},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_9.2.4_1523311899372_0.3705247386157273"},"_hasShrinkwrap":false},"9.2.5":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.2.5","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^3.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1","semver":"^5.5.0"},"devDependencies":{"async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^4.18.1","glob":"^7.1.1","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^1.2.0","needle":"^2.2.0","nyc":"^11.4.1","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.0.0","rimraf":"^2.6.2","semantic-release":"^15.0.0","superagent":"^3.8.2","tap":"^11.1.1"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"11f1a25ee88b0328c92070e4749793902907a60d","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.2.5","_npmVersion":"5.6.0","_nodeVersion":"8.11.1","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-ciCpyEq72Ws6/yhdayDfd0mAb3eQ7/533xKmFlBQZ5CDwrL0/bddtSicfL7R07oyvPAuegQrR+9ctrlPEp0EjQ==","shasum":"c131fc8d3c4723f386be0269739638be84733f2f","tarball":"https://registry.npmjs.org/nock/-/nock-9.2.5.tgz","fileCount":34,"unpackedSize":154275},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_9.2.5_1523388342824_0.7882069817961077"},"_hasShrinkwrap":false},"9.2.6":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.2.6","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^3.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1","semver":"^5.5.0"},"devDependencies":{"async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^4.18.1","glob":"^7.1.1","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^1.2.0","needle":"^2.2.0","nyc":"^11.4.1","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.0.0","rimraf":"^2.6.2","semantic-release":"^15.0.0","superagent":"^3.8.2","tap":"^11.1.1"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"2676fedc6909a99d9202c1826a4313bc0860508d","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.2.6","_npmVersion":"5.6.0","_nodeVersion":"8.11.1","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-loyWSNToPH416mENYcqN/ORNwJvfMs+n1+kk9HS3zO/Eb/ci3TZqoNIWp5oYW9VIFh18jXHxnzYSsrXvA63RYA==","shasum":"496ddb2c32e6d0848cda1b3ea51fbe054d4454d3","tarball":"https://registry.npmjs.org/nock/-/nock-9.2.6.tgz","fileCount":34,"unpackedSize":154289,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa+hPICRA9TVsSAnZWagAAXQgQAJ98T7tkoRC0TRzr54IW\nG2X0sie4y6Kbu/6gBQ54VlKie5zMr0EZWQx+BljHNMCEol12i6sGNBkoGBrG\n7s3Xx6JTA3mkY757cnWjmb9KEw6iuyWorQ8Z116IkX7SRXsmPcGeesuWOk+H\np1CYECkVFwBCZ2HcnWAuGBf9dqzCwd5AdZRFlxephPpWdiZbr0i+z9qWZrT2\nCztJPUwqp3SX9+832wYDhofukR/VDt/3dqW6B07cAa897scpWz0GNF3+4CGv\nz8CzVui9O/ALKCWz3/kuyP9Bm0jIKmMoyfh96T4b+PNkUa+0hMMa8ZvmkbZW\nPYGNix/HReYqqHxNmfzsullb7o/KlO3EW+cHRYNU7mV0cAsK0WiPPsZwSQTj\nRoOdeG+DTybegWH+bgJdE9oz5xbEsr75U4cPHpfM+xkHQqP9+pAq+2BUb49h\nUI9W1335EecCPYXiQvBFgnre2lkZIS1RrtbPumtForDyUdXDjRNUtoVDotC7\nuJwQv1NZr65Xw8Ppm6JSFLv7W+Oz70aBGgE07Wk36ZaRwsmofhgUTrPcLhrV\nvOix7v/tTuAmLp1sdYgr147IovobTFGBTBOSyhSosGCEt52hCCkYC2pCgV01\nwJip+xatS213kehwARpzmInA6eLlbELap/tr3+FK3UvQztu0bx1aRqqRo23K\nklvT\r\n=p8JT\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_9.2.6_1526338501995_0.6517968358866764"},"_hasShrinkwrap":false},"9.3.0":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.3.0","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^3.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1","semver":"^5.5.0"},"devDependencies":{"async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^4.18.1","glob":"^7.1.1","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^1.2.0","needle":"^2.2.0","nyc":"^11.4.1","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.0.0","rimraf":"^2.6.2","semantic-release":"^15.0.0","superagent":"^3.8.2","tap":"^12.0.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"de0cb79c9fa4935dc659cf7162ebff549f0e329d","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.3.0","_npmVersion":"5.6.0","_nodeVersion":"8.11.2","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-uJZKsOXdCqHkzUXD94SARpB8HgAVvALBBN0aD3RJO6vgBQDjy9u0uVhYzlApgfSnckfcfFh9XF/JV6FsJHz4Bg==","shasum":"4dcfdd37bd249836754d05bbac5a1f05e12e0f16","tarball":"https://registry.npmjs.org/nock/-/nock-9.3.0.tgz","fileCount":34,"unpackedSize":154423,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbDvMzCRA9TVsSAnZWagAAfhkP/jNs0XIGwTLlTwHepJww\nHIfaVDVLqm672p6uH4AeUsrRL8iWi57+IdumKnuYy9Z6AB6M7Lg8hF/1vMmb\nMvo+dsD/nzCvC39yC6UvGYFkl+h2heJZCRapMM6syb1v0kJK73YE0qxZLeH1\nmM43J6G+Fd4QDGLLdQpf4MU+hONhhbeugfEQJHYksZC4HoJ0EwiHHGIPAiE7\ndYBOTTC8bo8cbd/PmwVVi875bibyteX9xwAtetclLAevhj/Mtl2X1whklTvL\nJSDghHXUI7f4BwlwAbdOBeGMPLya1st4bUxfyDFj/eKRmhD/yJxQFiUVuUSp\nF9rMvU5Z40bqs3ZaW3zwAk7PN/bjXQ7rQArMyOxFh94bM5AWRP2c+PabVRC+\nwjLyto7Mg6hchjJkKRmjBn7wAYq+VBKXbt72rGgmKWbMeF5rxmefKpMJ9hnj\n4qd2IR1IR1QnieMuS6Ts07ee7w75ybdWVtBbe+ujMPBviYM50mDrmboEk0nC\n2A3FRuMlQxeWFn2IFvd8fE7EfKUT34//3QdrHVRs6FO9T1X1/LlweFAWH2te\nOalA8jg1wehf0ag53vlwJZtbjj9tDAq0eyTb8n0VDwoxe9YhulUiI8TuoowF\nFhpmJI8IIetXvtC7qm1pYnXJlOyL7d/rFK3xy4lK6ZqeDD8tJaidNBC/ktpC\nw+on\r\n=wvj/\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_9.3.0_1527706416076_0.17751010799216438"},"_hasShrinkwrap":false},"9.3.1":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.3.1","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^3.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1","semver":"^5.5.0"},"devDependencies":{"async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^4.18.1","glob":"^7.1.1","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^1.2.0","needle":"^2.2.0","nyc":"^12.0.1","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.0.0","rimraf":"^2.6.2","semantic-release":"^15.0.0","superagent":"^3.8.2","tap":"^12.0.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"aaa9a5642c7bea90ed2e1002939442812e6d35e4","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.3.1","_npmVersion":"5.6.0","_nodeVersion":"8.11.2","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-ad1oEgM8H3AJwLcXJI64qtZ73UdusFZwFdPN72uQZmfSeXfr0TsSGoZFJ7gk9JWWaExchfVQCa+NugPcm7XHrQ==","shasum":"8c5c6428240d5bf337b7b72c04e63a6737183b95","tarball":"https://registry.npmjs.org/nock/-/nock-9.3.1.tgz","fileCount":34,"unpackedSize":154475,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbGKcfCRA9TVsSAnZWagAArJgQAIPWaWaP4K5wNLgXLbfW\nub3VTc/26a0b4s5nXQQ2NX5jlbCyxHL7eAU8bjFRWJ4a5O1YJoVv532wZnLB\nr0b/BLOx2CZzqYuYOSzx6gjsGTPo8Pan2MdIsbmf74Ka54qZ8jit/3cNsjLT\n0FAPs3ZxXpnIHGadLpK71eklmQOKKWJY2bVhYawQCJSryzg1FlKquX9XLGgV\ntlu2zCg6v8AYOJalAqLn5F91LQAUMtfzVf89BHE84rlqX7rOQz/GbWTTo1sC\n7h2E7GPhpcMbYfv7QBP9SL1ylehTgxwxEk5afhMelmgX1SMh9DIb08s2zvAW\nsw9hxzqdAunb22XUM5yxw/5AOvW1uVZN7dexFUijeEIn7a2G3ZCIrwo/TMhJ\ntK5ZvwEDqYFA3t7gjrUqtkn1Ihbyh2yrtHbzhmyBhcepYD+yQs/vOkeGvBwF\n+YtCBdxbt87bRha8B/cdG7Z7+GoyHzY1rAJLYQRy8e/cXZ+2fMLd6qAkZaYG\naa0kxLdQyo0pR5d5/Arftm9hVKU34+t2IMiWeeC/0vNyeRqpk+6xwMJHxnSZ\na34pkdNIkqzJJfOplyl4IEoErHqFCW6StxA8WQUwjCFRabB63gj4UD3RnKML\nuKqVhrK3vcEMmVKhm/7L7aSXhdCXfOxh7kUq3LLZRUXX6jk7qYTgHZpO6RxI\n8cnl\r\n=+Cog\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_9.3.1_1528342301248_0.39914671685429526"},"_hasShrinkwrap":false},"9.3.2":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.3.2","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^3.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1","semver":"^5.5.0"},"devDependencies":{"async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^4.18.1","glob":"^7.1.1","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^1.2.0","needle":"^2.2.0","nyc":"^12.0.1","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.0.0","rimraf":"^2.6.2","semantic-release":"^15.0.0","superagent":"^3.8.2","tap":"^12.0.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"b5b40c16531f655035cb486f44118257dd4bfb1e","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.3.2","_npmVersion":"5.6.0","_nodeVersion":"8.11.2","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-pulpsRVFneYGpgktmt99s10fFh10zSpYhydwkG28xLps/p19n39lBSq5kjb7UW2YOPyQtt7FLyXuP+xHyRRI0w==","shasum":"f2f52a784a8a33d7496f4ab5b28c3b879091e6d6","tarball":"https://registry.npmjs.org/nock/-/nock-9.3.2.tgz","fileCount":34,"unpackedSize":154458,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbGVq+CRA9TVsSAnZWagAAjv8P/3Oi9odHym/8YUSxJ0WA\nD4F6JiVhGQWGoHYqWmz4oz6l8/TyGE0kBzhf8/VmxuQyMlTIf0F/j/KE2QCk\nt5g+4szbd9/cdC+mFmYjvDPLsibiJqZK4euUF2h9RISmBth7rUkLCVewnWnA\nkzO/5vW0LECfKa7BylN6arX30UAfXycPkA194KB6Kp2QZ/VzM8UAuwtMtOHV\ngYYF72nN92LGoAEUSDY/r+I7N0DJQvjpLSMOTTKrvNGqn2z7UWOwYzgkJYCu\nr5cx1P49HSryGMk9xlPsx7ubph94FMpVCRotpgHaudQ0Ox4CJQLCU6Pdal5P\n2jDxj9bfzXd4bpD4KgzbJF2sb/X89b5OoIIhoZRXUDjQ7sSJHtT4A3DSKCY5\nO9pgeBDNY/5UT4f1u1AKB9niMFyvtcC+XNA/O8+ixb4knfm8lYqDB/uK2Lda\n5+azCf2OtuuQ9h848qmBFV9pqykPrf4X28hxRtbBZiSadxpxtPtULLrgcAiu\njvRdn7f4HyXV5zoq8JK1Xl7B4wKv/ZXf/9BNV5EmsztCjqaVVrUUXi7dn9As\njEjmthI6cX2VKgEAP3AydUwB04FfWujSnhnsAnQ0UA7vcF8xHCjU0G726EFa\ntmUhQ+CY+bEyrVQNu9YI0ReV6xGXKcZh3W2WadJeff77CSvUZSalQy0V9EJ/\n3JVT\r\n=O0lU\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_9.3.2_1528388283708_0.009385130144150544"},"_hasShrinkwrap":false},"9.3.3":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.3.3","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/node-nock/nock.git"},"bugs":{"url":"http://github.com/node-nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^3.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1","semver":"^5.5.0"},"devDependencies":{"async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^4.18.1","glob":"^7.1.1","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^1.2.0","needle":"^2.2.0","nyc":"^12.0.1","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.2.0","rimraf":"^2.6.2","semantic-release":"^15.0.0","superagent":"^3.8.2","tap":"^12.0.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"933880adcac014e49236218a0678f8352b12f669","homepage":"https://github.com/node-nock/nock#readme","_id":"nock@9.3.3","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-FBgnx25er2ly7KBr0Est5F0z5g+lnyr6a72vZI1KMi7nTL4ojU6XpFhlrfw6CXRdnT2FA5i8exHiT1uVNUM1qA==","shasum":"d9f4cd3c011afeadaf5ccf1b243f6e353781cda0","tarball":"https://registry.npmjs.org/nock/-/nock-9.3.3.tgz","fileCount":34,"unpackedSize":154435,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbIastCRA9TVsSAnZWagAA7I0QAJtlsmtB8Bj18KTfsB0r\nqIT2PybXMvKZ3zjkUIuwA91wMzheScUNAFVD2Jrp9arFBPdgGGVGxOEOIRZX\npsfOnrgNKkV/92CC5BEBwk0Jq6LA0J/l/kGiaMj6Q9XxSKLOa5l7lU/GxNOm\n9EUSHoFG4NEhvsRcnkDsRiSIiFpRknCtEfa1tdMdAZH7s1BbDf5a4gCviovn\n83q4tpcBvRRED5sfxFe4ddZo3vb5avI3vMoG8gdWZYL3KNPQqjh27e/y4uxO\nF9GSd2hnIGPkdl7oLC30mESE9PqS+W8kqh252h2H3xbqRmUQpWFFORIevD4e\n77bvrVu32SrYhHMXF3s6+lwRJikD2EruwutqKtnTvrGAzCjcgoBUSh2tF9ds\nj7sPh8WZbj8uGh/VoeM9QWkvaFDpGROP7gFMLySFqJvsTrU8lwu31lQLkFK6\nUCQ0f8Kz4DcDsnX/diOr9Ui2IcXfqs1JbrTYYDBVkTDxQ3hdTR0wI8LSHnS0\nhN2213ZXLBxvQNfgIpm7tKW/Zviu9tsg0sf62tAWVD20B/U/kc8Y5YivmQER\nyLXb6oOoXvnYTqX5oyNwyzQfwnwCdcBO+22W0o9rvf4SpAoxt1BLAFVVLKyP\nHL1MzF94A+91ILy4c5L4gasAjgo/pDKjRr7qTFK0AH9HVdgiRM1ihq4NnehF\nEfnJ\r\n=fGQ1\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_9.3.3_1528933162454_0.9293784292244804"},"_hasShrinkwrap":false},"9.4.0":{"name":"nock","description":"HTTP Server mocking for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.4.0","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^3.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1","semver":"^5.5.0"},"devDependencies":{"async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^5.0.0","glob":"^7.1.1","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^1.2.0","needle":"^2.2.0","nyc":"^12.0.1","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.2.0","rimraf":"^2.6.2","semantic-release":"^15.0.0","superagent":"^3.8.2","tap":"^12.0.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"e15820a62ee949e3e9f1a19993f53d66d073708e","homepage":"https://github.com/nock/nock#readme","_id":"nock@9.4.0","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-uSBTclJ8Nmp/E3173s4KUHd5SAdxcuNjpwwWILhODBev67vftqt540kwYQBxR43z8//42ImFbSPrStgDAVxA4A==","shasum":"d151c0020c9c10fe2f139c4bc7498457959eddc8","tarball":"https://registry.npmjs.org/nock/-/nock-9.4.0.tgz","fileCount":34,"unpackedSize":154413,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbNpQgCRA9TVsSAnZWagAAG88P/27cJFBjUPJQaLCKQP72\ncq8Bubl+wk3q0c5DLuJ61p6QH80cvd9LI70BmM5lzTPYkEMqHpR2PW6U/ynH\nZVlOyP+fhoorgByu1r4ri36etLWX39HJ4LTNbpbAQIknL2gEHXyiBHyMMzQk\nGlvjPmp9usQcLojDvdmyB/kKMpz6iVHA3pF2ix3uauSDKrPW3CBih1jg3y12\nbUI1AXse8YYUaZX5fwYSPRRJlE/MVW7C9RudGATY46hfzqvcqwI7xrXZMznL\nE5Qc7n7KfzvYXS6Ti+n0N8V8YlsGEEF4HlgVCdanka4Cp5XgpvHvdPnz4qv6\ne+pYZ/w1EXYkuBFq+HyurcU2CHhei/+X1TZzEJurEyjlsVFpYQFW7ewCgLEL\nvvYoxrRk3/2k7aZb0Y4DxosK5D2UQ7N22Mbm7qZ3L2VeKAUIksAVyTqasL11\nLtlF8unuvwc6VF4UykbFuEam88XLBCCWoBkh+fOnkPuUZqHSEC8s0RNAPNEb\nY4bBfjL0wfUsCH00pGcHi76WZe0xIU6Coeo5ekl3MN5r18hLtHLwmiTPgRZ2\ns6GwUoM+gII50Kki098DauGWAIQFsqWkRcQB8o6s8vjrW83ajjKh8Jcnn80B\ngQ3/Q/DAEssAgGOPYisaqeycvQ/NX23Idl53vR58O24b7i1fJc0Uk0ubEq2f\ndqIj\r\n=aQaD\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_9.4.0_1530303519993_0.26282686760871266"},"_hasShrinkwrap":false},"9.4.1":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.4.1","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^3.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1","semver":"^5.5.0"},"devDependencies":{"async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^5.0.0","glob":"^7.1.1","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^1.2.0","needle":"^2.2.0","nyc":"^12.0.1","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.2.0","rimraf":"^2.6.2","semantic-release":"^15.0.0","superagent":"^3.8.2","tap":"^12.0.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md && markdown-toc -i CONTRIBUTING.md ","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"5aa10812a262721170f194bba411dcb7876bf4dd","homepage":"https://github.com/nock/nock#readme","_id":"nock@9.4.1","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-VJ/02wdCfqJP8syNI5q2CFbejAqN0NLEPvA/nNcGXn3U8GoivtmICmTK3BOqLbfJyaDCXF0Jq+lkQUXBJ1ZMtw==","shasum":"d9a635f8f9cb861d4b63dc3e1318770266506239","tarball":"https://registry.npmjs.org/nock/-/nock-9.4.1.tgz","fileCount":35,"unpackedSize":155271,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbOl07CRA9TVsSAnZWagAAbhQQAJIz0Fe7cCc62Y0DrXmo\nux/jImI45y0RwfIMB+kwKlMhRSnqNbLx3PT/1H2J+Z/m5mjMMjSNBUku2g7B\nSuwdMxitj3w3698Kfd7Qsjw4PPt6bdnos7y79SKtAM0jIdGQM/j3O18jj+hE\nX6LtDEA7CvZazW0b8YXuPzrtCWqe7EzNHF6frRVJ6Sp9CRay8/8xaJqGVz1Z\nhvwsm0O3IHOLI7r7OeOOcgtdUHk/07e63fGC/gX1pEAmQrz4c4dSVi6eNAYw\nmhsjHVc0t2D+V5ve9xrX823+D+yYkkKPTGHtovIonuYhwbYDQd13lI1XpGWD\nywr7EE1w4GltMlXQ46QaT3Ezd04vEy9JJ1An4rSocbOcSYbAXCNTeG7WhuPR\nVUc3ooW1+7SNQw2A1VOAFNoJw/+QBNbfyXX+SBnrMUwvoGjTLRIF4/xBVH0W\ncYyNSYYHZrPU+IE6XzM0ckrQv1jrb+2T2vZuZAVed2VwQZxx7+gumPt5FV7p\n0hcdSFJ07lGPrgbsnA83hmHoDsrnhwyziVGhEhAx8sBYyf4q3+1YeCqOWZQN\n7J2ecgqXWDk/69uCVjylHYADnb4VXujRLd5ew+HVPz6wxotlkScvUtxF+/Oh\nH+FLy9/TczgZRvnrz5nzCCzrbhcseFxPioMrrdQTmXVyiF7vMr9koGGXc92l\n2oqe\r\n=Gb/e\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_9.4.1_1530551611779_0.08776532513785806"},"_hasShrinkwrap":false},"9.4.2":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.4.2","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^3.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1","semver":"^5.5.0"},"devDependencies":{"async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^5.0.0","glob":"^7.1.1","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^1.2.0","needle":"^2.2.0","nyc":"^12.0.1","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.2.0","rimraf":"^2.6.2","semantic-release":"^15.0.0","superagent":"^3.8.2","tap":"^12.0.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md && markdown-toc -i CONTRIBUTING.md ","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"7fd2329e54085d2b10e4f9fd8bd779065981715f","homepage":"https://github.com/nock/nock#readme","_id":"nock@9.4.2","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-WFRlGfJJ17uyXKAIFKXqoq5o49W7aYjfH3Zges133kYGwL6PuSjthP50osQJJNMQoz0f0SodmREjzo8eLh/Bxw==","shasum":"bab58a44b5781bdb74d7808673a2dbeefafb898d","tarball":"https://registry.npmjs.org/nock/-/nock-9.4.2.tgz","fileCount":35,"unpackedSize":155232,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbRNZcCRA9TVsSAnZWagAARPUP/Ag7Ni1mE4ClD7166B2b\nuZZYEwVSke3kuFXZouOyp+Y9SrBh1Ml+aCYyoIzQXetYQUf0pP2hzfyfUnFk\nLaJmcDJvOv0s1SG7+tJRm5XoYRWyiFaFCTCD8doJcsYuV1UBML8+TCH+0f1l\n8HoyGqA/8Ur7oLMVkNN16kYvDZ59dZmn+MZycXPIUvC7XqzQRHn41teTp3Xj\nUEjxlM1FbS7csMXpJ/P09KokjMPX+FTUM8IX02iguf+B32FIvUJbg0YL6cWv\ngYGjC1DbD6+ep8fCd03ERIddq9t/oJdShScJvhl0NbBxZwzplJjMZthw77HE\nJL32VPMFVjQvVBaXVD1IhW5pBgu+eNIlbuBALbnvJlT9pp1pt4SYrhlq7RdA\n8SEL3hPl7LfA2XwEImw3xNsNPyVCvTQQL2UEdVp7LXcOeFWgDKYyk2yJUEIe\nHcpeJXxuhscgtxAaGy3p+wy+nzVlITxXpERYwA50iHnFaY/54s+0AGWkep03\nYffYlv1NACIAxWo/vu/8ejuatzrdOklhvMaPn1dluBNEfERR2sChKHMyDj4F\n9pB+YQi6eJ/sJobnPXZknqLVBSiFS9K2qUKLcuS/dm056E9Z+a6+j3GcXdvw\nCy+0sGYeUDkJGnJlaehr3DGSstgk3P79uDTbMeDeDF9+Gq6ue3dyjBvjNshE\nPpYd\r\n=WoZM\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_9.4.2_1531237980069_0.8286168316829134"},"_hasShrinkwrap":false},"9.4.3":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.4.3","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^3.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1","semver":"^5.5.0"},"devDependencies":{"async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^5.0.0","glob":"^7.1.1","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","istanbul":"^0.4.2","markdown-toc":"^1.2.0","needle":"^2.2.0","nyc":"^12.0.1","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.2.0","rimraf":"^2.6.2","semantic-release":"^15.0.0","superagent":"^3.8.2","tap":"^12.0.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md && markdown-toc -i CONTRIBUTING.md ","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"9373382003faeaa2f24cc2bee447251761e3b000","homepage":"https://github.com/nock/nock#readme","_id":"nock@9.4.3","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-inJFXR3REBvHbZy6nVVwaoKbVTR8Y4Ag051Y/pd2pNPy7HDYtQkenfilBwxToNsW9p1RTeBUml4SPK/mWrFihA==","shasum":"26bbc1280898f442c9814085f05199cab857a04c","tarball":"https://registry.npmjs.org/nock/-/nock-9.4.3.tgz","fileCount":35,"unpackedSize":155260,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbVkMxCRA9TVsSAnZWagAAIfEQAKJEHtxZ6mOIDI/62xUD\n+D/sYA5C46eCK+G7RypxPN8wHtBB6/WvdOFowEeqaRvaNDbw7BADEEwgZGmp\noH9+4v59C/+SfbybYjvUenOSwnYbGKXT96jg9LZzMjLhDTnos8r5I4RhRcqP\nmEzLK4npOgOSpP7hvtBzGzXlvG7LQTcLzGU52aLEDOXx396nZtnqFD2k0ADr\nnC2M9HOvIIwJdtqzNp6lQY8JK2fYQguh6udvIgoQ6sVOc7wUyCGOyFQzIZVC\nqOFcuNp4jv8scasTlDhNao/q0UVdD+G8rFJd6XCAxqwuEyTyId4eMnLg9UMh\nldGEfw5HYfPtoqAtti7TnRSF65rCqg9PpXn3yjezdt6folEaMEnk/BUTEi6I\n2DAYw7xUSLWXyn8IlrHon0BW/OZQ/552nA9Q2jbeM1uj2j3lWRIUL9ReY+e/\nt1v2AWgb1q75zSA5hQyOTNW94k4dKoIVwxxBPMxdrscmrRMSMBuA26M3vweb\nhMmF4YyJJTLqqSIEawNTTispvh7nkPBX8uWoGSnNKWFVGfBTKw5vbSD8+hrS\n41nO8do3kUxh8uvPyCzVRlIGOMpbRtOQVMv085afnV6Rcf4cyH4VvHXD47kx\n7gVnwn1zqKNYa5V5KyM/wKdv2TB6DO9tn0nV2KanXwQUs7qqpLhpnePqhRKl\nRdc3\r\n=uSXA\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_9.4.3_1532379952953_0.4953566114966672"},"_hasShrinkwrap":false},"9.4.4":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.4.4","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^3.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1","semver":"^5.5.0"},"devDependencies":{"async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^5.0.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","markdown-toc":"^1.2.0","needle":"^2.2.0","nyc":"^12.0.1","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.2.0","rimraf":"^2.6.2","semantic-release":"^15.0.0","superagent":"^3.8.2","tap":"^12.0.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md && markdown-toc -i CONTRIBUTING.md ","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"907be86083424b2d45d35543d4470ae84c861bdc","homepage":"https://github.com/nock/nock#readme","_id":"nock@9.4.4","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-HrF96ecwONEv7tW8bk79kwc9mshxWAw8WfEPv5LStc0X25bsoWgescTtmevFSetu3gdjOypnUtniubYSz+5DNA==","shasum":"d58a6d54ca26735d792aa776801cd0623789bdb6","tarball":"https://registry.npmjs.org/nock/-/nock-9.4.4.tgz","fileCount":36,"unpackedSize":155758,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbYPdUCRA9TVsSAnZWagAAdpsP/izb4VfWN6iyJJ+JLFQD\n7hmYKSjSwo8tWffyWdImDDlEw/sm5mt64tgnsClCJjWCdRsc5ljK7TcjppWv\nqeOem7b9lB9kSrlzE9QvYW4yUa4NFOrAFI4PXzWRPPSi3PBKXr480CQiNba3\nzHGcBgPTA+ehouxOgt9JW4LXb1rLQ+QNswNc6T7yGyHbicyHJYSeaX5jVYP9\nwnVTNcWwbv+YmqNv87bjOK/yJM96PN6lykt/WxW0zab10Ow2rTjXdZHu+Vl9\njYswSSlzDgc/bWhpmYU9ZQS1qWwYFIYt1Vc4QRS6dMtQks0GkVS69McBqf+M\nhXgst1Fk/p23bQ48e8TKnt/mJqxDYY2Du3mbyUevgLNAz1RzK6Vghx6cNXbg\nPHtLfq1E7urnQINwwvMKH+/ZmhpwaRyFNjR4FuPMdOHoZB9RgeqH+qJoCfaE\nyMgJgiK1FE5GwzRw+qwWOx4tqEuRtvKZtqcTxhWfjYOUN5ARSutHKGQktUN5\n2vOpnUjUPcCjE0Tmc2KtZwes0SWi0B4cY4Cs+DD4OG+uVdoMOmQNdyzcOu9q\nh44jDIBdIt3Q+8RjGh7KVISleQbYwNdtKpz/QH+PAWVUDh21Bys0rL035ATw\navh1L8aYjvj9nuU03j3JA0+Xom/gtE4JWFZSwlP69+P5Fne0EW2ntPNgjVpQ\ngQmD\r\n=XKoH\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_9.4.4_1533081428242_0.3512341257704934"},"_hasShrinkwrap":false},"9.5.0":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.5.0","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^3.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1","semver":"^5.5.0"},"devDependencies":{"async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^5.0.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","markdown-toc":"^1.2.0","needle":"^2.2.0","nyc":"^12.0.1","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.2.0","rimraf":"^2.6.2","semantic-release":"^15.0.0","superagent":"^3.8.2","tap":"^12.0.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md && markdown-toc -i CONTRIBUTING.md ","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"50ab208b2b3e9787d76fb39e7b1a6f50ecda2795","homepage":"https://github.com/nock/nock#readme","_id":"nock@9.5.0","_npmVersion":"6.3.0","_nodeVersion":"8.11.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-dEJkRXBcJ3keGH8Cz5jIBMkz4bsckGN6Uf2r7OzFEHMK/B08u3J5l8nw8Eh+BmsSA+ZIa1T+B0BgBJnkHgaInA==","shasum":"ff778e9e6ad0556c25757d4e979f2191e58d2d74","tarball":"https://registry.npmjs.org/nock/-/nock-9.5.0.tgz","fileCount":36,"unpackedSize":156166,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbadE0CRA9TVsSAnZWagAA5+cP/jQ0e1GF5V2RZklwB53t\nDUnH5XTeNfvqXGc7yIlnTy41JMWo2GVpKEWZSg+xM6KPTcgKV+xQEtS6lQ1b\n1Tu4LurfLEXiT88zW4PxDBG6emB6vwHa1azqZ2HGvfEcXTwmvxxvlu9zfFmU\nqfkuVsV1WF6o48oRjIG6kT+ESoVYjidt08973xTuMgK65gg6C5dH625CcTO2\nber30SyAi3uz7kR6XcSoPgRFvBPRArlivo36O2/tScCXI1z4vNMlXIgpbq9U\nPDciP0cD2xXg0a6Hhw2OounsG7f277yPY/ApVlwwvW26wkvjeqdFQ7frrMZb\noytbku53ATVsSoN93qHbkQM+ltHtNvtLbGz8x1hHOSNnxH8R1BvbkpuaZl8g\nZ2k1LYK/7FRaBpSd2F9iHUEj7R58A8lIhA1IKbITHvVrmigF9hUesmSgYBCC\nXLJYl3YfEAdzXN9l9/biVXaMr82KiHXgxkH5TCcnpUgrbDwVlUcYZDJ15Jcw\n3MhIFgO1gP6KBYDrbPgooNShOvWrc3Kr54Oyhte+6qXZwKHvkd8usvapqmZK\niEq/iaY3WOHIXKEiroNxeTZYRGWwyIpDJJZbdKAAk1MwTDNMjiPsQrXQk4fh\nZpoJqf/z6R5iiO0VzvrMX5hcgQju73og0O0cMlZ6rr1a2nzkAv4G1gnE2ZuK\nO/H4\r\n=/T1H\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_9.5.0_1533661491811_0.4937251479722773"},"_hasShrinkwrap":false},"9.6.0":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.6.0","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^3.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1","semver":"^5.5.0"},"devDependencies":{"async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^5.0.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","markdown-toc":"^1.2.0","needle":"^2.2.0","nyc":"^12.0.1","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.2.0","rimraf":"^2.6.2","semantic-release":"^15.0.0","superagent":"^3.8.2","tap":"^12.0.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md && markdown-toc -i CONTRIBUTING.md ","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"d66694942ee2dc2617ef11cfd348bcf974509ee6","homepage":"https://github.com/nock/nock#readme","_id":"nock@9.6.0","_npmVersion":"6.3.0","_nodeVersion":"8.11.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-8IjLHE77TskN/hT7C5fy4ZsvtAaGY/4Ptn1uwTxZ8EQjcm/gZPn5fahKcRVATSkA7vC/hwUixPFwgbpWyOFEkA==","shasum":"df273defe35fd31c3ec9039c570e64339d31d68b","tarball":"https://registry.npmjs.org/nock/-/nock-9.6.0.tgz","fileCount":36,"unpackedSize":156693,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJba2PBCRA9TVsSAnZWagAAOYgP/1RZVqiNIUvDh0X2cz6N\nv14IzOfmnjdr1hpRrmCAXXF0qAfJie1mreraaX4BkapFX9jZ0nyHtkAHiABK\n+pycCJCET0zYuX2Mm0N4glASZXtkeXFT3YNASCeD0RGXDkHTz44t04H1J3Jc\nUtNaxcMBOMueZAwqh7UVG2shoro7vJJmgGzo0pjZF6FwabuED1y0a7bKZTxk\n8xNENS0BGsoWX7v1vDnSgnRAjuBYQBzOmCg7mavwlEkNPz1axcjxNKxc4abh\n7GcgYJ4xywcPDL9yC71Y5C1viCGiQ1OMBvOF1d5N+D6jT19FIW1zQ3IY7Qzi\nZy4rA1tDuedfzQvngZxgYZl/7T5//xI7VJ1Oc5gRNpbr3JGqmiweZfXqOmPk\nBwp1169z9RRHG9FE+zjekV4uF2lqhwjQmSbC1A5WoQOU97U4ryVnTMu3XQLp\nG/a2xg4iFh64JevUORR9U2zj1liibDEChwNsU6e1aeLuRwNCdqpU5Fh4OL/2\nd504kbscjby1slO1sLR7VCl+CpZNxoyZvGMK2PTmLBn/MsOWAv6VGgRv7r8P\nJoT3dY3AmdjjMRWU4H4pOt6emIovvG+gCBj445ZvCYajOIn3j/1RUHNRLYGx\nc+WSaJVqSslgEO3uGAgDiS0bv2S0t+wOza1hdLZnIlY5rcFelxdEYU+dyH+O\njBcz\r\n=obXf\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_9.6.0_1533764545148_0.6901543113688866"},"_hasShrinkwrap":false},"9.6.1":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"9.6.1","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^3.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1","semver":"^5.5.0"},"devDependencies":{"async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^5.0.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","markdown-toc":"^1.2.0","needle":"^2.2.2","nyc":"^12.0.1","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.2.0","rimraf":"^2.6.2","semantic-release":"^15.0.0","superagent":"^3.8.2","tap":"^12.0.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint '**/*.js'","toc":"markdown-toc -i README.md && markdown-toc -i CONTRIBUTING.md ","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"80da59cab336352834baeda8c5653e63249d3dbc","homepage":"https://github.com/nock/nock#readme","_id":"nock@9.6.1","_npmVersion":"6.3.0","_nodeVersion":"8.11.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-EDgl/WgNQ0C1BZZlASOQkQdE6tAWXJi8QQlugqzN64JJkvZ7ILijZuG24r4vCC7yOfnm6HKpne5AGExLGCeBWg==","shasum":"d96e099be9bc1d0189a77f4490bbbb265c381b49","tarball":"https://registry.npmjs.org/nock/-/nock-9.6.1.tgz","fileCount":36,"unpackedSize":159907,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbcbcvCRA9TVsSAnZWagAA/Q4P/3MvSxZJp54bkO4hkQLf\nLWjY7JBPmZTX2wujSwABgqL//i/OrkBAwJqR9pC+LAlZrPe/gFEMVWerDsnb\neIHPi08STm27aPHw4k2kJu+jTgwGgvaj08nJ3pTl1ztE4O+QCQK9XwBcEleg\nxm/cgLMcpgKp0mEjxB9An6kM5MG49MN8tWjXmdx/LFsSYuDqRR8LZUMUJtUb\nltdQGaQTcKHji/rnl0QP5TjWRlAllMGiKo6EFWeJvTa4EUSyjQouuLhAVzC8\nF64sQxtCK66aDitkANG/jFbmvlVaIFtyjJbwPx67dSDa2MiNFVw8u8X9nh2H\nXRyp6EQdHNgpE609e/5V4L8I7FAourzGO/9Tfm7Wp16FL23RgrIWkH1xHZhM\n431i4/k6GJtTnn7ZaKS6K+zaGLXpfiXiFYrGQLNiy7aUUuz41t6J7X3+Ojub\nTZTto80wR4Pvutb+oN54enKJEt7eq3k8Ycz1FGG/1diQ8cTuTg/mUHECBpz+\nCmFRlW3HsM81TeuQoyZa/0AQBeIjMGAPJmduFmgKSw656TgiSJnhBsQ3/sSw\neZpwcfpSUU/01fhKW4iMDrkG6NeVPgBNnCKGmR1bXJPipNIaElyUWevvOlch\n4i9MGXWeMTJnXRv4tiTgcscaODTDPnc6mBFvjt4Z/R94Zt4JWQ8EY80EAGuz\nitv3\r\n=y/hM\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_9.6.1_1534179118974_0.4271191240318568"},"_hasShrinkwrap":false},"10.0.0":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"10.0.0","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^3.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1","semver":"^5.5.0"},"devDependencies":{"async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^5.0.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","markdown-toc":"^1.2.0","needle":"^2.2.2","nyc":"^12.0.1","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.2.0","rimraf":"^2.6.2","semantic-release":"^15.0.0","superagent":"^3.8.2","tap":"^12.0.0"},"scripts":{"unit":"tap --harmony ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","coverage":"nyc tap --harmony ./tests/test_*.js","coveralls":"cat ./coverage/lcov.info | coveralls","lint":"eslint \"**/*.js\"","toc":"markdown-toc -i README.md && markdown-toc -i CONTRIBUTING.md ","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"a7cdc71ec12e173b2711abecbfeb9604f18083cb","homepage":"https://github.com/nock/nock#readme","_id":"nock@10.0.0","_npmVersion":"6.4.1","_nodeVersion":"8.12.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-hE0O9Uhrg7uOpAqnA6ZfnvCS/TZy0HJgMslJ829E7ZuRytcS86/LllupHDD6Tl8fFKQ24kWe1ikX3MCrKkwaaQ==","shasum":"bcbd2c003961baffcae2ecd28e074574233d3869","tarball":"https://registry.npmjs.org/nock/-/nock-10.0.0.tgz","fileCount":42,"unpackedSize":168820,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbnA+WCRA9TVsSAnZWagAAMk4P/0dunid46rhmFgqJtrOY\n6B89jbqZeu+z1XE6xAUbSY+Rkb8JPsHX0jp9VakDZVUpRxGxVqEtqZP33VfA\nS775j9LkSI8oy/+06lOef/7vDF+DQdiSaG4Fawku7Jlvksbhx0R7GlgvyvPe\nF+JJ5cYfm5aWocbo9yWTsLsExYrVOYUM/trnhmw7KBuS/+OsMxVK59T8jm+7\nqcBnIy4P4gf6fgx/1uKdbanKSq98TB7HkhrMaVbvKt44hHZ723Z8CpPqUqio\nocv31OZpq3HXE1EyjkCm+CtkcTozUyMeZZsD+2IJgmd2hT7wuQg3iRjEKVhv\n8IMMyFq4+0QgkyHVX2gORH4m/JsuTs1K2+7fCMyemNN2YbZVghiv3wJOT+63\nWZpiFZ1K9LmehA9k9JqW1YAmFhgDDcGbXQ6vexDxLq3go5OWB635MSEPek0P\ndo30vEtdbXY9TdwlkvT6m2/St4A2Brc5i8un84HYnQMbdW0p2ePs4HJqvlcO\n08F4LRvwEmp4acc1x/FxUZmc4mgrxnoincUlCoVXz2hDFpJMRrgbxJvIZ7Tf\nasBGvSn1+q2TtjZi8gPem4/uJaLq6a1ZOX23QpNllp0EH4sRXrNjkcyH30lc\nacz80JNg682bdmPN/dG3oBqdRre0VmWGKdLX4IBjI1c+d2E7YBWZX+9zHoIy\nBud2\r\n=/0w+\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_10.0.0_1536954261343_0.2781918021883516"},"_hasShrinkwrap":false},"10.0.1":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"10.0.1","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"contributors":[{"name":"Bin Chang","url":"https://github.com/BinChang"},{"name":"Roman Hotsiy","url":"https://github.com/RomanGotsiy"},{"name":"Jeffrey Jagoda","url":"https://github.com/jagoda"},{"name":"Hidenari Nozaki","url":"https://github.com/ghiden"},{"name":"Ken Sheedlo","url":"https://github.com/ksheedlo"},{"name":"Douglas Eggleton","url":"https://github.com/douglaseggleton"},{"name":"José F. Romaniello","url":"https://github.com/jfromaniello"},{"name":"Benjamin Urban","url":"https://github.com/benurb"},{"name":"Justin","url":"https://github.com/justincy"},{"name":"Brett Porter"},{"name":"Matt Olson"},{"name":"Rémy HUBSCHER"},{"name":"Roly Fentanes"},{"name":"Alexander Simmerl"},{"name":"Pedro Teixeira"},{"name":"Nuno Job"},{"name":"Ian Young"},{"name":"nilsbunger"},{"name":"bacchusrx","email":"bacchusrx@eightstar.ca"},{"name":"Fabiano França"},{"name":"Sascha Drews"},{"name":"Mike Swift"},{"name":"James Herdman"},{"name":"David Björklund"},{"name":"Andrew Kramolisch"},{"name":"Balazs Nagy"},{"name":"Brian J Brennan"},{"name":"Attila Incze"},{"name":"Mac Angell"},{"name":"Tom Hosford"},{"name":"Aurélien Thieriot"},{"name":"Alex Zylman"},{"name":"Celestino Gomes","email":"contact@tinogomes.com"},{"name":"David Rousselie"},{"name":"spenceralger"},{"name":"Ivan Erceg","email":"ivan@softwaremarbles.com","url":"https://github.com/ierceg"},{"name":"Keith Laban","email":"kelaban17@gmail.com","url":"https://github.com/kelaban"},{"name":"Rui Marinho","email":"ruipmarinho@gmail.com","url":"https://github.com/ruimarinho"},{"name":"David Pate","email":"davidtpate@gmail.com","url":"https://github.com/DavidTPate"},{"name":"Matt Oakes","url":"https://github.com/matto1990"},{"name":"Ian Walker-Sperber","url":"https://github.com/ianwsperber"}],"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1","semver":"^5.5.0"},"devDependencies":{"async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^5.0.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","markdown-toc":"^1.2.0","needle":"^2.2.2","nyc":"^12.0.1","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.2.0","rimraf":"^2.6.2","semantic-release":"^15.0.0","superagent":"^3.8.2","tap":"^12.0.0"},"scripts":{"unit":"tap --coverage ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","toc":"markdown-toc -i README.md && markdown-toc -i CONTRIBUTING.md ","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"3131313451d3e53b2223e61b72c7f8fdaebe1609","homepage":"https://github.com/nock/nock#readme","_id":"nock@10.0.1","_npmVersion":"6.4.1","_nodeVersion":"8.12.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-M0aL9IDbUFURmokoXqejZQybZk8EtlYjUBjaoICVbW62uOlyPRsnEsceyOlUik4spCOt50ptwM4BTPt20ITtcQ==","shasum":"71eeb580c2995878e582b3e32420daead9eb44f7","tarball":"https://registry.npmjs.org/nock/-/nock-10.0.1.tgz","fileCount":42,"unpackedSize":167625,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbvDTpCRA9TVsSAnZWagAA7tQP/jflaX8+yiMr6bzfVgzE\nR894H6NvMdg6BnS8JfOt4/gYtCcYtBKFmQ27t5EDdWk1++ygcj8TaZR3kPf0\nbfbwdROCmZzi6EksICSxhj6dvYP6Yr9f6+JnxqKYxGTq6RyyPGsrUhGlJmCa\nUKutfDRuJthzVsoTM5jcet1NurGWuYc03t3gftiTo1cmr/XV5No/RPYcY7Rl\nc2r8crxe1Qq/T7XH2W+sguGplPAuHwk3+8HzO6fLws8Ldek6VUjeQSm6fNgr\nbvPjAVSs6X3eemGuYH7xrJPPh8nCalYSqsUj8pHe82vjv3qkqOnJEbQbZSMQ\n3fu9bpxpTq7Etf6QYBH0dbh8naqMy7z2uOwDeD16Yih09dRwuvRPf0+OTQgP\nHp/eUvm0Q/FpHKCeBZsyLm3ZKTyjMlHSdlxnV/0Ou8Uk/Dnsuf20ZwybxP5a\ntozy0vpyMlADL15iwCbnarx0OJ6ASkOJp/rviGc1NveeLC+4ZvheNjNf3/i7\npQiDQZbb8tlKihvfgQjHxjQmuWbsDptkDQlTcMCeQCIpPrh5mKU+e2+uIzcN\nt1quPTBAqAtsjgulBLn6tjoFrg0pNKCGx/j0T3u7GLrTZwk2vU0vbCcOl5fo\npzL8xNCTFyc7iLaFu+L7YPE3tByzC4NAl1PzgwyTypIDFvoDMlxNOhbV3lie\nFTGg\r\n=mFY2\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_10.0.1_1539060968450_0.7061199895544794"},"_hasShrinkwrap":false},"10.0.2":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"10.0.2","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1","semver":"^5.5.0"},"devDependencies":{"async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^5.0.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","markdown-toc":"^1.2.0","needle":"^2.2.2","nyc":"^12.0.1","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.2.0","rimraf":"^2.6.2","semantic-release":"^15.0.0","superagent":"^3.8.2","tap":"^12.0.0"},"scripts":{"unit":"tap --coverage ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","toc":"markdown-toc -i README.md && markdown-toc -i CONTRIBUTING.md ","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"598245c47f4425530158f7f34c68f646bb803a8f","homepage":"https://github.com/nock/nock#readme","_id":"nock@10.0.2","_npmVersion":"6.4.1","_nodeVersion":"10.13.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-uWrdlRzG28SXM5yqYsUHfYBRqljF8P6aTRDh6Y5kTgs/Q4GB59QWlpiegmDHQouvmX/rDyKkC/nk+k4nA+QPNw==","shasum":"9e9a92253808e480a8163c2a21fc12937c02c3b0","tarball":"https://registry.npmjs.org/nock/-/nock-10.0.2.tgz","fileCount":42,"unpackedSize":167018,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb3cbpCRA9TVsSAnZWagAA2iQP/ig+wgIRacQQRpcqI5OQ\nDQZ8aZHx5d+Pp0rkok0UlGCyE6QIsHlfBvFCUfygTzIYC01p+m7WAISWkMHY\nX7lUuIegCJJ3UPmA57hN44VbgQ3AHQPrB3POivdxvs7PwvrEiSE2q1Sik3G2\ndbpawapHpcBwuvXEiAPMY35YOs7Nw8htL2IB3ngQCuZVao7txVTLN/4Ldz0T\nhWJkN/VG41m0qna2MDU3hc5mJ8f+dI6xcKJqLsfVZjVftl9VMigA5lFrF26u\nBxNn8JOiBRPQQtR1GMowQiuuFQNiln+4M3MyxlDwbrx3BBqSlFUVrH/8EYJ8\nwsGYxz9GtvDw8t6u7Ve1AkLJghmcLQNPf/UwmKzqqEL6HoU8RugqVgQeLjlf\niWHThinUmUa6F2DjNyI3olv6ozQwQqAWnypD/IiJGyGl5E0jn//TXZBu69JR\nRsFP0fmRDGs+It+Ckl+r4xVA/pxjSiI5MzoRqSHFv8eeydFirBgSJ3HViiIP\nqcB56OkEkr5pbUHuSjKiNYXV/6BJKuBEHjLCb+61i7tDSCll97nrpO4Y4wUl\nsheG0E1krttjcJ9/adCAS+JTyhzAz0Pli87189mda9X/EHg/IIkOpAzxVUGP\npUWSJFE2+rxNC0rXKjtwBaDIqIs1nLCzxSiE+g9mY48L7AbEHqL3Kr7N1rS5\nK35q\r\n=teQX\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_10.0.2_1541261032207_0.8876946988518906"},"_hasShrinkwrap":false},"10.0.3":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"10.0.3","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1","semver":"^5.5.0"},"devDependencies":{"async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^5.0.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","markdown-toc":"^1.2.0","needle":"^2.2.2","nyc":"^12.0.1","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.2.0","rimraf":"^2.6.2","semantic-release":"^15.0.0","superagent":"^4.0.0","tap":"^12.0.0"},"scripts":{"unit":"tap --coverage ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","toc":"markdown-toc -i README.md && markdown-toc -i CONTRIBUTING.md ","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"5ae978b6929b63694b9fded42ba0d55bdb6565f7","homepage":"https://github.com/nock/nock#readme","_id":"nock@10.0.3","_npmVersion":"6.4.1","_nodeVersion":"10.14.1","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-nR3wVeDsEygk3qBdj8D/QLOjoXqTRGUaWaxJW+RVfcQKm0ByaYDiq9crsp02g1725V3EGOPrZPXzphqfhosrlA==","shasum":"4c92596592a2f6c8a63da053fc9f81149013150d","tarball":"https://registry.npmjs.org/nock/-/nock-10.0.3.tgz","fileCount":42,"unpackedSize":167177,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcBawKCRA9TVsSAnZWagAA8KAP/3KJ5GkjrgnmqsZSb2PA\nKhAs8W1icp6cWjbvvDGXxa0laObXXteZos4ghb1O2x4DUdOiQstesZjHR2HV\n44gLWGAMlDYdIFo3A8C5fkhHlY1lMR+aD4KUPwsq5S+rKdRhwyZvKVOhkpKn\nmOpWDW7+1Oyg1w9p4YKYKQphV2UMrAeOXIUTUUCpr1Negy3uG8KQIebwv/xk\njFvbH8ZBYH1b53revcQe0wXd5U39D7PTmyKPKZYaITave6wEtKbJIEE7Zsje\nPy9sZCcSbxoSTta8GLW3k1nYQpc6MetuzS6SQqKPw37nsO75aTjjeMgZtV9v\n1hXbM7P/gNalY0w4CHVwiLUKz+uAveeVKH3QDnrAoYIgevckVfKjchEl9sPG\nMFF03KrHiJ0T2/POG6nFmo/pPS8JCHY2X76rqialBWowJ3yVznutw1huuA3s\nk8arYRrF8wmth/BI+OnOoGH/qumK0TjGfGwYgzt4T1Hwf3+9wViT0vcklC0o\nyz8L00CAKtvoCZcxcg3H3DFOZLerOYi3j0TnghSk/6r3nKNgic53/cTIBZe7\nTYEE+8DHU25ju0ShTVOGIhPaOeXIG9rZVhpNSzjL7j8r4blD2KBHEFsfBZHA\njJs3VwqGvUpuLBWQPGt5zb50Fq50ikSZfCdWDGqKB32MTqYVMTfbl1O5+cnn\ngYzx\r\n=Pr13\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_10.0.3_1543875593652_0.8415226941120615"},"_hasShrinkwrap":false},"10.0.4":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"10.0.4","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":["node >= 4.0"],"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1","semver":"^5.5.0"},"devDependencies":{"async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^5.0.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","markdown-toc":"^1.2.0","needle":"^2.2.2","nyc":"^12.0.1","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.2.0","rimraf":"^2.6.2","semantic-release":"^15.0.0","superagent":"^4.0.0","tap":"^12.0.0"},"scripts":{"unit":"tap --coverage ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","toc":"markdown-toc -i README.md && markdown-toc -i CONTRIBUTING.md ","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/test_*.js"]},"license":"MIT","gitHead":"a90f5435b2bf1c6718cd69f5a01feff40e96a3bf","homepage":"https://github.com/nock/nock#readme","_id":"nock@10.0.4","_npmVersion":"6.4.1","_nodeVersion":"10.14.1","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-+kzpiUmJHl2j/ZdJG4Mc3oHJc4F1Tm9j0KV/SLhLKZQGTQkeK2z1XxhVIbM2evP3yn0RVlp7L1xZNIy84J8/1A==","shasum":"44f5dcfe0a6b09f95d541f6b3f057cfabbbd2a3a","tarball":"https://registry.npmjs.org/nock/-/nock-10.0.4.tgz","fileCount":42,"unpackedSize":167322,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcCyxqCRA9TVsSAnZWagAAu+8QAJe59u9frabjtfeUAOHW\nqQE3KESEDsyaEyNtAvdW7hMgTyKOT3nuguEy91DKgYSm1dkhD3HVf8jZetUS\nAmacXo2ks4YuyN+2i4gmQaDTge2wy9UXxl9+RNORDJ1iHR6EytMeeT6IYHay\npwOkFljHHPcq1qiqW6ZD7qYMkEQv96JjtoadrxLngKQiW1Xw8empiyovp7DS\nhJ/DHv20rutSV2odcjpQ8lTf4nzJRJxA2zgD+MVcwDRdBabcq/nkEGURajUr\nKuq/EUUcL90E7SwRIpaEKFf0iga4R0VMVJZqvo/1PRbfojec2yEM9cjo9T2/\n33FSibctEmb7cpm/rea8pMytyS7h6+AUc23rNlnB/NjCKzDjB9foeOf4ybtp\nifbNJM6099NtSGs5STpJicYP5aY4HEjkTWtQXk1XQKUIzUkUSTw0gG3rDqtL\n3+Gw5XVYzXGTSoDv1h0u9y4ilolK7UsrR9d7Bp3EC6Qn0cpZQB9TBC+eyjKD\nqaYk9IecUmmh5OGSG2951QeyBqGMGFwg8veJyfeaJE8PKNGLlA158t9TFxGv\nOIgemBi8uFwcwdN5iG8EisRC59QVu7FEa86zFme/Ulb9p2aDYFhuATWEz8BE\nAKvJqRg4xTzDm5olyvr/3u9V1Q7xVDjfBsiGCiTPAQBxaP9eM5fHGnSJrs/P\nq0xI\r\n=WDiz\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_10.0.4_1544236136811_0.004446024500786683"},"_hasShrinkwrap":false},"11.0.0-beta.1":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.1","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":["node >= 8.0"],"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1","semver":"^5.5.0"},"devDependencies":{"acorn":"^6.0.4","async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^5.0.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","markdown-toc":"^1.2.0","needle":"^2.2.2","nyc":"^12.0.1","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.2.0","rimraf":"^2.6.2","semantic-release":"^16.0.0-beta.10","superagent":"^4.0.0","tap":"^12.0.0"},"scripts":{"unit":"tap --coverage ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","toc":"markdown-toc -i README.md && markdown-toc -i CONTRIBUTING.md ","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"e792400bbfe0ee506c609b54b4053b37be3ed9f0","readme":"# Nock\n\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=master)](https://travis-ci.org/nock/nock)\n[![Coverage Status](https://coveralls.io/repos/github/nock/nock/badge.svg?branch=master)](https://coveralls.io/github/nock/nock?branch=master)\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n> HTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  * [Node version support](#node-version-support)\n- [Usage](#usage)\n  * [READ THIS! - About interceptors](#read-this---about-interceptors)\n  * [Specifying hostname](#specifying-hostname)\n  * [Specifying path](#specifying-path)\n  * [Specifying request body](#specifying-request-body)\n  * [Specifying request query string](#specifying-request-query-string)\n  * [Specifying replies](#specifying-replies)\n      - [Access original request and headers](#access-original-request-and-headers)\n    + [Replying with errors](#replying-with-errors)\n  * [Specifying headers](#specifying-headers)\n    + [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    + [Specifying Request Headers](#specifying-request-headers)\n    + [Specifying Reply Headers](#specifying-reply-headers)\n    + [Default Reply Headers](#default-reply-headers)\n    + [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    + [Including Date Header Automatically](#including-date-header-automatically)\n  * [HTTP Verbs](#http-verbs)\n  * [Support for HTTP and HTTPS](#support-for-http-and-https)\n  * [Non-standard ports](#non-standard-ports)\n  * [Repeat response n times](#repeat-response-n-times)\n  * [Delay the response body](#delay-the-response-body)\n  * [Delay the response](#delay-the-response)\n  * [Delay the connection](#delay-the-connection)\n  * [Socket timeout](#socket-timeout)\n  * [Chaining](#chaining)\n  * [Scope filtering](#scope-filtering)\n  * [Path filtering](#path-filtering)\n  * [Request Body filtering](#request-body-filtering)\n  * [Request Headers Matching](#request-headers-matching)\n  * [Optional Requests](#optional-requests)\n  * [Allow __unmocked__ requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  * [.isDone()](#isdone)\n  * [.cleanAll()](#cleanall)\n  * [.persist()](#persist)\n  * [.pendingMocks()](#pendingmocks)\n  * [.activeMocks()](#activemocks)\n  * [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  * [Disabling requests](#disabling-requests)\n  * [Enabling requests](#enabling-requests)\n  * [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  * [`dont_print` option](#dont_print-option)\n  * [`output_objects` option](#output_objects-option)\n  * [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  * [`logging` option](#logging-option)\n  * [`use_separator` option](#use_separator-option)\n  * [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  * [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  * [Setup](#setup)\n    + [Options](#options)\n  * [Usage](#usage-1)\n    + [Options](#options-1)\n    + [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Backers](#backers)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock |\n|---|---|\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4 | up to 9.x |\n| 5 | up to 8.x |\n| 7 | up to 9.x |\n| 9 | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nvar nock = require('nock');\n\nvar couchdb = nock('http://myapp.iriscouch.com')\n                .get('/users/1')\n                .reply(200, {\n                  _id: '123ABC',\n                  _rev: '946B7D1C',\n                  username: 'pgte',\n                  email: 'pedro.teixeira@gmail.com'\n                 });\n```\n\nThis setup says that we will intercept every HTTP call to `http://myapp.iriscouch.com`.\n\nIt will intercept an HTTP GET request to '/users/1' and reply with a status 200, and the body will contain a user representation in JSON.\n\nThen the test can call the module, and the module will do the HTTP requests.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nvar scope = nock('http://www.example.com')\n    .get('/resource')\n    .reply(200, 'domain matched');\n```\n\n```js\nvar scope = nock(/example\\.com/)\n    .get('/resource')\n    .reply(200, 'domain regex matched');\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nvar scope = nock('http://www.example.com')\n    .get('/resource')\n    .reply(200, 'path matched');\n```\n\nUsing a regular expression:\n\n```js\nvar scope = nock('http://www.example.com')\n    .get(/source$/)\n    .reply(200, 'path using regex matched');\n```\n\nUsing a function:\n\n```js\nvar scope = nock('http://www.example.com')\n    .get(function(uri) {\n      return uri.indexOf('cats') >= 0;\n    })\n    .reply(200, 'path using function matched');\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' });\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' });\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' });\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' });\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', function(body) {\n    return body.username && body.password;\n  })\n  .reply(200, { id: '123ABC' });\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' });\n```\n\n\n### Specifying request query string\n\nNock understands query strings. Instead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({name: 'pedro', surname: 'teixeira'})\n  .reply(200, {results: [{id: 'pgte'}]});\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n      names: ['alice', 'bob'],\n      tags: {\n        alice: ['admin', 'tester'],\n        bob: ['tester']\n      }\n  })\n  .reply(200, {results: [{id: 'pgte'}]});\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(function(actualQueryObject){\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true;\n  })\n  .reply(200, {results: [{id: 'pgte'}]});\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, {results: [{id: 'pgte'}]});\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nvar scope = nock('http://myapp.iriscouch.com')\n                .get('/users/1')\n                .reply(404);\n```\n\nYou can also specify the reply body as a string:\n\n```js\nvar scope = nock('http://www.google.com')\n                .get('/')\n                .reply(200, 'Hello from Google!');\n```\n\nor as a JSON-encoded object:\n\n```js\nvar scope = nock('http://myapp.iriscouch.com')\n                .get('/')\n                .reply(200, {\n                  username: 'pgte',\n                  email: 'pedro.teixeira@gmail.com',\n                  _id: '4324243fsd'\n                });\n```\n\nor even as a file:\n\n```js\nvar scope = nock('http://myapp.iriscouch.com')\n                .get('/')\n                .replyWithFile(200, __dirname + '/replies/user.json', { 'Content-Type': 'application/json' });\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nvar scope = nock('http://www.google.com')\n   .filteringRequestBody(/.*/, '*')\n   .post('/echo', '*')\n   .reply(201, function(uri, requestBody) {\n     return requestBody;\n   });\n```\n\nAn asynchronous function that gets an error-first callback as last argument also works:\n\n```js\nvar scope = nock('http://www.google.com')\n   .filteringRequestBody(/.*/, '*')\n   .post('/echo', '*')\n   .reply(201, function(uri, requestBody, cb) {\n     fs.readFile('cat-poems.txt' , cb); // Error-first callback\n   });\n```\n\n> Note: When using a callback, if you call back with an error as first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nvar scope = nock('http://www.google.com')\n   .filteringRequestBody(/.*/, '*')\n   .post('/echo', '*')\n   .reply(function(uri, requestBody) {\n     return [\n       201,\n       'THIS IS THE REPLY BODY',\n       {'header': 'value'} // optional headers\n     ];\n   });\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nvar scope = nock('http://www.google.com')\n   .filteringRequestBody(/.*/, '*')\n   .post('/echo', '*')\n   .reply(function(uri, requestBody, cb) {\n     setTimeout(function() {\n       cb(null, [201, 'THIS IS THE REPLY BODY'])\n     }, 1e3);\n   });\n```\n\nA Stream works too:\n```js\nvar scope = nock('http://www.google.com')\n   .get('/cat-poems')\n   .reply(200, function(uri, requestBody) {\n     return fs.createReadStream('cat-poems.txt');\n   });\n```\n\n##### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req`  like this:\n\n```js\nvar scope = nock('http://www.google.com')\n   .get('/cat-poems')\n   .reply(function(uri, requestBody) {\n     console.log('path:', this.req.path);\n     console.log('headers:', this.req.headers);\n     // ...\n   });\n```\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n   .get('/cat-poems')\n   .replyWithError('something awful happened');\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({'message': 'something awful happened', 'code': 'AWFUL_ERROR'});\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nvar scope = nock('http://www.example.com', {\n      reqheaders: {\n        'authorization': 'Basic Auth'\n      }\n    })\n    .get('/')\n    .reply(200);\n```\n\nOr you can use a Regular Expression or Function check the header values. The function will be\npassed the header value.\n\n```js\nvar scope = nock('http://www.example.com', {\n      reqheaders: {\n        'X-My-Headers': function (headerValue) {\n           if (headerValue) {\n             return true;\n           }\n           return false;\n         },\n         'X-My-Awesome-Header': /Awesome/i\n      }\n    })\n    .get('/')\n    .reply(200);\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was *also* specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nvar scope = nock('http://www.example.com', {\n    badheaders: ['cookie', 'x-forwarded-for']\n  })\n  .get('/')\n  .reply(200);\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nvar scope = nock('http://www.example.com')\n    .get('/')\n    .basicAuth({\n      user: 'john',\n      pass: 'doe'\n    })\n    .reply(200);\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nvar scope = nock('http://www.headdy.com')\n   .get('/')\n   .reply(200, 'Hello World!', {\n     'X-My-Headers': 'My Header value'\n   });\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and body (if available). The body will be either a\nbuffer, a stream, or undefined.\n\n```js\nvar scope = nock('http://www.headdy.com')\n   .get('/')\n   .reply(200, 'Hello World!', {\n     'X-My-Headers': function (req, res, body) {\n       return body.toString();\n     }\n   });\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nvar scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json'\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too');\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nvar scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': function (req, res, body) {\n      return body.length;\n    }\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too');\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nvar scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' });\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nvar scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1)) // defaults to now, must use a Date object\n  .get('/')\n  .reply(200, { hello: 'world' });\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nvar scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304);\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nvar scope = nock('https://secure.my.server.com')\n   // ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nvar scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com').get('/').times(4).reply(200, 'Ok');\n\nhttp.get('http://zombo.com/'); // respond body \"Ok\"\nhttp.get('http://zombo.com/'); // respond body \"Ok\"\nhttp.get('http://zombo.com/'); // respond body \"Ok\"\nhttp.get('http://zombo.com/'); // respond body \"Ok\"\nhttp.get('http://zombo.com/'); // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com').get('/').once().reply(200, 'Ok');\nnock('http://zombo.com').get('/').twice().reply(200, 'Ok');\nnock('http://zombo.com').get('/').thrice().reply(200, 'Ok');\n```\n\n### Delay the response body\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n ```\n delay({\n    head: headDelayInMs,\n    body: bodyDelayInMs\n })\n ```\n\n for example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000  // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({head: 1000})`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', function(res) {\n  ...\n});\nreq.setTimeout(1000, function() {\n  req.abort();\n});\nreq.end();\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nvar scope = nock('http://myapp.iriscouch.com')\n                .get('/users/1')\n                .reply(404)\n                .post('/users', {\n                  username: 'pgte',\n                  email: 'pedro.teixeira@gmail.com'\n                })\n                .reply(201, {\n                  ok: true,\n                  id: '123ABC',\n                  rev: '946B7D1C'\n                })\n                .get('/users/123ABC')\n                .reply(200, {\n                  _id: '123ABC',\n                  _rev: '946B7D1C',\n                  username: 'pgte',\n                  email: 'pedro.teixeira@gmail.com'\n                });\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nvar scope = nock('https://api.dropbox.com', {\n    filteringScope: function(scope) {\n      return /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope);\n    }\n  })\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200);\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nvar scope = nock('http://api.myservice.com')\n                .filteringPath(/password=[^&]*/g, 'password=XXX')\n                .get('/users/1?password=XXX')\n                .reply(200, 'user');\n```\n\nOr you can use a function:\n\n```js\nvar scope = nock('http://api.myservice.com')\n                .filteringPath(function(path) {\n                   return '/ABC';\n                 })\n                .get('/ABC')\n                .reply(200, 'user');\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nvar scope = nock('http://api.myservice.com')\n                .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n                .post('/users/1', 'data=ABC&password=XXX')\n                .reply(201, 'OK');\n```\n\nOr you can use a function to transform the body:\n\n```js\nvar scope = nock('http://api.myservice.com')\n                .filteringRequestBody(function(body) {\n                   return 'ABC';\n                 })\n                .post('/', 'ABC')\n                .reply(201, 'OK');\n```\n\nIf you don't want to match the request body you can return a wildcard match:\n\n```js\nvar scope = nock('http://api.myservice.com')\n  .filteringRequestBody(function(body) {\n    return '*';\n  })\n  .post('/some_uri', '*')\n  .reply(200, 'OK');\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nvar scope = nock('http://api.myservice.com')\n                .matchHeader('accept', 'application/json')\n                .get('/')\n                .reply(200, {\n                  data: 'hello world'\n                })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nvar scope = nock('http://api.myservice.com')\n                .matchHeader('User-Agent', /Mozilla\\/.*/)\n                .get('/')\n                .reply(200, {\n                  data: 'hello world'\n                })\n```\n\nYou can also use a function for the header body.\n\n```js\nvar scope = nock('http://api.myservice.com')\n                .matchHeader('content-length', function (val) {\n                  return val >= 1000;\n                })\n                .get('/')\n                .reply(200, {\n                  data: 'hello world'\n                })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nvar example = nock(\"http://example.com\");\nexample.pendingMocks() // []\nexample.get(\"/pathA\").reply(200);\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample.get(\"/pathB\").optionally().reply(200);\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nvar getMock = function(optional) {\n  return example.get(\"/pathC\").optionally(optional).reply(200);\n}\n\ngetMock(true);\nexample.pendingMocks() // []\ngetMock(false);\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n\n```\n\n### Allow __unmocked__ requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\noptions = {allowUnmocked: true};\nvar scope = nock('http://my.existing.service.com', options)\n  .get('/my/url')\n  .reply(200, 'OK!');\n\n // GET /my/url => goes through nock\n // GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nvar google = nock('http://google.com')\n                .get('/')\n                .reply(200, 'Hello from Google!');\n\n// do some stuff\n\nsetTimeout(function() {\n  google.done(); // will throw an assertion error if meanwhile a \"GET http://google.com\" was not performed.\n}, 5000);\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nvar scope = nock('http://google.com')\n  .get('/')\n  .reply(200);\n\nscope.isDone(); // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone();\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll();\n```\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nvar scope = nock('http://persisssists.con')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way');\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nvar scope = nock('http://example.com').persist().get('/').reply(200, 'ok');\n// do some tests ...\nscope.persist(false);\n```\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks());\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks());\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks());\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks());\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) nock.activate()\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nvar google = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore();\n```\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate();\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect();\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect();\nvar req = http.get('http://google.com/');\nreq.on('error', function(err){\n    console.log(err);\n});\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect();\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com');\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/);\n\nhttp.get('http://www.amazon.com/');\nhttp.get('http://github.com/');\n\nhttp.get('http://google.com/');\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect();\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1');\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll();\nnock.enableNetConnect();\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec();\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and answers and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled.  Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true\n});\n// ... some HTTP calls\nvar nockCalls = nock.recorder.play();\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true\n});\n// ... some HTTP calls\nvar nockCallObjects = nock.recorder.play();\n```\n\nThe returned call objects have the following properties:\n\n* `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n* `method` - the HTTP verb of the call (e.g. `'GET'`)\n* `path` - the path of the call (e.g. `'/pgte/nock'`)\n* `body` - the body of the call, if any\n* `status` - the HTTP status of the reply (e.g. `200`)\n* `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n* `headers` - the headers of the reply\n* `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests for example to add them request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson);\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = function(body, aRecordedBody) {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body;\n    }\n\n    var recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody);\n    if (!recordedBodyResult) {\n      return body;\n    }\n\n    var recordedTimestamp = recordedBodyResult[1];\n    return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n      return key + ':' + recordedTimestamp;\n    });\n  };\n});\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before using them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)` and `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node module which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nvar nockDefs = nock.loadDefs(pathToJson);\nnockDefs.forEach(function(def) {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = def.options || {};\n  def.options.filteringScope = function(scope) {\n    return /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope);\n  };\n}\n\n//  Load the nocks from pre-processed definitions.\nvar nocks = nock.define(nockDefs);\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorder thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true\n});\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`).  If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function.  Here's a basic example.\n\n```js\nvar appendLogToFile = function(content) {\n  fs.appendFile('record.txt', content);\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n});\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false\n});\n```\n\n### .removeInterceptor()\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/mockedResource'\n});\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n});\n```\n\n```js\nvar interceptor = nock('http://example.org')\n  .get('somePath');\nnock.removeInterceptor(interceptor);\n```\n\n## Events\n\nA scope emits the following events:\n\n* `emit('request', function(req, interceptor, body))`;\n* `emit('replied', function(req, interceptor))`;\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', function(req) {\n\n});\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```javascript\nvar nockBack = require('nock').back;\n\nnockBack.fixtures = '/path/to/fixtures/';\nnockBack.setMode('record');\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```javascript\nvar nockBack = require('nock').back;\nvar request = require('request');\nnockBack.setMode('record');\n\nnockBack.fixtures = __dirname + '/nockFixtures'; //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', function(nockDone) {\n  request.get('http://zombo.com', function(err, res, body) {\n    nockDone();\n\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function (nockDone) {\n      http.get('http://zombo.com/').end(); // respond body \"Ok\"\n\n      this.assertScopesFinished(); //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end(); // throws exception because someFixture.json only had one call\n\n      nockDone(); //never gets here\n    });\n  });\n});\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({nockDone, context}) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone);`\n  });\n});\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```javascript\nvar beforeFunc = function(scope) {\n  scope.filteringRequestBody = function(body, aRecordedBody) {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body;\n    }\n\n    var recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody);\n    if (!recordedBodyResult) {\n      return body;\n    }\n\n    var recordedTimestamp = recordedBodyResult[1];\n    return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n      return key + ':' + recordedTimestamp;\n    });\n  };\n}\n\nnockBack('zomboFixture.json', { before: beforeFunc }, function(nockDone) {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone();\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Backers\n\nThank you to all our backers! 🙏 [[Become a backer](https://opencollective.com/nock#backer)]\n\n<a href=\"https://opencollective.com/nock#backers\" target=\"_blank\"><img src=\"https://opencollective.com/nock/backers.svg?width=890\"></a>\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011-2017 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.1","_npmVersion":"6.5.0","_nodeVersion":"10.14.2","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-XluJcN+0YN02bZfbcSCsrzBxR+FwkVN0sIpCyzVYwYJfV+xwFTlHq+wxaMl7XHMcGsCRARDg4jqAGw8ya41x7A==","shasum":"c4c818f880735c6157ded09199b1b526ffc62916","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.1.tgz","fileCount":41,"unpackedSize":169402,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcGUDRCRA9TVsSAnZWagAA5NwP/ilJVd3fQlWNdYzdPDSd\nJZL7woYfncoLz2zyAw4OIxWb7JPjSOk2hVmtRpa5bJB1TlWX1H8T/L7Dm0hW\nA0qZq+bv/99u3U3was2NMhzfruYsPdVQV+TWfeztmyQ/vjNBOLMar+BOaj38\nmxkA1+RNpAjSIIW1toco81fXDpKNUz0iTrF0z1bKyQbc80PMDWZdm6NJ3fKA\nIusCamJVb4m7q/IVOQsNlnXep+2Nr1MjERAqZZJZmqJyNfFgnDk97K5W3g3l\ntPUaxH6m9f+lcXMvggGBcc+HZoV7L5IGmwIF0duiSzVErzMz9XdJDGwlNcw7\nCl5k4PiRFT+ChfpoetIw5bkjTL2Lb8Etfeov+3MCyJc2b9wX56KlxHNo4VMF\nP4OofajnVsYO6e3rRyhM2oWp0ZwApUkTSOiD1ioPszEIzGTDo+zg6EAvqYzy\nyN2wzZQ9RFsIY7h1POLYM+GOfHQvYp5wcj7JPMTkK3e0oq/MOeyYtCzDJ2R0\n9KA4wNDSyH/3ayma9czgnlqCTduLomMwdakHKhoum9Bi0q0/rrMl+Po1WejT\n08xjXeF9jiHLLBrvzzz5aEUiaZSF8WbsKLSHl/oKBECATPAnFJhBTpKYcdzh\nITcgltlOU1Qloz7q4NkLMrCjFHiz4TePnvV1bU4uBuHmXAGbx98n3zOmeqzj\nKYGf\r\n=yYV2\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.1_1545158864298_0.0328705959780593"},"_hasShrinkwrap":false},"10.0.5":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"10.0.5","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 6.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1","semver":"^5.5.0"},"devDependencies":{"acorn":"^6.0.4","async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^5.0.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","markdown-toc":"^1.2.0","needle":"^2.2.2","nyc":"^12.0.1","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.2.0","rimraf":"^2.6.2","semantic-release":"^16.0.0-beta.13","superagent":"^4.0.0","tap":"^12.0.0"},"scripts":{"unit":"tap --coverage ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","toc":"markdown-toc -i README.md && markdown-toc -i CONTRIBUTING.md ","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"0c4edd6741dc6ecf66857b14c75d0bff0a5b8129","homepage":"https://github.com/nock/nock#readme","_id":"nock@10.0.5","_npmVersion":"6.5.0","_nodeVersion":"10.14.2","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-6roBPXKplUBYM/37RRUb0RyfXLHu+AU10OoaJN2H1S3pOniAx+8+NregAWDp8XS3ZWovJZKZ2tfgaphqDdqB7g==","shasum":"b8bda2a58795ea32f35e4e2d421d526df645057f","tarball":"https://registry.npmjs.org/nock/-/nock-10.0.5.tgz","fileCount":41,"unpackedSize":169442,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcH7a3CRA9TVsSAnZWagAAwtAP/3vPSruRiD3uxG/26Fv5\neoFaDJ1oMMjCkGNIjXoFrb5h+EvoWTZPwcDiHr2b4p3tsWKLatwYM+gDDgSI\n1AX6diQhdCslQXCVCid+u50u9m8TcwXlCLBdPzb7Eyx1UHgsZnx0rH27YTvc\nj3kNTrlrnXrqXpkl6Ztc0HxRzyXPx4JEnOOwijCofBib2K2f1PpvhtflUVvK\n5wDpVw24401nH+Hs4OHnaHk773hl3kGFKw6oYv4IEsG32ECWoIavdwffBGad\nC6MXu1yPeWLiislzt6XUOZyQufvFWCPBH30OxPwEHjDWjlyJP7XNkKs4+VsB\ngxCk9unUa0x6rnCgnMedbOzzN2DAlxvHjL7VPFL/O5i0/QBknxVdmCniuIuX\nERfpBznebC8oW+XZH9u46fKINMqUIrNbnzkYV6HCWIySGklTBYHxgZOALLss\nDxshzRluolFbcIoQ+8o4vovJnhpTe+2LBD1dj5DC0+BhPmCq4czHiQG0A6V2\nujhjIpfYKTIUP3/UCt7zOKU8ywyWM9SIAU+nVXTc/to17SGVGo8SLYr6PPM5\nvo12H5//DHRJItPbSbS/uulYkbZvEQgj2BdBVNOCu8m5qMoueYweda0bmzIH\nBOfy0+aeb8QsqA2UKEH+QjJkXi2ResfQcl0SxM3ulYHJ5e0leCGCMKbhrrbJ\nPSsN\r\n=KeSU\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_10.0.5_1545582262250_0.603686426567265"},"_hasShrinkwrap":false},"11.0.0-beta.2":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.2","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.0.4","async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^5.0.0","eslint-config-prettier":"^3.3.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.14.0","eslint-plugin-node":"^8.0.0","eslint-plugin-prettier":"^3.0.0","eslint-plugin-promise":"^4.0.1","eslint-plugin-standard":"^4.0.0","got":"^9.4.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","markdown-toc":"^1.2.0","needle":"^2.2.2","nyc":"^12.0.1","prettier":"1.15.3","prettier-check":"^2.0.0","proxyquire":"^2.1.0","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.2.0","rimraf":"^2.6.2","semantic-release":"^16.0.0-beta.13","superagent":"^4.0.0","tap":"^12.0.0"},"scripts":{"unit":"tap --coverage ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier-check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier-check":"prettier-check \"**/*.@(js|md|yml|json)\"","toc":"markdown-toc -i README.md && markdown-toc -i CONTRIBUTING.md ","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"6dc0208e9f9de40d6894557d930deca1bc0856e0","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n[![Coverage Status](https://img.shields.io/coveralls/github/nock/nock/beta.svg)][coverage]\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n[coverage]: https://coveralls.io/github/nock/nock\n\n> HTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    * [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Backers](#backers)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nvar nock = require('nock')\n\nvar couchdb = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `http://myapp.iriscouch.com`.\n\nIt will intercept an HTTP GET request to '/users/1' and reply with a status 200, and the body will contain a user representation in JSON.\n\nThen the test can call the module, and the module will do the HTTP requests.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nvar scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nvar scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nvar scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nvar scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nvar scope = nock('http://www.example.com')\n  .get(function(uri) {\n    return uri.indexOf('cats') >= 0\n  })\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', function(body) {\n    return body.username && body.password\n  })\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Instead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(function(actualQueryObject) {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nvar scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nvar scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nvar scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nvar scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nvar scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, function(uri, requestBody) {\n    return requestBody\n  })\n```\n\nAn asynchronous function that gets an error-first callback as last argument also works:\n\n```js\nvar scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, function(uri, requestBody, cb) {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nvar scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(function(uri, requestBody) {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nvar scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(function(uri, requestBody, cb) {\n    setTimeout(function() {\n      cb(null, [201, 'THIS IS THE REPLY BODY'])\n    }, 1e3)\n  })\n```\n\nA Stream works too:\n\n```js\nvar scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, function(uri, requestBody) {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n##### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nvar scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({ message: 'something awful happened', code: 'AWFUL_ERROR' })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nvar scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a Regular Expression or Function check the header values. The function will be\npassed the header value.\n\n```js\nvar scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': function(headerValue) {\n      if (headerValue) {\n        return true\n      }\n      return false\n    },\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nvar scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nvar scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({\n    user: 'john',\n    pass: 'doe',\n  })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nvar scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'X-My-Headers': 'My Header value',\n  })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and body (if available). The body will be either a\nbuffer, a stream, or undefined.\n\n```js\nvar scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'X-My-Headers': function(req, res, body) {\n      return body.toString()\n    },\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nvar scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nvar scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': function(req, res, body) {\n      return body.length\n    },\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nvar scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nvar scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1)) // defaults to now, must use a Date object\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nvar scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nvar scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nvar scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({head: 1000})`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', function(res) {\n  ...\n});\nreq.setTimeout(1000, function() {\n  req.abort();\n});\nreq.end();\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nvar scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nvar scope = nock('https://api.dropbox.com', {\n  filteringScope: function(scope) {\n    return /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope)\n  },\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nvar scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nvar scope = nock('http://api.myservice.com')\n  .filteringPath(function(path) {\n    return '/ABC'\n  })\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nvar scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nvar scope = nock('http://api.myservice.com')\n  .filteringRequestBody(function(body) {\n    return 'ABC'\n  })\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you can return a wildcard match:\n\n```js\nvar scope = nock('http://api.myservice.com')\n  .filteringRequestBody(function(body) {\n    return '*'\n  })\n  .post('/some_uri', '*')\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nvar scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nvar scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nvar scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', function(val) {\n    return val >= 1000\n  })\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nvar example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nvar getMock = function(optional) {\n  return example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n}\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\noptions = { allowUnmocked: true }\nvar scope = nock('http://my.existing.service.com', options)\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nvar google = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(function() {\n  google.done() // will throw an assertion error if meanwhile a \"GET http://google.com\" was not performed.\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nvar scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nvar scope = nock('http://persisssists.con')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nvar scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n// do some tests ...\nscope.persist(false)\n```\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) nock.activate()\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nvar google = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nvar req = http.get('http://google.com/')\nreq.on('error', function(err) {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and answers and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nvar nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nvar nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests for example to add them request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = function(body, aRecordedBody) {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    var recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (!recordedBodyResult) {\n      return body\n    }\n\n    var recordedTimestamp = recordedBodyResult[1]\n    return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n      return key + ':' + recordedTimestamp\n    })\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before using them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)` and `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node module which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nvar nockDefs = nock.loadDefs(pathToJson);\nnockDefs.forEach(function(def) {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = def.options || {};\n  def.options.filteringScope = function(scope) {\n    return /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope);\n  };\n}\n\n//  Load the nocks from pre-processed definitions.\nvar nocks = nock.define(nockDefs);\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorder thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nvar appendLogToFile = function(content) {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n});\n```\n\n```js\nvar interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`;\n- `emit('replied', function(req, interceptor))`;\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', function(req) {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```javascript\nvar nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```javascript\nvar nockBack = require('nock').back\nvar request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', function(nockDone) {\n  request.get('http://zombo.com', function(err, res, body) {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({nockDone, context}) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone);`\n  });\n});\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```javascript\nvar beforeFunc = function(scope) {\n  scope.filteringRequestBody = function(body, aRecordedBody) {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body;\n    }\n\n    var recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody);\n    if (!recordedBodyResult) {\n      return body;\n    }\n\n    var recordedTimestamp = recordedBodyResult[1];\n    return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n      return key + ':' + recordedTimestamp;\n    });\n  };\n}\n\nnockBack('zomboFixture.json', { before: beforeFunc }, function(nockDone) {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone();\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Backers\n\nThank you to all our backers! 🙏 [[Become a backer](https://opencollective.com/nock#backer)]\n\n<a href=\"https://opencollective.com/nock#backers\" target=\"_blank\"><img src=\"https://opencollective.com/nock/backers.svg?width=890\"></a>\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011-2017 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.2","_npmVersion":"6.5.0","_nodeVersion":"10.14.2","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-ShxXRx56fT0KELlZlkcQqdnog2VgPUZj6l6SHtbYJO6oAUFFLfFBRnLs0q/myeYHgfP30a0aURGz4LwM5I6BZQ==","shasum":"cffed2f634677380f78e53597bb5bf6365bf41d1","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.2.tgz","fileCount":43,"unpackedSize":168680,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcH7bXCRA9TVsSAnZWagAAzXgQAJ9MwhzH3ScP8Xnk5EQK\n7GdgtMfv56/BVFysqRB4xTRYlBUV+H4+0wCKzu1Zi9YFwYPavFUl7eoI2PW8\nPqsplmWb/o3jrvs+UgV3fvHuZPsuLfHHADskxh1qrDYiibsT9tl3cVBpt7Vm\nnCwzt9CAMjNqZ8/ggunKVgQDS3F/GFN6bReRD/bBldGLO25wA61Z5YOvgEpZ\nikTZXkUn5BQGb9lce3kKzaPY7JMW7u5jPbVYBXnvbK+budTC3TGWfmZ8sJIu\nVjR9JOtE7Ha9uyOpXyjG8tX0fOLA3YYm0mpgYwxE6kOnnUg7CKNTaVF0sjlN\nNlkHahXsA85/YqMBuCGbLl5deNJ3J6sm8R5JbEtTwVz1Z5greISdmXr5lA/n\nqumdUQ/xa2iITAodfUlldGdrGBUd6ftqRLDdhHnH9B1MTexEW1fxmHhjZYqR\nkB36IyND65/z8HQ/BNW5DWhaHuVxoJVjTiQ84Z6DDfGatcF9E/pVlZEqdxwW\nC4wabMxNsHt+qO4DjKfZ+zFrfWewPlWtd99TpBjYaJrmDl08COq8uPeuQCNk\nPte1uSP8K50HMFyusGuaT2VHPYik/rHDSnugaOWpMI/Gd5Ou/5UY+TEOnk9p\nSpv2UHSokJ3NzwcLv9WAvPVla8pWu70BADhAD78DjBjBb8XZp0IQq8JQBeww\n4GlY\r\n=dVz0\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.2_1545582294807_0.5337824145801824"},"_hasShrinkwrap":false},"10.0.6":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"10.0.6","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 6.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1","semver":"^5.5.0"},"devDependencies":{"acorn":"^6.0.4","async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^5.0.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^3.0.0","markdown-toc":"^1.2.0","needle":"^2.2.2","nyc":"^12.0.1","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.2.0","rimraf":"^2.6.2","semantic-release":"^16.0.0-beta.13","superagent":"^4.0.0","tap":"^12.0.0"},"scripts":{"unit":"tap --coverage ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","toc":"markdown-toc -i README.md && markdown-toc -i CONTRIBUTING.md ","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"cb56669e0bee13dfa9c668ecb3d0efb714f6240c","homepage":"https://github.com/nock/nock#readme","_id":"nock@10.0.6","_npmVersion":"6.5.0","_nodeVersion":"10.15.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-b47OWj1qf/LqSQYnmokNWM8D88KvUl2y7jT0567NB3ZBAZFz2bWp2PC81Xn7u8F2/vJxzkzNZybnemeFa7AZ2w==","shasum":"e6d90ee7a68b8cfc2ab7f6127e7d99aa7d13d111","tarball":"https://registry.npmjs.org/nock/-/nock-10.0.6.tgz","fileCount":41,"unpackedSize":169591,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcLSkhCRA9TVsSAnZWagAAWcQP/0nLncTWrN349PI8wVIU\n+Oi0ejsl+fzoljOxwWPHEFeNzy3wPC6crAW7Ekow/ssihQ35X2hQGsbzvSGy\nfvRV6gmqfXEBs85CbWlRKWi7LiGX+pTS4uXac1CWF95gTBqpVXggzphyWUpC\nEGo2WW7iNLdFSKrFJxWpgQeGf/vsKzuUxdgAU/3ZRH+12J88IrhkNSkqm8AO\nlRnyfj0eIYOQcgT+HjfrbXRpqKEnJebyFUT+jMlcLWdqE3v9UNoW3WKS7J0z\n5kimLLS1zJHJz8XHci4joivaKif9U/l6/Etnl23hAyAJvpT4+nk6gf1JbXiT\ntLhDdkyQzdN0HzEJ7jCb/PW1XfpYktxEuH8IRhzqXXMQHSdKMnkiVt95yQMp\nUVMqkKVQPNaC4kjbtf3tkFoqOqS26vxBMAhLQcy/gUxLPps8I4qdTq3TqJU8\nhNHLR4fBum+OkDN8Vs8sRVldWmPwImvpb9bniIqDW0RD4+B/yZQYONCSBu1c\nU4S9b+8cH/JeQg6SNOzyMqX9G/kSrVoGl+RYdDj3mwsKnVS5eSkdgmaN0pYJ\nHRIAQlJEWSqMdcbjySaOAkwqeEkeOtA2ktHjPc1jo/EiJgHo4Yftdluhblzc\n3zcroydCeIeAZnOB0g5CboAA5stlWa9oUZ7Pz384wcwbYT3eRHzZNc2z17iI\ngUQz\r\n=mcSx\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_10.0.6_1546463520961_0.7510077736071945"},"_hasShrinkwrap":false},"11.0.0-beta.3":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.3","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.0.4","async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^5.0.0","eslint-config-prettier":"^3.3.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.14.0","eslint-plugin-node":"^8.0.0","eslint-plugin-prettier":"^3.0.0","eslint-plugin-promise":"^4.0.1","eslint-plugin-standard":"^4.0.0","got":"^9.4.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^3.0.0","markdown-toc":"^1.2.0","needle":"^2.2.2","nyc":"^12.0.1","prettier":"1.15.3","prettier-check":"^2.0.0","proxyquire":"^2.1.0","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.2.0","rimraf":"^2.6.2","semantic-release":"^16.0.0-beta.13","superagent":"^4.0.0","tap":"^12.0.0"},"scripts":{"unit":"tap --coverage ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier-check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier-check":"prettier-check \"**/*.@(js|md|yml|json)\"","toc":"markdown-toc -i README.md && markdown-toc -i CONTRIBUTING.md ","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"a2131696d28bfa9854cef68ad7d55669a54637cc","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n[![Coverage Status](https://img.shields.io/coveralls/github/nock/nock/beta.svg)][coverage]\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n[coverage]: https://coveralls.io/github/nock/nock\n\n> HTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    * [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Backers](#backers)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nvar nock = require('nock')\n\nvar couchdb = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `http://myapp.iriscouch.com`.\n\nIt will intercept an HTTP GET request to '/users/1' and reply with a status 200, and the body will contain a user representation in JSON.\n\nThen the test can call the module, and the module will do the HTTP requests.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nvar scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nvar scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nvar scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nvar scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nvar scope = nock('http://www.example.com')\n  .get(function(uri) {\n    return uri.indexOf('cats') >= 0\n  })\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', function(body) {\n    return body.username && body.password\n  })\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Instead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(function(actualQueryObject) {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nvar scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nvar scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nvar scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nvar scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nvar scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, function(uri, requestBody) {\n    return requestBody\n  })\n```\n\nAn asynchronous function that gets an error-first callback as last argument also works:\n\n```js\nvar scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, function(uri, requestBody, cb) {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nvar scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(function(uri, requestBody) {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nvar scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(function(uri, requestBody, cb) {\n    setTimeout(function() {\n      cb(null, [201, 'THIS IS THE REPLY BODY'])\n    }, 1e3)\n  })\n```\n\nA Stream works too:\n\n```js\nvar scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, function(uri, requestBody) {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n##### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nvar scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({ message: 'something awful happened', code: 'AWFUL_ERROR' })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nvar scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a Regular Expression or Function check the header values. The function will be\npassed the header value.\n\n```js\nvar scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': function(headerValue) {\n      if (headerValue) {\n        return true\n      }\n      return false\n    },\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nvar scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nvar scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({\n    user: 'john',\n    pass: 'doe',\n  })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nvar scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'X-My-Headers': 'My Header value',\n  })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and body (if available). The body will be either a\nbuffer, a stream, or undefined.\n\n```js\nvar scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'X-My-Headers': function(req, res, body) {\n      return body.toString()\n    },\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nvar scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nvar scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': function(req, res, body) {\n      return body.length\n    },\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nvar scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nvar scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1)) // defaults to now, must use a Date object\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nvar scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nvar scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nvar scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({head: 1000})`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', function(res) {\n  ...\n});\nreq.setTimeout(1000, function() {\n  req.abort();\n});\nreq.end();\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nvar scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nvar scope = nock('https://api.dropbox.com', {\n  filteringScope: function(scope) {\n    return /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope)\n  },\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nvar scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nvar scope = nock('http://api.myservice.com')\n  .filteringPath(function(path) {\n    return '/ABC'\n  })\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nvar scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nvar scope = nock('http://api.myservice.com')\n  .filteringRequestBody(function(body) {\n    return 'ABC'\n  })\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you can return a wildcard match:\n\n```js\nvar scope = nock('http://api.myservice.com')\n  .filteringRequestBody(function(body) {\n    return '*'\n  })\n  .post('/some_uri', '*')\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nvar scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nvar scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nvar scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', function(val) {\n    return val >= 1000\n  })\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nvar example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nvar getMock = function(optional) {\n  return example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n}\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\noptions = { allowUnmocked: true }\nvar scope = nock('http://my.existing.service.com', options)\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nvar google = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(function() {\n  google.done() // will throw an assertion error if meanwhile a \"GET http://google.com\" was not performed.\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nvar scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nvar scope = nock('http://persisssists.con')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nvar scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n// do some tests ...\nscope.persist(false)\n```\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) nock.activate()\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nvar google = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nvar req = http.get('http://google.com/')\nreq.on('error', function(err) {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and answers and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nvar nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nvar nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests for example to add them request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = function(body, aRecordedBody) {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    var recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (!recordedBodyResult) {\n      return body\n    }\n\n    var recordedTimestamp = recordedBodyResult[1]\n    return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n      return key + ':' + recordedTimestamp\n    })\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before using them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)` and `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node module which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nvar nockDefs = nock.loadDefs(pathToJson);\nnockDefs.forEach(function(def) {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = def.options || {};\n  def.options.filteringScope = function(scope) {\n    return /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope);\n  };\n}\n\n//  Load the nocks from pre-processed definitions.\nvar nocks = nock.define(nockDefs);\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorder thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nvar appendLogToFile = function(content) {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n});\n```\n\n```js\nvar interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`;\n- `emit('replied', function(req, interceptor))`;\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', function(req) {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```javascript\nvar nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```javascript\nvar nockBack = require('nock').back\nvar request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', function(nockDone) {\n  request.get('http://zombo.com', function(err, res, body) {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({nockDone, context}) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone);`\n  });\n});\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```javascript\nvar beforeFunc = function(scope) {\n  scope.filteringRequestBody = function(body, aRecordedBody) {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body;\n    }\n\n    var recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody);\n    if (!recordedBodyResult) {\n      return body;\n    }\n\n    var recordedTimestamp = recordedBodyResult[1];\n    return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n      return key + ':' + recordedTimestamp;\n    });\n  };\n}\n\nnockBack('zomboFixture.json', { before: beforeFunc }, function(nockDone) {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone();\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Backers\n\nThank you to all our backers! 🙏 [[Become a backer](https://opencollective.com/nock#backer)]\n\n<a href=\"https://opencollective.com/nock#backers\" target=\"_blank\"><img src=\"https://opencollective.com/nock/backers.svg?width=890\"></a>\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011-2017 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.3","_npmVersion":"6.5.0","_nodeVersion":"10.15.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-GIJgL4JfZ5JjrdVLbTjsiATJa1t6PCnzS6HWbUNzRfoTTOicnbv52yFBEdYHL2A3ZruLQsxDyOABx4M4gVYdEA==","shasum":"b9ad49e3f0daa52e0bd518febe03dda51d9fc2ea","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.3.tgz","fileCount":43,"unpackedSize":168787,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcLae5CRA9TVsSAnZWagAA7VcP/ipRH4HBJOiCHwX/YqCJ\n3eGTNm9EszfLs+q15SZg6iMXsiqFNOADSdMjM7+O2BnJgt5MF1gas6qSq5j4\noNzbxZWR96063zLSlLeVIaIqwLZFlBwhtKMjwLxSb3Af/BHZ8xV2JieX3T+q\nysFSLliIpbbdCHb3QSbDZuSg6Z9nbaaXRBJ/M8c5q6p77B9Fwd7wMuPR426t\np3fCfv98IgAtiH/gY8s0UFS/0qjVaJLYHpqHKHS5oO4lv3X9Cs0emF+h8PTy\nbG/K7ih94MswYrPy+TfwHjkzaHQynS+0WkOOlQXJlidDjde5GPM0XuGxnKE2\nQFNtA9xC8YL3yvGGr3xWmY8FfYlvC2PF3XdGMF2Hh7kG5PCFMtTjG2um7dQb\nXigUrWVXV5UL/Fr79nfMMCY81hYLpUHKS9M1j3gSQr+NhnM//bFfRE7r1wQS\nnbiw6bL0lyg0Woicvz8BkHnbVzwzL4NORCSPIlQsSiCFyNIkdxkVV4XvRmkF\n3piEvvBF/Hvq5dZF/MHV6Ekcn2e/TdfApYeWKETAdScwNZsCtjJApLQ8S2vX\nliekGN7CBotN2S3d0ep2X6a5KeRe/d6gfQQp5Jg21MlsCSp2zQ6ZCmB88P9e\nHNhPF8pDbDx9dElowKhpFhGlfacKGH/lHm2KidkCwy/mChmnboY5HYXlLEqZ\nTc9x\r\n=OVdi\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.3_1546495927819_0.6466671045312147"},"_hasShrinkwrap":false},"11.0.0-beta.4":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.4","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.0.4","async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^5.0.0","eslint-config-prettier":"^3.3.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.14.0","eslint-plugin-node":"^8.0.0","eslint-plugin-promise":"^4.0.1","eslint-plugin-standard":"^4.0.0","got":"^9.4.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^3.0.0","markdown-toc":"^1.2.0","needle":"^2.2.2","nyc":"^12.0.1","prettier":"1.15.3","prettier-check":"^2.0.0","proxyquire":"^2.1.0","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.2.0","rimraf":"^2.6.2","semantic-release":"^16.0.0-beta.15","superagent":"^4.0.0","tap":"^12.0.0"},"scripts":{"unit":"tap --coverage ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier-check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier-check":"prettier-check \"**/*.@(js|md|yml|json)\"","toc":"markdown-toc -i README.md && markdown-toc -i CONTRIBUTING.md ","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"3dbfdee4dbb827a4e542e02474220104810a8432","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n[![Coverage Status](https://img.shields.io/coveralls/github/nock/nock/beta.svg)][coverage]\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n[coverage]: https://coveralls.io/github/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Backers](#backers)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Instead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nAn asynchronous function that gets an error-first callback as last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and body (if available). The body will be either a\nbuffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'X-My-Headers': (req, res, body) => body.toString(),\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': function(req, res, body) {\n      return body.length\n    },\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you can return a wildcard match:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => '*')\n  .post('/some_uri', '*')\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and answers and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests for example to add them request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: = scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorder thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Backers\n\nThank you to all our backers! 🙏 [[Become a backer](https://opencollective.com/nock#backer)]\n\n<a href=\"https://opencollective.com/nock#backers\" target=\"_blank\"><img src=\"https://opencollective.com/nock/backers.svg?width=890\"></a>\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.4","_npmVersion":"6.5.0","_nodeVersion":"10.15.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-UHhCUSYeheeM6jCj3KcEEmkTIT+6dpZ1KtDHztGXxHXfnkCdsPr9N6lonMZbLqwV6PSSaba45REEwhFxfnx/5g==","shasum":"de8b182078dcfe1cf8f0611d25d527be3b1ac918","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.4.tgz","fileCount":44,"unpackedSize":172302,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcQpVCCRA9TVsSAnZWagAAe2EP/3QCKP2sPifTQybSAnhR\nEnTrAkzH36qVxdb2/k3L6A9jpuSKaydMSFuriaTqr8RmcrozvNm1BbWpV0FI\n+8b3HbqFHaBK7UGruXuJuHaJ8VTinba24AYUfyJVTCXuDioxAdyktcLU3mrR\nJ34pPz3ch2LOCRXpnjWPpKpyeYgrOL+WbBV/96chVK77qhPiVzLKqcDxBTsq\nmva9Otg72RGsIyd9mvMmdVYmS4PWQ6uMf43XvkzKLuheonnAAzswrFv9u3MT\nUKT19Qoz2DLYz5beKBTU7TQ5qS/+Rij4F1Lpk/vMX0BaWsBYzBzcfXKIGnWP\nlQBx3FMrcQkn47bsp7wTbaxb+l3XPHLV0u52l76+nt3ONxW9a40QlFzfYDu3\nr6KQmCO0kc52aJJ2pI9cjEam42DSbbSkhdW4FsioxgwdnwOTWiFsx+gNwHBw\niaL5T2EEnYPqpNWrxmjesSiovxgEFYDdHMcRo5UxiFcKJm+AFi/iozlIT6Zw\n6rv90C/A0tzzpNZOleyq4sawsr/3GV3/eCb0kU9UGQmSqpcNrIqTpe0CUkf0\nRwEqj5LbKGeFr2SBKl7XwK3DThYEKyFFMG5c9n4qu05xCGmDWEImv8cvvkbH\ngttHVHZvcXglh/dhDB0geI4KhNL+nU7DWoUj3sfiACosGDlKmXkKMLjNZ6rJ\nNp/o\r\n=WMYl\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.4_1547867457694_0.1103840209609217"},"_hasShrinkwrap":false},"11.0.0-beta.5":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.5","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.0.4","async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^5.0.0","eslint-config-prettier":"^3.3.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.14.0","eslint-plugin-node":"^8.0.0","eslint-plugin-promise":"^4.0.1","eslint-plugin-standard":"^4.0.0","got":"^9.4.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^3.0.0","needle":"^2.2.2","nyc":"^12.0.1","prettier":"1.15.3","prettier-check":"^2.0.0","proxyquire":"^2.1.0","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.2.0","rimraf":"^2.6.2","semantic-release":"^16.0.0-beta.15","superagent":"^4.0.0","tap":"^12.0.0"},"scripts":{"unit":"tap --coverage ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier-check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier-check":"prettier-check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"28b2d432c9e954b0df77d44d2d3b25a918f9431d","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n[![Coverage Status](https://img.shields.io/coveralls/github/nock/nock/beta.svg)][coverage]\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n[coverage]: https://coveralls.io/github/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Backers](#backers)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Instead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nAn asynchronous function that gets an error-first callback as last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and body (if available). The body will be either a\nbuffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'X-My-Headers': (req, res, body) => body.toString(),\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': function(req, res, body) {\n      return body.length\n    },\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you can return a wildcard match:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => '*')\n  .post('/some_uri', '*')\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and answers and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests for example to add them request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: = scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorder thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Backers\n\nThank you to all our backers! 🙏 [[Become a backer](https://opencollective.com/nock#backer)]\n\n<a href=\"https://opencollective.com/nock#backers\" target=\"_blank\"><img src=\"https://opencollective.com/nock/backers.svg?width=890\"></a>\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.5","_npmVersion":"6.5.0","_nodeVersion":"10.15.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-q1R1d6f2IFb5gza6RBcnssMa8NELg34PaZOfaB1e7sYM58eQO1d0kHl/3JsscVekHPbupJHr9uUwpsb2bermQQ==","shasum":"2678f78ef7ffeb2b3c0264030f760d21985553d8","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.5.tgz","fileCount":44,"unpackedSize":172907,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcSnEkCRA9TVsSAnZWagAAim8P/0GB1WFJa42K1p+1P/iQ\nf7nGx7N41DWSnPZXBuSD1MDPpveSvtmTGd9k0lvgxjfvV7/jF4Z9A5Vxx1q2\n1zobNCmoRDWu4csTOGC2RLkak9z7Ak4ZaeTEqddoEo6+/a6i1XpvYaKVabZE\nJi6Q53DOe+7e9ejD5YvBGRaQBtorawE7ob+ikF0v51fJCYNxIfvcgML+iSqT\nfTItjf1DWkFpXdjzJNhet6vbBYfsst5pxYNP4VaH4pxpPXyY0ILYg5WiWeIF\nYQ6WBoAGmAWW7hTcfRfx9ohzvu2NeR9/xtxPxT+hRJgxGB9JbURbD8mBMWHG\n4GShEazAGipI1FdpMxe0F6eQN+e9zM0eAwV5mqFzAzAuRShwPRCj5Ce9SPts\nRa1lkTbZunxbUHLYdr1/ErvOb9mzwKxefV7dDeLpYAGhA2G4u5Vlz8BYJTro\ndnvJLGsjRnBzP5DT0Pq6bAkeWlmil/sHlSvzOFKSF5klgy7rqiWOC89F6qiu\nv6YO4exiMZ7x08XEi4C7TVAbR0nSPNBfEnmnySCvf/a6zCdAwliLzEBWRJ0w\n8kGL+1aiibuVHGUjx7g1I6vgOpkwTBKkEE1FIzw9w966L7MUaIzFWH2gi81f\nHG0chZjUMkmL2yxCDkgKwkHuuEI77eh3VLGLvCJMthiizfCVjcwZBOskdaiR\nWjsB\r\n=+PeD\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.5_1548382499882_0.6807186468292699"},"_hasShrinkwrap":false},"11.0.0-beta.6":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.6","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^1.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.0.4","async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^5.0.0","eslint-config-prettier":"^3.3.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.14.0","eslint-plugin-node":"^8.0.0","eslint-plugin-promise":"^4.0.1","eslint-plugin-standard":"^4.0.0","got":"^9.4.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^3.0.0","needle":"^2.2.2","nyc":"^12.0.1","prettier":"1.15.3","prettier-check":"^2.0.0","proxyquire":"^2.1.0","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.2.0","rimraf":"^2.6.2","semantic-release":"^16.0.0-beta.15","sinon":"^7.2.3","superagent":"^4.0.0","tap":"^12.0.0"},"scripts":{"unit":"tap --coverage ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier-check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier-check":"prettier-check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"a07b0bae8d6c7358274cd3129f276dda9389cff6","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n[![Coverage Status](https://img.shields.io/coveralls/github/nock/nock/beta.svg)][coverage]\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n[coverage]: https://coveralls.io/github/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Backers](#backers)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Instead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nAn asynchronous function that gets an error-first callback as last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and body (if available). The body will be either a\nbuffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'X-My-Headers': (req, res, body) => body.toString(),\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': function(req, res, body) {\n      return body.length\n    },\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you can return a wildcard match:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => '*')\n  .post('/some_uri', '*')\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and answers and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests for example to add them request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: = scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorder thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Backers\n\nThank you to all our backers! 🙏 [[Become a backer](https://opencollective.com/nock#backer)]\n\n<a href=\"https://opencollective.com/nock#backers\" target=\"_blank\"><img src=\"https://opencollective.com/nock/backers.svg?width=890\"></a>\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.6","_npmVersion":"6.5.0","_nodeVersion":"10.15.1","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-yztwO+MiRnqriVwg+1mMgDrrBmBhbGcT+/8csPWyHjRYxJWr//UAgHH5Ul/wdTImN4+ndfx1gtDLX7tO/MWRyA==","shasum":"f4a1c03897f433bc696937b85a0f3ee61144e783","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.6.tgz","fileCount":44,"unpackedSize":170667,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcWF6ICRA9TVsSAnZWagAAWaAP/j4nBse7PmdyHOfUQBY3\n2MJXrcGSDBFCpWCDQ6F4SkjbXqO9pt2FL7KPxRxuI/05UKVUhzcQDzSK1sIl\nrjaf8WhiCPS5MvddSNMqFJOqAH9VnGjeTPtfRZiq8TtLSTLpvqO8Wi+HGsfE\nacRKy6a8c+PF4ZjEhzJSw/sxqdNZQgW0u2Nefjmt7v8dHI/7vU0ekxY/X/xX\npsQ/sloaMye1imqkxiX+8oADFoTnNCjHEDMr6X8m4IR1pVYsGqAGWNtGyQHK\n8T3Eo0hTZHfvyxKKxLymFfY0KjkPQ62TkIb76MUfXVvtuHKtWYruFc74C7mP\nAb9h132vMybhpn3Umn6o1lkhIS+6dVwEb/TnSY5d5p/naiCQlUZD5dciLLDs\nekz+1Ql2z/Hpaz3IzkkjyidZiV+qls6JXeOYHVVV13YwXCPCII3UiQxuXO4/\nrpybt1co4T4Eh/HBt3dQnY0XuZlcWZPA+KGTQzkkoiW11d7wPvzNMPr9PRB1\nxCY+pQ2owmrDhVh9pZNuphgrUvepOCD13h488QG6FXzRxTMDzjp4duexeq5B\nSUmD+ZDF6qdqEiH5vnNDm6r4DK+2cHlTFVzQ1sfDneRHtVOVv/xP5Y6kxdv7\nskRDLEPzWu7oDHgP5bdo/7nXDzLwSyfiZ1dknbRXreXnaVWdEjQOyN5/biiF\n7EjK\r\n=WiVr\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.6_1549295239866_0.49321353104698296"},"_hasShrinkwrap":false},"11.0.0-beta.7":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.7","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^2.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.0.4","assert-rejects":"^1.0.0","async":"^2.6.0","aws-sdk":"^2.202.0","coveralls":"^3.0.0","eslint":"^5.0.0","eslint-config-prettier":"^4.1.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.14.0","eslint-plugin-node":"^8.0.0","eslint-plugin-promise":"^4.0.1","eslint-plugin-standard":"^4.0.0","got":"^9.4.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^3.0.0","needle":"^2.2.2","nyc":"^13.2.0","prettier":"1.15.3","prettier-check":"^2.0.0","proxyquire":"^2.1.0","request":"^2.83.0","request-promise":"^4.2.2","restify-clients":"^2.2.0","rimraf":"^2.6.2","semantic-release":"^16.0.0-beta.15","sinon":"^7.2.3","superagent":"^5.0.2","tap":"^12.0.0"},"scripts":{"unit":"tap --coverage ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier-check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier-check":"prettier-check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"5b61f746fa09168c31a40574026bc6220769ac7a","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n[![Coverage Status](https://img.shields.io/coveralls/github/nock/nock/beta.svg)][coverage]\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n[coverage]: https://coveralls.io/github/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Instead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nAn asynchronous function that gets an error-first callback as last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and body (if available). The body will be either a\nbuffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'X-My-Headers': (req, res, body) => body.toString(),\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': function(req, res, body) {\n      return body.length\n    },\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you can return a wildcard match:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => '*')\n  .post('/some_uri', '*')\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and answers and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests for example to add them request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: = scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorder thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.7","_npmVersion":"6.5.0","_nodeVersion":"10.15.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-RXobX5Dhopzmf3MWAo8gMuPt/v7VxBUAXSM7ZPcoR8y+c5DpkaF7kE1TUje46dmSqi/NpGBgLXwuO+hMG+Yu9Q==","shasum":"3d3c1b9a9dc55a87c0828441dadcb32571f99724","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.7.tgz","fileCount":46,"unpackedSize":180793,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcr/BGCRA9TVsSAnZWagAA5MIQAKCpTQeb/6t/JDBaN3Yl\nrQ5X5X5NAVFx5OnIR+CcF0cXshk1VdEM/8t6obnPwSCq14ltnN0iySIJnxMo\nUya1b0YT+WOfv/IB7i5pihSY6hYRPzsRPuGOmUXOcHZhtNiHTQHda8uq+vaM\nTv0gnyNx4yUZIHPc/sRb9PlOsCkxuIRDcfuIBX5FhFQ2bLgo/nxn3lXuWmU5\npnO5pYs3mSQ6zlv7SC+SAhzT/sXO3cT6oTX49jH1vSilNp5M0RfeKsz26Qqu\n1FIeipxWH1MTkKWDtNU5nEd6ZqEfHFFvXLIslrG519rLu3V5uP1JFYwx0Fsu\npQs587V7ugyJjvsDOGdH54DcK3Bv11Y1kZ8OMnFUY5g3vM4namfQYd4q7e0g\nSOF+XFMsHu6iRwGR+lwwNyJcADda9pHLEcsm+jzs8cC1bdk5eF2/ED1f8GxK\nSESkpk6wwtDDdYvfZIm7dwHv3By/7nuyVIbCYmQ+PeYtCHePxoHT0J4CgiVC\nOsyxYRRj/vTAJ3WBxGWb9jl7UYxm3RZYSYiTuOKmr7OBFonnHdiMJ3GTkGwk\n9qdPyVRjhXNSMxXYzTvmepnCZU+56RbUZUEkK6OMYtVQOA4sfMsy43Q0nnqQ\newAccCVtnA/t/mvsgQX7Jgv9Rcs4vc/+Nwd+PQfB3s/026MUZxES28LSs5rN\n0mO4\r\n=z7jm\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.7_1555034181687_0.24576923737084821"},"_hasShrinkwrap":false},"11.0.0-beta.8":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.8","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^2.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.1.1","assert-rejects":"^1.0.0","async":"^2.6.2","aws-sdk":"^2.437.0","coveralls":"^3.0.3","eslint":"^5.16.0","eslint-config-prettier":"^4.1.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^8.0.1","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^3.1.0","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^13.3.0","prettier":"1.17.0","proxyquire":"^2.1.0","request":"^2.83.0","request-promise":"^4.2.4","restify-clients":"^2.2.0","rimraf":"^2.6.3","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^12.6.1"},"scripts":{"unit":"tap --coverage ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier:check":"prettier --check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"7e447696ebd888ae94a0e578bd2b60ef077b8fce","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n[![Coverage Status](https://img.shields.io/coveralls/github/nock/nock/beta.svg)][coverage]\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n[coverage]: https://coveralls.io/github/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Instead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nAn asynchronous function that gets an error-first callback as last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and body (if available). The body will be either a\nbuffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'X-My-Headers': (req, res, body) => body.toString(),\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': function(req, res, body) {\n      return body.length\n    },\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you can return a wildcard match:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => '*')\n  .post('/some_uri', '*')\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and answers and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests for example to add them request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: = scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorder thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.8","_npmVersion":"6.5.0","_nodeVersion":"10.15.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-xLlKYqXGsFCIjhyG2pSgYAvcqGmf1vKEBnRldUBaL0+Outq6/1nU7Jo4XxyNNtnroZ+AiifXzq+QXt54m4mZlQ==","shasum":"40438eaeb7ea8cc5735f30afce2258df08a2f47e","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.8.tgz","fileCount":46,"unpackedSize":181869,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcslvQCRA9TVsSAnZWagAAQVQQAIHf5TDC6ebtsXo5YbkY\noAz1YCfY/U9WH25HedEr7X8oiD5d35h4fgww2k2b10QMj2ZR/1g1t5wnUIYg\nOF7JNelCG1RzqF9sWcAkGjzf4FPaxYD3zF+UP7ILLDDU9rnMlYFyLZL1io/t\nVBuUn794UIMYjwhc6G1v29nv48We6nOqSovK4hJeKm4HvRkjkNY3Kld8Trq8\nGf9bA9GA2UdUTaKzE5Fq6D05N3HYgtLRLa/HuHS5RQpeV5PWswdUh0+ggDa2\n2nmEzfzELh3Xkc++gFw31mEgc8FUIj375eWBqcrGTpRb1mFHbaza0RCPfUrG\nuSxkohgYom1c5mCQl1v86Y66DQ+OJxML/ok6TKkq/ludYYRE9yt3orTo6jb9\nsvMLxJG+4/7fLtcH3hkyOQYDeiP1La3GISlxJLvRd/BLrDYZwSOpDuJeYgut\nqIQzQruGQI8oOYVXk6xvhgGzvrSzhjIoKyDWFBfkuDVY+k9sPdyWRDdB/K+c\nd2UhoKl0keXeM9pxvPRRQOyPQ9y2FmprNGYD4uERl1sk3B8m0aEnM9AJJZzt\ntz/AzZjUmD4P92UC/T7GT63tgb+hNcIyYdbEp+cf4PVN/2lxz95gZG5r9e6n\nAU7ptUMzgSxD872Uq6RxvBGWpSy7LJOfX3AIeCXtGofpWJKPU6wfWoyv/VJ2\nBrV2\r\n=581H\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.8_1555192783815_0.18190864611038515"},"_hasShrinkwrap":false},"11.0.0-beta.9":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.9","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^2.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.1.1","assert-rejects":"^1.0.0","async":"^2.6.2","aws-sdk":"^2.437.0","coveralls":"^3.0.3","eslint":"^5.16.0","eslint-config-prettier":"^4.1.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^8.0.1","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^3.1.0","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^13.3.0","prettier":"1.17.0","proxyquire":"^2.1.0","request":"^2.83.0","request-promise":"^4.2.4","restify-clients":"^2.2.0","rimraf":"^2.6.3","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^12.6.1"},"scripts":{"unit":"tap --coverage ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier:check":"prettier --check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"d6667f0e92ece7ecd52f23acd23f4ad3b69ff212","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n[![Coverage Status](https://img.shields.io/coveralls/github/nock/nock/beta.svg)][coverage]\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n[coverage]: https://coveralls.io/github/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Instead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nAn asynchronous function that gets an error-first callback as last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and body (if available). The body will be either a\nbuffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'X-My-Headers': (req, res, body) => body.toString(),\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': function(req, res, body) {\n      return body.length\n    },\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you can return a wildcard match:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => '*')\n  .post('/some_uri', '*')\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and answers and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests for example to add them request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: = scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorder thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.9","_npmVersion":"6.5.0","_nodeVersion":"10.15.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-znVmUvYSgFHaHOBEgGvhYQbDwht5l7/sJsIms3scjAve58lnGj7di/mHySATR+ARfjpL6zxHGUdI+MlR3fM2Jw==","shasum":"153d4d2d8a2f95bfa5ef925fd4001564e34aaf02","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.9.tgz","fileCount":46,"unpackedSize":181662,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJctLOPCRA9TVsSAnZWagAAgxcP/30FIkHD/DbKyqucfJ07\nXae6TEdUZUdDk239zbrymLFW2Nts8Z4Y2NDfWDfyvTFp0zs9n/ciwAdnylBA\nM++7r1uiWzwf+LsbHomFs0J5gvUa64rwIfVrLcO4dTp5IpQM3/TE4AqFdoOB\nplcTgBYsuNv3D7sYnWg0FlfckYVFE3DVD75uxYRgkSwH8Rl5SaHp0YqBuI1t\netHHfy/nfC5tPUblGZa8LG3NLOdWCT9n4kApbb853xCD3UOSrK48HR5Rc77/\ntkkFy6oQJpeIZSpjrvQRtn/WvoriyxoMvQBMtcgZp+XJeucLzNlugjvUQu/3\nA3vzcGpc4iZTN0GG/Jj/iInlRNAK0/L/f1hD25M8GdRF7P38bnbNScBFUjFK\nb424ggR65YCgPkxOiH102CQtWv+W+q9KW57aC2e78J3fhPr/7pAlgF9B3YS7\nftrTogyjtWUZbHadRLSuRSP44tLd0fTeSI9aPTxg7uGaG08GEpYLoKopacjw\nWo7I9nl26Ey9PTawZw6sPrS6/FBEJEne3huvNNDy4FMBEzs5t39y6M9lcMEE\noPJYXZSoGUmBsEGLHWPiwn5x8XasSNK4xELwozbkTgJPIoAil3cvcV6oQBTO\nEwnuyXf55ey3dQmzBXHUvHQJhXyLlf00jIzHvWImaSgtKwuuZYWxM4hq3gfp\nl1aS\r\n=kpTz\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.9_1555346318661_0.13495050181775126"},"_hasShrinkwrap":false},"11.0.0-beta.10":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.10","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^2.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.1.1","assert-rejects":"^1.0.0","async":"^2.6.2","aws-sdk":"^2.437.0","coveralls":"^3.0.3","eslint":"^5.16.0","eslint-config-prettier":"^4.1.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^8.0.1","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^3.1.0","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^13.3.0","prettier":"1.17.0","proxyquire":"^2.1.0","request":"^2.83.0","request-promise":"^4.2.4","restify-clients":"^2.2.0","rimraf":"^2.6.3","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^12.6.1"},"scripts":{"unit":"tap --coverage ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier:check":"prettier --check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"24e5b47425b6d21c0491bcdbe3ea0114ca61a222","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n[![Coverage Status](https://img.shields.io/coveralls/github/nock/nock/beta.svg)][coverage]\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n[coverage]: https://coveralls.io/github/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Instead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nAn asynchronous function that gets an error-first callback as last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and body (if available). The body will be either a\nbuffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'X-My-Headers': (req, res, body) => body.toString(),\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': function(req, res, body) {\n      return body.length\n    },\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you can return a wildcard match:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => '*')\n  .post('/some_uri', '*')\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and answers and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests for example to add them request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: = scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorder thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.10","_npmVersion":"6.5.0","_nodeVersion":"10.15.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-93sOUpH9gzvr4yu6hbC0pVk1mQxtGWLkModO2b3bVkVoVFJ56+xoFY46yHbjUyOtnCWuaskCWUihMuOvwiDoYA==","shasum":"ccd6efd0d94510d8c92c01797c202e8fbdf9f4e7","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.10.tgz","fileCount":46,"unpackedSize":182241,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJctPhqCRA9TVsSAnZWagAAWM4P/jZrzRBA44LSCZpRIzPQ\n7c7HRqz8UHqEW8WzK6E+1/7Vd9NplWNx4ZhIBjhnsRTd+yPOXVMhxEIAchzT\nJ/Up+mLvUUMgNvKJAgOPK0cL8WbNOGn0sfRCuEnOQR/R9RC2Vei/HegiwazN\nsdGxVH4uePlCuGcDwL9AI7qTgZGb1yaqkszdtYdtaLV2Afy8HcRs1yJJIUkx\nZ9ert+dGa/UY+IXibejKFHy0xlWr2A4cGIxVwVmIZEZtBgXkB5z+MSkTeN/e\nsd0QwiAp2OIHNyI4GRvKDYduRp/6r0o66FPBpXqP6nhMaw3YANSrG4S5Qn4/\nWEsH9Ef36LJYFdCQmVQf6kgAbPgmnd+vO5EQ+vMNeZQ3k2OZz+t52bXmL+35\nPlT1DB9zFt3tPdA1p14Ob7S81qmDS1rbvvFNZYyPWLVqll/VYH5YNr9u2VGg\nL6c/d4Cf9R+1kq13RZAGi2KmpFAIgQnYG25kp6l9krnHt6NJUGdUxdrS8y/R\nxW7PE2mrSdAWP9ZmUm04J+y6H78gCu20D+SjyVdYwOzNmCgvPVBNXPEvvN0I\ncx8MQ1AVsud/nNRngrFpcd3P/RMgt+R/etsrr/sL9myW08kGPi4S2eX6XpOB\nxky6dY3Xd+APqFOdf6/2T/BkfG9z2SyBdALU0pZEnsJFqhnts0geG2J60u+T\nZ4cp\r\n=T2DV\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.10_1555363945868_0.015123560567526173"},"_hasShrinkwrap":false},"11.0.0-beta.11":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.11","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^2.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.1.1","assert-rejects":"^1.0.0","async":"^2.6.2","aws-sdk":"^2.437.0","coveralls":"^3.0.3","eslint":"^5.16.0","eslint-config-prettier":"^4.1.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^8.0.1","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.17.0","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^2.6.3","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^13.0.3"},"scripts":{"unit":"tap --coverage ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier:check":"prettier --check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"46c0fd079c087edea608ca82de296d5584c594d1","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n[![Coverage Status](https://img.shields.io/coveralls/github/nock/nock/beta.svg)][coverage]\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n[coverage]: https://coveralls.io/github/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Instead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as the first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and body (if available). The body will be either a\nbuffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'X-My-Headers': (req, res, body) => body.toString(),\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': function(req, res, body) {\n      return body.length\n    },\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you can return a wildcard match:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => '*')\n  .post('/some_uri', '*')\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: = scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.11","_npmVersion":"6.5.0","_nodeVersion":"10.15.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-TxxVliX+Uq+PIxeo0XTDl/8suK8vsXG1mJ+zfdbg+1lRAKKtwxKD1eWfcsFahMVqazLjf+UzxcLKuBegr21pcQ==","shasum":"8fa0586b44c6eaff043bfb415a3acd2a1b0604c5","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.11.tgz","fileCount":46,"unpackedSize":182601,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcymW1CRA9TVsSAnZWagAArSAP/iyBs9cZgqVuvOVt5ayb\n7PY+n+98Q8c1I7N+sAMgFiEwQ4jjiOUAoWfCBOtFBIG3SdRB5JaoDqbH1zl3\n/IfZgU8+GOVTCb8p2Zv8W3EhgPqAPABtMKPRDnvp6ylkK8xlCyhywNZGrMZt\nfINvbEJKLDUvOR50JnJdOccmYft8+WmUAav1Dx2HuKbHGn1+59OoX63ux0md\nSGUO+S1Y8EjVPS0Rx1Se+n7neF9k55eqA0gSG9dZS2s/4hhIaNOmEQfRPJj/\nrRj7ZQnRBDl/QmcOEztKL+xHrXTX6foGoTMZuDQceEtG2byvNmCUdPTBWrHT\nFB/4E50E5FEpRI3XFlkiF1XxaIN+KOgGKP3LmPfj3lk6xATE8BN1MJsGUdQm\nNYWwVlbJUgJhdXmjn/cb8evvds56PcXCQ1eX0pXxdRMrJOoueeU4svdald+Y\nRS+eDzch+xLLfNpxkk6nyaasTL52zUp3wnTozivZaMFkTukUS9/lNiZEMXMX\nm31Q2WCgp6GTGeMbMi6josNxswwZP2Qn08Igg/V/rwrUkD1qEWvEPnA0M1v+\nimKxNc5heZpnVCuSGik2AB+tNsQzDxC3q/9V7tLNVCAzgROmooLvX0Ln7Sch\n51dLB7iR7jKi647D0H14pzHwox7rxtBetZSsxJW8A34wNZ8lPtfz4lEk7l9X\nubwU\r\n=FDnA\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.11_1556768180995_0.399753444059203"},"_hasShrinkwrap":false},"11.0.0-beta.12":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.12","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^2.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.1.1","assert-rejects":"^1.0.0","async":"^2.6.2","aws-sdk":"^2.437.0","coveralls":"^3.0.3","eslint":"^5.16.0","eslint-config-prettier":"^4.1.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.17.0","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^2.6.3","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^13.0.3"},"scripts":{"unit":"tap --coverage ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier:check":"prettier --check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"560a5d863095c6a860914c46b2c5eab8e42fdade","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n[![Coverage Status](https://img.shields.io/coveralls/github/nock/nock/beta.svg)][coverage]\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n[coverage]: https://coveralls.io/github/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Instead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as the first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and body (if available). The body will be either a\nbuffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'X-My-Headers': (req, res, body) => body.toString(),\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': function(req, res, body) {\n      return body.length\n    },\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you can return a wildcard match:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => '*')\n  .post('/some_uri', '*')\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: = scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.12","_npmVersion":"6.5.0","_nodeVersion":"10.15.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-ZX2uZowzcPg6cGnL+dt9q93QGlSM9mFNEhdEuffytpm7ECgbwUsL/LR4Bqa0k/UlR0uvr9t401Cr5Y1wSvf7Ag==","shasum":"d8d7e5a92cb67a5c9e4e444f9df64b7e3fde7dec","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.12.tgz","fileCount":46,"unpackedSize":183006,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc0ZJDCRA9TVsSAnZWagAAakcP/AsPkRxT/9BRejYPma8r\nS5wcX2CR+eYcTwfrLK8q2NNCmiwdcYNVxFQQsBjHPuJ7JTAyYG4YT3/VsktO\nFFmGH127z1cLVZDKF92u0+K49E5Hq/nRf3q3KmRvZ8ycSgNdlYgA5YbnTc8v\nvZBPBrrwaQ7v1kUC8V7JBI0bjSA+IohVl7l5L/rGmcHHbv4tL/skFwIzG5xY\nI3b7vO9S9tnmbKaWxY3VEbOoxSFOtv++B16joNIEdeyxqgVB2KpW9KGECbHw\nZ9FFGPsqmvTSZ9l7z5uAQMUZ43jmFefxGlAIWW9Xxmr8dTPKAZHUI5yNapMz\nU2ptwmddEKv+rRqQeJV7Lo9Zznry9dzDIPhLA+3Fb8dDbmZlv2XXhuF/jK88\nUosuAwBMaseUxC9itISriKP++60JvuqxVKQBgr0pSfma/l1erXsy4x1eYklg\n2me0/R+BdNDwnTmr/RHrsHCis92hQlSG/ejADMQK7zUDr64E4noTth+3CumE\nXQbbSRL7j1GIohwv/8kP3FSDmd9HHjLXQX0CjQRL6SXFGhcZO47lTSphggbH\nYgbWQBUSIhacbocH6qdx+EJNyZNWSPzXQyfdWI7ZBCHi9p3KpmNawFnXl1Ld\nUDaIg2epZ1zEsMWrwRspggSBLHN1XSDoF3cmbaiHBj/51WvzEs4BQOsPngEK\nj1Ll\r\n=QRHY\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.12_1557238339065_0.3190856657496335"},"_hasShrinkwrap":false},"11.0.0-beta.13":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.13","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^2.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.1.1","assert-rejects":"^1.0.0","async":"^2.6.2","aws-sdk":"^2.437.0","coveralls":"^3.0.3","eslint":"^5.16.0","eslint-config-prettier":"^4.1.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.17.0","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^2.6.3","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^13.0.3"},"scripts":{"unit":"tap --coverage ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier:check":"prettier --check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"9a494da64fd125f28ca1ece4e23dd42e19f6d542","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n[![Coverage Status](https://img.shields.io/coveralls/github/nock/nock/beta.svg)][coverage]\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n[coverage]: https://coveralls.io/github/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Instead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as the first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and body (if available). The body will be either a\nbuffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'X-My-Headers': (req, res, body) => body.toString(),\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': function(req, res, body) {\n      return body.length\n    },\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you can return a wildcard match:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => '*')\n  .post('/some_uri', '*')\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.13","_npmVersion":"6.5.0","_nodeVersion":"10.15.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-wV39aDxi3LmWm+Z12kRgkLFXI8nDcPyeEptp0nlO59fOwC1cW4RfyJePAT/2Dh+u/ueem9WCTNVja/JDR0JFJA==","shasum":"c3a4127f8d2eecd71eeea20c0d1b4868589ebfba","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.13.tgz","fileCount":46,"unpackedSize":183112,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc1CqQCRA9TVsSAnZWagAAIx8P/0SEQ+19QWhFzfbrTKED\n/rdB4P5wcPXkvnOQPA2PWozxrpzGqI1Xyc2Neh8/IT9+Vv3nrQwzPubFSBAi\nC0fkq8OmycezkzsENWD9e0Ce9ReJZmcqZIYovT5v6UlMoRwJK1X8oWo2BO15\nkqKK28KLMrVqvoD/B2wck7HhWWFHohurJ4eFjJ4gkr34AZUfgLTTatC/KPJT\nD/GFZ+ExScP61D/5aD+qVF4rf2+6Id4vCiLRA4poveyN7R9lUOViuVTyBCMg\n3K3IqGaN4R9fq9/T8w+jzKe57VtMQp7pXzHKWwDZQR07fOL/fay4V+2BOwwo\nZCNpOR/LteJZF0yKwDFmTqkmjoJSgxi+Dv9Rc3CJFO/d0gHFpHYfLSGItuE6\nYE1foiHLZXaFsopxrUO0mShAmyF8JpQnosJTqOGyA1diz6DLkUilkQqoNVTM\nbscBMSUjRvR1eKMSvNBDo5DROWMgf6ihsmNA/H6wSPsK1UozR8yhndbQNveZ\nC3RC2fG8aBWbQCYKwIzuvoMzCcdSlnh3y54eF09ibBWbvmVSkv2JveiyNQDc\nOH0RB6CYDVgYgMntOJE4HCDnAf7tWHprWljQ5O0uSzs9jqYqvneWiW7XITn1\nAPq22d5jJ409KqTuLAKRi4M8ONARz4t764w6/G5OAYKReIzGq6HYKyX7Ts3z\nAMNs\r\n=7eni\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.13_1557408399672_0.7569038213967447"},"_hasShrinkwrap":false},"11.0.0-beta.14":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.14","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^2.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.1.1","assert-rejects":"^1.0.0","async":"^2.6.2","aws-sdk":"^2.437.0","coveralls":"^3.0.3","eslint":"^5.16.0","eslint-config-prettier":"^4.1.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.17.0","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^2.6.3","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^13.0.3"},"scripts":{"unit":"tap --coverage ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier:check":"prettier --check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"31623fbc01a1c5a827580ee393dc3a3d1846f225","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n[![Coverage Status](https://img.shields.io/coveralls/github/nock/nock/beta.svg)][coverage]\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n[coverage]: https://coveralls.io/github/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Instead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as the first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and body (if available). The body will be either a\nbuffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'X-My-Headers': (req, res, body) => body.toString(),\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': function(req, res, body) {\n      return body.length\n    },\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you can return a wildcard match:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => '*')\n  .post('/some_uri', '*')\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.14","_npmVersion":"6.5.0","_nodeVersion":"10.15.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-/AohvLyuGae3v4jywe2pC3lfoOaDZKHabg5/eCg54/SIh4sE8JJ4HWp0TmhX3zGvabxr04n+Tj3+uiPOwiwMAg==","shasum":"07aa87a6843530457fefbe0ec3dc55d72db69ca3","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.14.tgz","fileCount":46,"unpackedSize":183567,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc1FlqCRA9TVsSAnZWagAABIIP/2XZ0KUikZHJebrVqXLr\nwBUvXDBRV9uUnjoupnDPC5c2Bs1Iz8BTgnZMjZAifBeCXnRf9QKmRsKBWq9D\nmjv192w5AOU28oyEWLKmXCZVvA3YjyZjTnCT039/q5s1k99TmPhXNmyEP962\ng8HLVNTDDLNBPL0wzCb7BNT+dkNP5J8AMxcmPoVL0/RBP4t+gl0Rqsa+QJhv\nm0RLsTs+Cw0dPf9mrivf2Km/vJ9RSmF0qmkrdHFCYhQ+udiSZ7L1Cv6PMHjl\ngSFMewtGZjgJIrkwq0zrnFzngiQkebq1DLAHEsbLITfbewtrykSI4JpUrAQ9\nKoZSkN/xtOH6Zk/QbT/P7Q4f2nwjWyuF5kpxueeZz186n+bHCklVGO3xCYVP\nNSmWiNqcRCKSjqxZKXxCQ68cg5KDnrNfI3KW0RMSZ7NMuwvDWHgFPONNt+Bi\nwWdFs2eRwAw1npmUEi4xGHeyjkWQT1oOKgpo4kb41vDir7BHbklKfsjOAc1G\npADeQKyRoKXh+xlnvVNLUp2efEahlUzfWz4GICsuwyA1UMRQiVNValGNexet\nt1wEM3zKoNa2PKNr1ulddMEuHU8SCP/M1vD13nhKm5kZRBRs0yJ8gVmKwL8Y\nZBEAnUNYPHNMfXIKiwveHgISkU5D9S8fIJN9SnDXPHaMA61sVPOpKtU3a9tr\nqgHw\r\n=Gy8m\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.14_1557420393409_0.9200778347267624"},"_hasShrinkwrap":false},"11.0.0-beta.15":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.15","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^2.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.1.1","assert-rejects":"^1.0.0","async":"^2.6.2","aws-sdk":"^2.437.0","coveralls":"^3.0.3","eslint":"^5.16.0","eslint-config-prettier":"^4.1.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.17.0","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^2.6.3","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --coverage ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier:check":"prettier --check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"2e779f0420f048c318c8d97c88aa7833d1133d8a","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n[![Coverage Status](https://img.shields.io/coveralls/github/nock/nock/beta.svg)][coverage]\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n[coverage]: https://coveralls.io/github/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Instead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nIn Nock 11.x it was possible to invoke `.reply()` with a status code and a\nfunction that returns an array containing a status code and body. (The status\ncode from the array would take precedence over the one passed directly to\nreply.) This is no longer allowed. In 12.x, either call `.reply()` with a\nstatus code and a function that returns the body, or call it with a single\nargument: a function that returns an array containing both the status code and\nbody.\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as the first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and body (if available). The body will be either a\nbuffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'X-My-Headers': (req, res, body) => body.toString(),\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': function(req, res, body) {\n      return body.length\n    },\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you can return a wildcard match:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => '*')\n  .post('/some_uri', '*')\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.15","_npmVersion":"6.5.0","_nodeVersion":"10.15.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-+2GHGRpBnRGrfxaSo0cbH7YNg3TwLS2ObCPrK1b2fZmCIuNWy2+xVeYTSolZ9KT8Ck6hsnIIow3c+SkBscXuYg==","shasum":"812cb73bca06b75b9859334f548da7c34e592d35","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.15.tgz","fileCount":46,"unpackedSize":186463,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc4uL9CRA9TVsSAnZWagAAsGUP+QCTYsa/aKCwzvXcb0K0\nGPPKgAISvtXRzQPVRyiDrZe/w46XX9w5eIIZFiFZpDgsxCIh6lnimhzRqDmk\njN33SZHz3O3VsI/Ob2Arnr06uP3m2igbDY5DUzj1cRxzN1kTIqbmWC0I92lT\nASqSRoQaWwJmIwDo/00dMfm7YX3dCK859EQgnDfrdAUF/o6NlUx8Zb5Hk6h/\n80SCefV0vHLhZ1RXkZ9Jr0QiHdCBgzbHJJEm4jLaQGTc/AmorMBpbv2Nz3Q6\nBd0E0hVqk/iOtjPcLC7csb7jEl//hHkGTYFNKnnWBET1CIPjTEsonvxL143A\ntm2gkvPdWqXkMJFMc/w0CuowR/qfx9PdEjxgjClvv0ep3+UdyJogks1YC23x\nw3PGG1s8NRUeN2Wjw6yuF95NYqJkQPYBvhK1ADRBqwe880Sejx3/9PlOzwU4\ntdKLDhThRVV3YhRSmITuGVhtdfUgja/4Iga0Pdr1rAlyHu47eMAwRIKLezIc\nxcBxA0rqewK2UV0anI8aeB4KlbbvqgdlReBxPLV5hWACnI9vXv5qPgiNK4A6\n4+T08Io+nBDjODz3PV4Q0n5JudT/USZQPWVaANEwQwhJHljedTv7VJjVmz6c\nug6q8CABBowx41v7ZU2NcoDfNj8X+nX/DgfvRjcY8BAN+t7hcF3Z3I4VfZtA\nOPW9\r\n=cFgL\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.15_1558373116139_0.005634726950238367"},"_hasShrinkwrap":false},"11.0.0-beta.16":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.16","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^2.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.1.1","assert-rejects":"^1.0.0","async":"^2.6.2","aws-sdk":"^2.437.0","coveralls":"^3.0.3","eslint":"^5.16.0","eslint-config-prettier":"^4.1.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.17.0","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^2.6.3","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --coverage ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier:check":"prettier --check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"4857ae5b4b6537afe3e636b7f15d4aaaccc4c7fb","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n[![Coverage Status](https://img.shields.io/coveralls/github/nock/nock/beta.svg)][coverage]\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n[coverage]: https://coveralls.io/github/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Instead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nIn Nock 11.x it was possible to invoke `.reply()` with a status code and a\nfunction that returns an array containing a status code and body. (The status\ncode from the array would take precedence over the one passed directly to\nreply.) This is no longer allowed. In 12.x, either call `.reply()` with a\nstatus code and a function that returns the body, or call it with a single\nargument: a function that returns an array containing both the status code and\nbody.\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as the first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and response body (if available). The body will\nbe either a buffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'Content-Length': (req, res, body) => body.length,\n    ETag: () => `${Date.now()}`,\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': (req, res, body) => body.length,\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you can return a wildcard match:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => '*')\n  .post('/some_uri', '*')\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.16","_npmVersion":"6.5.0","_nodeVersion":"10.15.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-7VD8SxrfUXLBdGsBjpUrBu2s8WkCSeiMcx8GeuX7hxRYxEoMz5wrGINgbBJSZhMOQOEzwVq+DJfTLgkq3sgSDw==","shasum":"82b47f733aa91a7a2d8fc8ff574527c6614760d7","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.16.tgz","fileCount":46,"unpackedSize":186502,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc4/CzCRA9TVsSAnZWagAAh1gQAKUnrRPFJotpjT8Y17hK\nZB8AkQEn0uprlV9nrrwZdhuzKXiNJtudluAMxuzPjAo8E5o1k6KMk6MtKmKp\n52tX2rXYdH91o4hYw6MsmYFNM7yGs+E/nABzMaJEFpYgL9bg0YhZj/B7oxnK\nVhExyQW12OG7j6KMQpBe/NPW0LwJ5tKgAO6K7k//6bTeAX754dr5iziu9TD2\nlCyXKdJGgreGOeC9FHwDPEggol9+Gmx8/KFQvGwmKfnfvsoGyEdlWT/7z/M9\nCj2S3+DV3bY8ssdw4jMf7824RGvdTX7moODsKUlcV0DFjMhBAQDH4NeJTxkE\nS424xyfaD448Knl4isKcvEWzHtkE8wMrEyCfNgv/toQGzvSWcbybd7pqEO56\nyMCLpTq4oHRB8wW1Eqn8ndtRJF8wqv3hEAlPP0DzWdYXGw1NWINXSSwA8dWb\nNWdz5bXDvVgdaiFNxQZCuTaVI0PXIvp543yGiGB0Unfea12SdxTSfTvwalNa\nyCouNx1ezm2EuCkxz+AytI5hSjDf+tAUS10vdhPr4WjWGHXKY2T02RMfsCqd\nlfPaztUz3AZ9NpFRfOqun42Fyt9rvd0ah4B8pkWpiA07bimGBn3w3nfSUl85\nMPRh8ce6Nr83y7yR9Uo7Ztxr0A3iHSvrnRjzCVoK1BCQ+ulYojcu0Lidog3b\nRJ1B\r\n=hVhy\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.16_1558442162267_0.8762796635324812"},"_hasShrinkwrap":false},"11.0.0-beta.17":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.17","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^2.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.1.1","assert-rejects":"^1.0.0","async":"^3.0.1","aws-sdk":"^2.437.0","coveralls":"^3.0.3","eslint":"^5.16.0","eslint-config-prettier":"^4.1.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.17.0","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^2.6.3","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --coverage ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier:check":"prettier --check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"de525a1c104987ae0d85de9011032edb761deea1","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n[![Coverage Status](https://img.shields.io/coveralls/github/nock/nock/beta.svg)][coverage]\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n[coverage]: https://coveralls.io/github/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Instead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nIn Nock 11.x it was possible to invoke `.reply()` with a status code and a\nfunction that returns an array containing a status code and body. (The status\ncode from the array would take precedence over the one passed directly to\nreply.) This is no longer allowed. In 12.x, either call `.reply()` with a\nstatus code and a function that returns the body, or call it with a single\nargument: a function that returns an array containing both the status code and\nbody.\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as the first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .filteringRequestBody(/.*/, '*')\n  .post('/echo', '*')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and response body (if available). The body will\nbe either a buffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'Content-Length': (req, res, body) => body.length,\n    ETag: () => `${Date.now()}`,\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': (req, res, body) => body.length,\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you can return a wildcard match:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => '*')\n  .post('/some_uri', '*')\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.17","_npmVersion":"6.5.0","_nodeVersion":"10.15.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-yRBXQqhWfjn6lyhKDQi/lCm0saLJz8Gd43uke62c5vgKw9FfQPMsJHiaPA/TUpaJcr6LpF/dGt+kxHce8ggNyg==","shasum":"deb24f8eae26e8d66950d22a3e9986e3c72dd049","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.17.tgz","fileCount":47,"unpackedSize":186538,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc7UjSCRA9TVsSAnZWagAAkmIQAI+vfoNkDZkOUXH+VudP\nqRmvj6pGC+42Vpd1lveEM6c3ZkYGaYg5jfZR3r0mf7zDu+t60hw0iTR+9l1U\nZM8dSkzuH8vWErXw+F9IJq96nslYD/I58iOKIp8C+V3hGs1+ioAh+8AEl23J\nJG8jwxDuiDIo46MMpYmdiR2SiEnvbEZwOJ+/GxKvKBzT49M3MwUcyUOM5g7s\nQksnzz0mwtBIt5bB+K2a6Izsae3k2g4DtsUt37+deh28egGEZCdZQQ4H4eYv\niEkDgKs1Pzy7TpQgSL964/M8rDDjy6c3dv/9gUe7U0kgTj5TcHfy2ccuZFpB\nygZbia1dW18Bhkw8Ec1lx9dybn7jDsnJJ2zID3GyCd+KHYHEr52s2Ik1YBZV\ndQDsSy/hXeN/l7eFDGwIP0LIzB4CA+FpalnGaiGPkQ3ROtjdouzVI4RPuPDt\nV57sSLCh67cTKF2AXR4HnzM3eJv0EHnEQHXsH16IdzA4lVwubzCZ7I8lCcxo\n3tqggAijI6LfnzmyT2x/DVEhLsF9+R6J/F23SO3+fetIqNBkAvY3dw8siUFa\nJavvvKzpoNxDJJAgnT+iHLKW5lvJdcHd7t3Ugw21KjfrNHZA2ZichePChTfA\nTx1WkVLamsvuDU9SkEIRBKXt4IRVf0RMQ0ZmOsG7sYXwNWji652TQxIMf7c3\nm6cX\r\n=St48\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.17_1559054545169_0.9686225683585763"},"_hasShrinkwrap":false},"11.0.0-beta.18":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.18","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^2.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.1.1","assert-rejects":"^1.0.0","aws-sdk":"^2.437.0","coveralls":"^3.0.3","eslint":"^5.16.0","eslint-config-prettier":"^4.1.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.17.0","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^2.6.3","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --coverage ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier:check":"prettier --check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"b687592c4e2103ac88a7f813b7e1019264e48d01","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n[![Coverage Status](https://img.shields.io/coveralls/github/nock/nock/beta.svg)][coverage]\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n[coverage]: https://coveralls.io/github/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Instead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nIn Nock 11.x it was possible to invoke `.reply()` with a status code and a\nfunction that returns an array containing a status code and body. (The status\ncode from the array would take precedence over the one passed directly to\nreply.) This is no longer allowed. In 12.x, either call `.reply()` with a\nstatus code and a function that returns the body, or call it with a single\nargument: a function that returns an array containing both the status code and\nbody.\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as the first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and response body (if available). The body will\nbe either a buffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'Content-Length': (req, res, body) => body.length,\n    ETag: () => `${Date.now()}`,\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': (req, res, body) => body.length,\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\nTo repeat this response for as long as nock is active, use [.persist()](#persist).\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you should omit the `body` argument from the method function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .post('/some_uri') // no body argument\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\nTo specify an exact number of times that nock should repeat the response, use [.times()](#repeat-response-n-times).\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.18","_npmVersion":"6.5.0","_nodeVersion":"10.16.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-joDiFVl5Bv82Mb6koUe6VRvOQw0dOWSzSPHF3X/lIMx8Cfq6zHUBRPMwtgg7zgnFQFDr9i4ilDEenv2WgEJxdw==","shasum":"3a16468caf159b27feb14b7e2168232b3b4cf8a9","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.18.tgz","fileCount":46,"unpackedSize":190452,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc+82BCRA9TVsSAnZWagAA2NgP/3l1v+k1wxuFWjutZGet\nXlqD3zqeLiTT+q7jg1LeRBWx9cRahn5ELAwKrp2/kOzmpFhUxchgiN9Zx7W6\n7JmQHQAAxgM9qG62QDLGcp+2mlLEjHm+AMYSTJE2pvEJ3JxlfpqB5UbVPNfn\n4QQfcmXbgEWWPeBP11b5lYeein5HBqYpouBGXrP/6jmq4iGc8g0enM47imuN\nEOhXFpXoiHmjSf3mrm8CHupu9tESViwNauZJBjBoqtE7nocAfmGi+tcfjC4Y\nl0FmeqXhcvNppKTa53/8pIFa+4lnvODT6Q++ai2r4fiYnC7iaC4eY0SOXvRi\nasc7FXbg7AZOWeov/9IY75vsHSDYaAeH/0obKMdYjABNQ0S6GD+KMrLHPgmt\ngKxtC12c6v19+N5NNNRfKZqZfXE0ug5NVSutLVbQrSjH3VkmAxCmKscL7ir1\nei+67AwVNFSg6Y5D0oUIZd74mJbEYpLP3rey3Gd1rJtLCw20RvJ8M2IGWI02\nIVdXkqYWyDXFuFyTR8zD48QSoGk8/OSKGrMU5n8VjBQeyOQX9QRUdwedx5RX\nbaXmPxp7528+PfIT91y6Qgl5fKfuN3FIm638KqmgYD/ZZNTecaEuSdHml0wt\nbhYolojudrJWPEEierw4bvXHD+Rurew6Ri0huDdPfoLP1AXoRCOnO7qxADT7\nNdSs\r\n=AthU\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.18_1560006016604_0.2937783754449059"},"_hasShrinkwrap":false},"11.0.0-beta.19":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.19","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^2.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.1.1","assert-rejects":"^1.0.0","aws-sdk":"^2.437.0","coveralls":"^3.0.3","eslint":"^5.16.0","eslint-config-prettier":"^4.1.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.17.0","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^2.6.3","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --coverage ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier:check":"prettier --check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"8ba0fc71cbc9067fdb9d3f7817556faebbbcac0f","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n[![Coverage Status](https://img.shields.io/coveralls/github/nock/nock/beta.svg)][coverage]\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n[coverage]: https://coveralls.io/github/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Instead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nIn Nock 11.x it was possible to invoke `.reply()` with a status code and a\nfunction that returns an array containing a status code and body. (The status\ncode from the array would take precedence over the one passed directly to\nreply.) This is no longer allowed. In 12.x, either call `.reply()` with a\nstatus code and a function that returns the body, or call it with a single\nargument: a function that returns an array containing both the status code and\nbody.\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as the first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and response body (if available). The body will\nbe either a buffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'Content-Length': (req, res, body) => body.length,\n    ETag: () => `${Date.now()}`,\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': (req, res, body) => body.length,\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\nTo repeat this response for as long as nock is active, use [.persist()](#persist).\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you should omit the `body` argument from the method function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .post('/some_uri') // no body argument\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\nTo specify an exact number of times that nock should repeat the response, use [.times()](#repeat-response-n-times).\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.19","_npmVersion":"6.5.0","_nodeVersion":"10.16.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-SA5xto3+g4jZ7tu7WUMsMQIWkUXdeJ6krTSd1IfO6jPLv5OyvoNCqSP3nmLmkSHwKlMlVq8Zio6fUCRzd3ya/Q==","shasum":"7baf3cf8c5a38c0efaeed62935877b9531c55667","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.19.tgz","fileCount":46,"unpackedSize":190896,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc+9VICRA9TVsSAnZWagAAgsEP/ih1d+pKncFtVJp3rUkz\nHkUsvYsf/EX+qhD7fUWEfxrqExBs11ScDQF/8WJZ3hgT0jw/pEOMiLQlzExN\nbujkX5Si0DscasBoDREr1iczhIPvhkzEd5GVB160KN2Z9zjn9iP5JKVaRX/T\nhPzH4tI/sqwTMb3KGaZ9W6Sj5Q3a7QZJytOh0eh+WmW+tQeVub+NFw5CZo9k\nguTMDpvgiYtFoc15hXZgNvC/LWPVKGpOfkPSSFE2cAusmAvMqXBdp1S+FWb9\nB1jkUMtuF8YvNvK71uhsFu7BqA4Nr7qWPcvg2phF51NG3x6uXwc565lts7Ae\njOjx8guTUUQCAj7WU22ZCs53WNV582A4y3IjwEJkqDCuHOhL4kQPNqA9A60R\nvLq6+avh54uupbWDx78Z1tTCzDxtGrvNEt+6eHf9LrM+1tqJ+IKJhJKwff6Y\nf8UiRFtq6jm/NzhYdpUvQ337AFvFAhxOKEZAc/WBgNkuTfGLqdirvoNSySnT\nG0QE/dm715yBa5/9I6l3RHiJ4LrtWeqFKo5OKJID4hvWg7EMt2vazIHg28Wp\nioqK2pyEtdFUbnc5hxc3SMNkamhqvYVYQuNHnqpbi//t8o8k1v8bpkDKozLz\nqoDabbbrj8/dyV4DYMjNPniKg9uoCKE1UfrfWdbxsALRIrGk1idjs1NLQ+U7\n+4Gf\r\n=P8IX\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.19_1560008007936_0.48970339083578285"},"_hasShrinkwrap":false},"11.0.0-beta.20":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.20","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^2.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.1.1","assert-rejects":"^1.0.0","aws-sdk":"^2.437.0","coveralls":"^3.0.3","eslint":"^5.16.0","eslint-config-prettier":"^5.0.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.17.0","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^2.6.3","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --coverage ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier:check":"prettier --check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"659bf018977febc1f114f4425b77f99974cfe0be","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n[![Coverage Status](https://img.shields.io/coveralls/github/nock/nock/beta.svg)][coverage]\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n[coverage]: https://coveralls.io/github/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Instead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nIn Nock 11.x it was possible to invoke `.reply()` with a status code and a\nfunction that returns an array containing a status code and body. (The status\ncode from the array would take precedence over the one passed directly to\nreply.) This is no longer allowed. In 12.x, either call `.reply()` with a\nstatus code and a function that returns the body, or call it with a single\nargument: a function that returns an array containing both the status code and\nbody.\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as the first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and response body (if available). The body will\nbe either a buffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'Content-Length': (req, res, body) => body.length,\n    ETag: () => `${Date.now()}`,\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': (req, res, body) => body.length,\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\nTo repeat this response for as long as nock is active, use [.persist()](#persist).\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you should omit the `body` argument from the method function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .post('/some_uri') // no body argument\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\nTo specify an exact number of times that nock should repeat the response, use [.times()](#repeat-response-n-times).\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.20","_npmVersion":"6.5.0","_nodeVersion":"10.16.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-vZp0yVA793qXU6RmTOcOKqqzNWUEgaLizYwNyaq8p7wVHqlbcomIn3BlHIBzJMEF5z/JEvS9drPccoxct0kGMQ==","shasum":"1566512010e4c5c6adc2244f611b2023c008c587","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.20.tgz","fileCount":46,"unpackedSize":190560,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdC+HWCRA9TVsSAnZWagAARZgP/A4ZL0cK4G+suUIs480b\n11IeLeI7QesylFVu8+tl9GXqCQIp5kt5+QZnShRKjGm+dNhV7lz19GdTVGP2\nMCO5jkUfbSb0h0SVUuebL/JRRym6ASKEUV6QmDm4rzMQ+t6+Lzso6sIWhCtf\nH6S+rojCESFM38rfhYTh92bHUG1KyKh11sg2HtTiTzmI5J7RG3LtAxdZpNzq\nxhas0jRyFXiKN94pCg4tWhVuqxS0gKHLbOVYieZYF/IvyVIFTt6w/Bxdl/MP\nL9jwu5CJWg8IdXJO8eYZMg3i6A+kXTkpPvaWAi1S03WVY2nVTo8JLV6ySLzg\nmmvUN55t7wP4EvvWvVZ7qvDW+rrXFBxkQGKJVdPyj2dkDCHM8L87pJqJCPda\nD+GhH5k7qYbfN1LyvQTwv9MXmbs490bPPhQujSiKJcSP5qLcR69+NVNaumsr\nxHs/ptKVtZBNthxzsBO3UrMHPBTX6WPyTBvwzQcGnFet0D2eGTLh3c/UhKiz\naCqSbSqrrOeavztYjjAis2BOf0A0XxYXoheAvm2l58SbWnXco4tRhAvkRnqE\nagCdAht8Bcry9XAhrCplq0QSWsp464X3QZ9Sp/YlU0zVrlVzerPOkT9XlTYS\n0pyrfFPt8zJPOb7D7Uy6FDXsaQmTpdHPOdLanqWpUNIN6VVAbKiMzzI6UfWs\nAyap\r\n=uSOj\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.20_1561059797275_0.8432108497496187"},"_hasShrinkwrap":false},"11.0.0-beta.21":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.21","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^2.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.1.1","assert-rejects":"^1.0.0","aws-sdk":"^2.437.0","coveralls":"^3.0.3","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.17.0","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^2.6.3","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --coverage ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier:check":"prettier --check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"ad342220ada1fcf87e8c5989b08c6764745ea563","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n[![Coverage Status](https://img.shields.io/coveralls/github/nock/nock/beta.svg)][coverage]\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n[coverage]: https://coveralls.io/github/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Instead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nIn Nock 11.x it was possible to invoke `.reply()` with a status code and a\nfunction that returns an array containing a status code and body. (The status\ncode from the array would take precedence over the one passed directly to\nreply.) This is no longer allowed. In 12.x, either call `.reply()` with a\nstatus code and a function that returns the body, or call it with a single\nargument: a function that returns an array containing both the status code and\nbody.\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as the first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and response body (if available). The body will\nbe either a buffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'Content-Length': (req, res, body) => body.length,\n    ETag: () => `${Date.now()}`,\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': (req, res, body) => body.length,\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\nTo repeat this response for as long as nock is active, use [.persist()](#persist).\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you should omit the `body` argument from the method function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .post('/some_uri') // no body argument\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\nTo specify an exact number of times that nock should repeat the response, use [.times()](#repeat-response-n-times).\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.21","_npmVersion":"6.5.0","_nodeVersion":"10.16.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-t/gf913pdw34y4ZbkWsDXXd9ShtCRcScZTFLzd1LPcr/W6lUrGYQxtQ4zWwUnnLqcG2mejOaCP8tcckc7QsXEA==","shasum":"c02c66fb7d26cc49677d1252aeadb4791991e762","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.21.tgz","fileCount":46,"unpackedSize":190252,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdIixkCRA9TVsSAnZWagAARQYQAJotMOE2ac4kCwKQlHRp\nQVTY1+/EKyokSkicLrvpOt6VvhCYxrCB1NsU/eq9UM+4Eul+EciImgXuWvH9\n7bNEQpk7NOmiYhi7AXJa2QXXGiOaG0rKrl7DOtVjzR+DRjMmCgLn6YC3bTr2\nzNviiye0g8CgS/5h+C5p4pTmHXh0lAYe8nzqStov4q5/2JUV4Wzum4gt7YVq\nhmTEbSriYqLUYy8n8Qx6gtGmPJWs3wMjBNXUwRuE+Sp67+bWkfgWxujwotIo\n6QmHRLj5XKzllw3oyxDaCgyO32Zax9Jtdui6WWrlIPCBbNKyqBc19WK6AUpL\nOTKDLyAUOdUonTSbaRhIoruWEFYgwtxJm9BFxXs6CVdMMXTQlSPdnmfEvYSc\nMPwzeiXr7Rw0dMAqDmx8g0+0szsEzKAkBia+HSTMzfRPCLbE9MtrlKxFB4FT\nm1I4BrW4d1Gs5HR61alA6RNrayz0Lov+FscETTOtQ5Gktx0gfqRYu5uVKo+y\nM3ndNl86sIKN4FcNqoewEy5h0QTlxOl2BVNEObDofEwvCcfHhcoPE3Fs57Ff\n87KF1BnyueApv1gecEJMHbBJq/9T7tyDFD/3/dnsfeuGohFxU3FMWGWRERSt\nubu9oLfWrJrKEezhwy5qjrvrIc+zKnFy5Hi8MDRvWoxJSGFvsSVxsHXecMg8\nu6KK\r\n=NnF4\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.21_1562520676007_0.14296829713874848"},"_hasShrinkwrap":false},"11.0.0-beta.22":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.22","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^2.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.1.1","assert-rejects":"^1.0.0","aws-sdk":"^2.437.0","coveralls":"^3.0.3","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.18.2","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^2.6.3","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --coverage --coverage-report=text ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier:check":"prettier --check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"e3e6a65e796ad777e4d41feffbdae5ec41eebd81","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n[![Coverage Status](https://img.shields.io/coveralls/github/nock/nock/beta.svg)][coverage]\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n[coverage]: https://coveralls.io/github/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Instead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nIn Nock 11.x it was possible to invoke `.reply()` with a status code and a\nfunction that returns an array containing a status code and body. (The status\ncode from the array would take precedence over the one passed directly to\nreply.) This is no longer allowed. In 12.x, either call `.reply()` with a\nstatus code and a function that returns the body, or call it with a single\nargument: a function that returns an array containing both the status code and\nbody.\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as the first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and response body (if available). The body will\nbe either a buffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'Content-Length': (req, res, body) => body.length,\n    ETag: () => `${Date.now()}`,\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': (req, res, body) => body.length,\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\nTo repeat this response for as long as nock is active, use [.persist()](#persist).\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you should omit the `body` argument from the method function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .post('/some_uri') // no body argument\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\nTo specify an exact number of times that nock should repeat the response, use [.times()](#repeat-response-n-times).\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.22","_npmVersion":"6.5.0","_nodeVersion":"10.16.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-2b2QH8GSW2E9RXxMJL+bBmcKYHTA/fxumaBISi1x+i95NDzwA74JNHLFgfum9C3Tu00JtN9moVzZ5A8jDxVN4g==","shasum":"60b2b264a5c78893ea443bcddc9ccf4d5101dc85","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.22.tgz","fileCount":46,"unpackedSize":191882,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdJChdCRA9TVsSAnZWagAAe4IP/0neXbXqPBsoptH8wKSc\nW9yzPl4EL2yHFqoYJO+HLw4BG/wNuEfyYvzjCtyDL3hESjG8OIjxmFo5OhQ1\nD6wOI//QR60AyLSPfQaNvhKL6/UisOmihylB6DOPF5OvgaQXCzyen0TpFyuG\nBKWlwHp2sFAKmEzGdDdK6Etco30o9kc0rwD27YqXi/s6W8DvdQWryNL34Gd2\nBWUgeeKF0/yS6SOquEqlFLo2T3ooYAGmLimOSp/Q5yVgW1YOIsH/DnRt0JFV\n5sqcDnOBICiOfJeK5HFnp1736TPiAK3DvCQ+KpGQdY30Vygqz27jD6H6Tah8\nV90cmuTNLakip47F/mCTCLGN1N5d7oa/XSZA2r1sv+GSkXydtajYnGtoBisd\nHaC+RTM+ykYHHQmRkSEr/2HnszAhvCzuNirVRxWIApuEjkNs6+amAfR0Ph5A\nZykVUk/ifz7A36f2w91VKsA5Ma1Wi7fCV6KRx1+3vmKer9pDMFKbZojLS2/7\nhQ00J572ChP1Y9M/Y4eGvF3LCd3VmZibS/ovwSUktyPiu6ZLrTehdUzaENIZ\nn8mDLKcsBSx4bl45rn4wNMlKLVcuSc+qZEn1X7DdI/QzT0KWALsjjP2eyhYi\nTtZZe2RewmyGfNEyWhHcseqTdXJd1iXe6JR3+LUhgowjVX3N8kjOU0FTUlMc\nBWYU\r\n=sQ+V\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.22_1562650717232_0.7294950208949906"},"_hasShrinkwrap":false},"11.0.0-beta.23":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.23","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^2.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.1.1","assert-rejects":"^1.0.0","aws-sdk":"^2.437.0","coveralls":"^3.0.3","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^12.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.18.2","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^2.6.3","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --coverage --coverage-report=text ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier:check":"prettier --check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"a75f49f1353c0b56769fea996f4fc99d28b359fa","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n[![Coverage Status](https://img.shields.io/coveralls/github/nock/nock/beta.svg)][coverage]\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n[coverage]: https://coveralls.io/github/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Instead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nIn Nock 11.x it was possible to invoke `.reply()` with a status code and a\nfunction that returns an array containing a status code and body. (The status\ncode from the array would take precedence over the one passed directly to\nreply.) This is no longer allowed. In 12.x, either call `.reply()` with a\nstatus code and a function that returns the body, or call it with a single\nargument: a function that returns an array containing both the status code and\nbody.\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as the first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and response body (if available). The body will\nbe either a buffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'Content-Length': (req, res, body) => body.length,\n    ETag: () => `${Date.now()}`,\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': (req, res, body) => body.length,\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\nTo repeat this response for as long as nock is active, use [.persist()](#persist).\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you should omit the `body` argument from the method function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .post('/some_uri') // no body argument\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\nTo specify an exact number of times that nock should repeat the response, use [.times()](#repeat-response-n-times).\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.23","_npmVersion":"6.5.0","_nodeVersion":"10.16.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-D03++S4wWPxqM3XUXaHTvU9TrwjypaSrroVK1k7CT3w95i93js2TUwZ3KvR08pbmO23bG747RK4LVl7vEemteQ==","shasum":"e18d1d9b11e7444f8a4925331f5f4b6172b770e4","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.23.tgz","fileCount":46,"unpackedSize":191902,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdJMgwCRA9TVsSAnZWagAA5wgP/2KyPnLsRsvFbiQIVC9F\n7mwMn/uZxX8J8MBUkpS5nJOyC8vrrzB6mgnPqra7k9FLWkxIg1u9uo/0uyup\nwJSjcmENIjbR0TsiLHokrZgdR5CDPUBW2Z7BNk4jDwMU0kiRlEloVnKgYGCK\nRScjZM2Hil61xaPET/wh2BzW0KuLBiQWReiNceDYS4wrz7F+fyUMmx+7P06x\nz0QpJXWXEtM550SIvo8rqcIho0F4bi7Ub7UzTqR5PjSaWU3n+yn3BrhzBDdn\n28HoGv2dQDDfnS2xnldk4jXq87KROSyp4YDqE489vT2pz1+XbhSHg5C1ULBY\nlcAj4E6FbVQbdr3gzH0WTidgmVqVAh/aPTPac3hM7uonKIPB+8uFKhWViySb\nHQfMD+2OQkQPs0xthl8tLdyILEcWGEKGIdgeOBMVhBx9u/uk6fozebzkGJSf\n2lbzZUZyXA26+wOvFWE6dPP5g9bwMPOJQInlLcXCEJFnO1EXBYlj0liOCrER\nlt2bL5KDA/cpldqvkpbQEWiYAcg068OLqhCs8WJuD+irUmeJVUOupbK8xiQ0\nREqB/J07HHIMJPFZHLOR4TamAWlzeJIXFv0u0V1BFGMNiA5QeMwXUrt6saGd\nCTx21cxgRbVYZ3lg3pHogA9GwF6bOfk0GB+HvqV+vbc96vDyYKcb/9eoL5Hq\nD/HN\r\n=6cq2\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.23_1562691631700_0.8782411703590096"},"_hasShrinkwrap":false},"11.0.0-beta.24":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.24","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^2.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.1.1","assert-rejects":"^1.0.0","aws-sdk":"^2.437.0","coveralls":"^3.0.3","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^13.0.1","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.18.2","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^2.6.3","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --coverage --coverage-report=text ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier:check":"prettier --check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"2c4edba933c996003c565f04ab8ce53c5df023aa","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n[![Coverage Status](https://img.shields.io/coveralls/github/nock/nock/beta.svg)][coverage]\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n[coverage]: https://coveralls.io/github/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Instead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nIn Nock 11.x it was possible to invoke `.reply()` with a status code and a\nfunction that returns an array containing a status code and body. (The status\ncode from the array would take precedence over the one passed directly to\nreply.) This is no longer allowed. In 12.x, either call `.reply()` with a\nstatus code and a function that returns the body, or call it with a single\nargument: a function that returns an array containing both the status code and\nbody.\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as the first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and response body (if available). The body will\nbe either a buffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'Content-Length': (req, res, body) => body.length,\n    ETag: () => `${Date.now()}`,\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': (req, res, body) => body.length,\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\nTo repeat this response for as long as nock is active, use [.persist()](#persist).\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you should omit the `body` argument from the method function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .post('/some_uri') // no body argument\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\nTo specify an exact number of times that nock should repeat the response, use [.times()](#repeat-response-n-times).\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.24","_npmVersion":"6.5.0","_nodeVersion":"10.16.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-upcZWT+jQ3gZGYgn3uW+zA0OjfPemHU+l4quyZvwvjKd6UxB7fUQJmrTF6qNvO+MmZtq5QSjfqCHyHQz9oj0rw==","shasum":"cb6b8a06c08be4b8238df932b4c52aa0911e35dc","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.24.tgz","fileCount":46,"unpackedSize":190056,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdK9taCRA9TVsSAnZWagAA+YMP/10QzfqujlAsi0WiKCsv\nocpLE4aTo/5z72Bqbbc2RuQ3vD0wt1rTSwK5nz+xJkbniG/EZGass61Maa7V\nUKR2Wr5MFnqj0LDL9AFDPKEqvt1/ngJfPQpgn3+XmkPb68EzP/hgHIHLmyfI\ngooWB0q75AmyjyrGVzQnIJgLxKHyJsofM7KP0qbpWOmJ26IWDok5w6LSuVae\n3B5eZMcfu3HERi4oHP1NBBw/RY8BGh1AvErerTbxaVPB0fVKyGKhHuhn/nh5\nm5eVsANT7IueP1NEPoPVbixevtRGLXv94h/v6YH/1hD9kB2o2H1EKgf1OdFU\nrEma5F86LdMnlPoH6d4dM8zcbY2W+wXDubU+8fK2AyTn9D089ticrM+6W/FY\nrIaQ+YoH7Q6kvVxl07wbId3gqFL9SRvco5CYtcfK9VBFpPJLYRf/05f3MfnA\n+aWk1jFCDlRGVXvyiGwsQcj8X/t2atsoTCWRJ/+98myQZBnuCHRAWeuesbK2\nS0MqNmDBcCKBI7J9KVYZMd5QDIbp9Mivx123P5o3DaH92oN0lJ87g3jf2yjE\n4WdpL8OovO/bzi79QgPXB4CXpGLNqeOb1q9X1VvS/BNG1a5JSfjD2MAWkW+0\nXpCaafDnrtE1ePaT2elqDiD1+JVhgYWJC2EElUfOsvU0oT7WRTebCBwlnRcj\npJd7\r\n=Xi3r\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.24_1563155289810_0.8369864626197667"},"_hasShrinkwrap":false},"11.0.0-beta.25":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.25","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^2.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.1.1","assert-rejects":"^1.0.0","aws-sdk":"^2.437.0","coveralls":"^3.0.3","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^13.0.1","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.18.2","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^2.6.3","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --coverage --coverage-report=text ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier:check":"prettier --check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"f8d6cbbe147266bca1654dd72f475e39f544600c","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n[![Coverage Status](https://img.shields.io/coveralls/github/nock/nock/beta.svg)][coverage]\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n[coverage]: https://coveralls.io/github/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Search parameters can be included as part of the path:\n\n```js\nnock('http://example.com')\n  .get('/users?foo=bar')\n  .reply(200)\n```\n\nInstead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA `URLSearchParams` instance can be provided.\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' })\n\nnock('http://example.com')\n  .get('/')\n  .query(params)\n  .reply(200)\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nIn Nock 11.x it was possible to invoke `.reply()` with a status code and a\nfunction that returns an array containing a status code and body. (The status\ncode from the array would take precedence over the one passed directly to\nreply.) This is no longer allowed. In 12.x, either call `.reply()` with a\nstatus code and a function that returns the body, or call it with a single\nargument: a function that returns an array containing both the status code and\nbody.\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as the first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and response body (if available). The body will\nbe either a buffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'Content-Length': (req, res, body) => body.length,\n    ETag: () => `${Date.now()}`,\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': (req, res, body) => body.length,\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\nTo repeat this response for as long as nock is active, use [.persist()](#persist).\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you should omit the `body` argument from the method function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .post('/some_uri') // no body argument\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\nTo specify an exact number of times that nock should repeat the response, use [.times()](#repeat-response-n-times).\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.25","_npmVersion":"6.5.0","_nodeVersion":"10.16.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-k5IHvKfPlUd5dvjBKu3lnib2793s/vgfG8uhHvD/O8ycZnSuVSfyLy4lbYjg+xeC6CzCq0uPW10wOV+CThW/dg==","shasum":"af238864e70ced7b274a135d40fba742abfff7b0","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.25.tgz","fileCount":46,"unpackedSize":191157,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdLJXcCRA9TVsSAnZWagAAMxAP/2eFlwdL3oU35htnufpK\n0dDkABd466TZO0kH4IL1dfRTU7KBH2jrjf4VX18ExeWqYjB0Fa0p4qOa0+0R\n7R5hfTZOoAnEV+So+GCAUnJ+7n8s45rFuDYmNqrcClUr6Ib6tp1ht7LoveZN\n/einpB+RHqa6H9nnvAoDpSEM7l1TKyoqS+ii9jeUWZGX3TLeFknPOLthsrD7\ntLJm+PBDAcf6Rcnm0ZyMjnzwGAN5m3GyHNzM5MDJOp/xE1PPBx8jb0feSpHm\nOXy+M0mFp1BDMrGvNaCBkExqS9IzJ5rgTvR2ejI7P75dBq4f+lMoFrbBFben\nAGMYOU685CboT7n9NVqotZ5Xv0LVyERMz837jQlHsMUIEexdcydqhqcYg0tK\n1U8pFvWqqFIV//rIZ8Y6KLS2VDmRLCC+9SPZ7as7m14GkI9gB2nULbI0k1/S\nB9uvOVvYpQr+WAaqzInUjbA3RAkQEBobnU85PaKDRFrj+zlABGMKOdkhr8uS\nTRax9IzGK9ImiHvekU+Ba3P18Ng6qcHQja7CBKlMH/26ozXba87trt0ny3HN\nfnqgZOczbelTuXxBPXyLcPVIeR/Y5Zu4IWCkf9/dmr0oKr1LI7NnEFpZbu5M\nnPIa294RSUdP57P2hlcIo+9nnhBxvpkWaw7u3G0raC78TyDSNO6/fOpj0HdT\nUDJI\r\n=NYhw\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.25_1563203035994_0.015216467627958696"},"_hasShrinkwrap":false},"11.0.0-beta.26":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.26","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.5","mkdirp":"^0.5.0","propagate":"^2.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.1.1","assert-rejects":"^1.0.0","aws-sdk":"^2.437.0","coveralls":"^3.0.3","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^13.0.1","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.18.2","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^2.6.3","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --coverage --coverage-report=text ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier:check":"prettier --check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"a2208d1c59ddfdc35392c8581b280691c5b0dcc5","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n[![Coverage Status](https://img.shields.io/coveralls/github/nock/nock/beta.svg)][coverage]\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n[coverage]: https://coveralls.io/github/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Search parameters can be included as part of the path:\n\n```js\nnock('http://example.com')\n  .get('/users?foo=bar')\n  .reply(200)\n```\n\nInstead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA `URLSearchParams` instance can be provided.\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' })\n\nnock('http://example.com')\n  .get('/')\n  .query(params)\n  .reply(200)\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nIn Nock 11.x it was possible to invoke `.reply()` with a status code and a\nfunction that returns an array containing a status code and body. (The status\ncode from the array would take precedence over the one passed directly to\nreply.) This is no longer allowed. In 12.x, either call `.reply()` with a\nstatus code and a function that returns the body, or call it with a single\nargument: a function that returns an array containing both the status code and\nbody.\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as the first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and response body (if available). The body will\nbe either a buffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'Content-Length': (req, res, body) => body.length,\n    ETag: () => `${Date.now()}`,\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': (req, res, body) => body.length,\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\nTo repeat this response for as long as nock is active, use [.persist()](#persist).\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you should omit the `body` argument from the method function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .post('/some_uri') // no body argument\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\nTo specify an exact number of times that nock should repeat the response, use [.times()](#repeat-response-n-times).\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.26","_npmVersion":"6.5.0","_nodeVersion":"10.16.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-0nwr5RrkQh9CblGk/9NCihmh+mbCUSDwMss+v/RgpHafM3/Eo3UQZe+Z8vrDfjcf1Lv8/4OFdgfpl2qhufAI7g==","shasum":"70c39409262da020ae9ec9218d7fd37782bd097f","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.26.tgz","fileCount":46,"unpackedSize":191093,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdLP1ZCRA9TVsSAnZWagAADzwP/jpCre7S358v+7NPzreB\nESNaV+WcDZIdobfdmqnkU4MCXH5962yQ+iALb8aSicvqGPnqB/8wUk1CLCX6\npFODFaSTT5WMq/VVPCEQGEFu085QlWenff/8VJfjbcwLQsKzwJmXUO9MHZdG\nLAt4u0jQNfJdVuaHhP1qvOiTXINZGsqiohucwDDznKtYCqpg8EDl1A9X/Mpi\n9nkG2sRXWG2u/ACBOIsK6L065V2t+l6B1F6/BBjWxHTf0QgL4sEX8NKplcWi\n5MjvY5dnNrQ+lsyuUU0Sr10RkicFBzKKCHdzhyq56BKPX3oc7wvoQ85dCmgG\nz/fSV0gBQ2KmsR9zRK1y/Z1Cq1YpfhSodmc/JIH4XMofoUSj42PH/sEd8B9E\nVXYSG2cA/ya6oPO5yAwX8q8O3gFEsCmtjhsM7OypZHyo6TJo0FRR1JblliMP\nMiv4irQL2NRThUKQ1MLaC+0BhmDEIMQAfZ1vwvhmzH/GSzrCrNmZoSUQ/JOL\nR68N5lOGoSdSJsUhJ47Y5bcEQvWjcwfuqgYaS07xBMpq/iGIR+ZNO3Anq5Vv\nmnLW1GwiXuYX6rqjSfbug+PxMi1vEv7IopThs1OOo5PXJ8oYzId71PG6ye/g\n1Jz3upYa6qTepl1UE18ohhoTLZyvFokyoQFxgzCC8TqH0ehJGXcpEhaFejPn\nF6Kw\r\n=mtVG\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.26_1563229528079_0.19826593551287197"},"_hasShrinkwrap":false},"11.0.0-beta.27":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.27","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^0.5.0","propagate":"^2.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.1.1","assert-rejects":"^1.0.0","aws-sdk":"^2.437.0","coveralls":"^3.0.3","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^13.0.1","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.18.2","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^2.6.3","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --coverage --coverage-report=text ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","coverage:upload":"tap --coverage-report=text-lcov | coveralls","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier:check":"prettier --check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"2a54482c29946c30ab7654dca5fde27917808ad8","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n[![Coverage Status](https://img.shields.io/coveralls/github/nock/nock/beta.svg)][coverage]\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n[coverage]: https://coveralls.io/github/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Search parameters can be included as part of the path:\n\n```js\nnock('http://example.com')\n  .get('/users?foo=bar')\n  .reply(200)\n```\n\nInstead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA `URLSearchParams` instance can be provided.\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' })\n\nnock('http://example.com')\n  .get('/')\n  .query(params)\n  .reply(200)\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nIn Nock 11.x it was possible to invoke `.reply()` with a status code and a\nfunction that returns an array containing a status code and body. (The status\ncode from the array would take precedence over the one passed directly to\nreply.) This is no longer allowed. In 12.x, either call `.reply()` with a\nstatus code and a function that returns the body, or call it with a single\nargument: a function that returns an array containing both the status code and\nbody.\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as the first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and response body (if available). The body will\nbe either a buffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'Content-Length': (req, res, body) => body.length,\n    ETag: () => `${Date.now()}`,\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': (req, res, body) => body.length,\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\nTo repeat this response for as long as nock is active, use [.persist()](#persist).\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you should omit the `body` argument from the method function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .post('/some_uri') // no body argument\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\nTo specify an exact number of times that nock should repeat the response, use [.times()](#repeat-response-n-times).\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.27","_npmVersion":"6.5.0","_nodeVersion":"10.16.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-zhKQHORiqlwew8Bufthfil1kYzSeCthDvDSBb8mePllftt72jmmpW5vxxJyiYlxOINx9+AJ5EkCps7XVl7O1KQ==","shasum":"5e7dca8b74c794db1e7dafed7dfe1a97189c2420","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.27.tgz","fileCount":46,"unpackedSize":191324,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdLjL0CRA9TVsSAnZWagAApekP/101Dln0MdKnHVB8vXvW\n2ZKlrzIkp/UKY2NsC9Sdkgkqbv6RYHby+4Aa0ZLuzz4mHjVJAjdELSIMx8dX\n8k8dl2q31bzkziCF5+FLg8N4SUaVgMw1JMh4p+Ysqil6Dn7mSf+EKmReRjMB\nVLOIXuMOmvdiypc/VotHShZ03evjmN0EKuRhLfOiLHr0k0O3JrTTq3TxFsZa\nj5gw53gcekbA9HgZixJwqN5XOvmnEQ0D5ZGu5DHYXeSc4JArM4PaaV8sX+x5\npdXbR4gsdqnA/3dpVy/5HEy2w7j9DmKPT+pNdqgZNd0RdF9lCoODy/DfE7Zj\nmo79pN/W8hc/RrT3ddaKhnfbOWDufvIr/3sCi4laC8IP/G+hbGK7MvC6GsSs\nWByLWEnPPvua9aTeJuDcCblFy5+Lqv2i3SoQocTvNDDQMpcQYZqkhh94lBFK\nKYNIwiBrJFX96kBuIDotCLs8IsC38v+lOMCjvoqZYZl3hG2/bkN85dBU69m0\n5oqifrqjIChwF8gq01Ug0HVkeo1MisqB/TgfvZXbEJ4Tqi70U/uD0oeLqV/b\nudGDwT8wt6E+XFvoJ6XODxvCfiHEf1evi0QAe4ouKCEVN2yWl7HTjKfLn+Wn\niLFCER3cP9gJYe4VZ4Hm+lkVDjM/QAKdrv6NvhDIE59O81wP4UFwEVkn7kCM\nMcW4\r\n=2CCd\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.27_1563308788097_0.7377691937353177"},"_hasShrinkwrap":false},"11.0.0-beta.28":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.28","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^0.5.0","propagate":"^2.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.1.1","assert-rejects":"^1.0.0","aws-sdk":"^2.437.0","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^13.0.1","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.18.2","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^2.6.3","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --100 --coverage --coverage-report=text ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier:check":"prettier --check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"4a4b8eccbf396f478d37ecd21fbf930baee14083","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n![Coverage Status](http://img.shields.io/badge/coverage-100%25-brightgreen.svg)\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Search parameters can be included as part of the path:\n\n```js\nnock('http://example.com')\n  .get('/users?foo=bar')\n  .reply(200)\n```\n\nInstead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA `URLSearchParams` instance can be provided.\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' })\n\nnock('http://example.com')\n  .get('/')\n  .query(params)\n  .reply(200)\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nIn Nock 11.x it was possible to invoke `.reply()` with a status code and a\nfunction that returns an array containing a status code and body. (The status\ncode from the array would take precedence over the one passed directly to\nreply.) This is no longer allowed. In 12.x, either call `.reply()` with a\nstatus code and a function that returns the body, or call it with a single\nargument: a function that returns an array containing both the status code and\nbody.\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as the first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and response body (if available). The body will\nbe either a buffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'Content-Length': (req, res, body) => body.length,\n    ETag: () => `${Date.now()}`,\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': (req, res, body) => body.length,\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\nTo repeat this response for as long as nock is active, use [.persist()](#persist).\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you should omit the `body` argument from the method function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .post('/some_uri') // no body argument\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\nTo specify an exact number of times that nock should repeat the response, use [.times()](#repeat-response-n-times).\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.28","_npmVersion":"6.5.0","_nodeVersion":"10.16.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-gEipjcIY8PnC4B2RuKQNn1wndLgWlz2yExU+z3fVOV6Nq3PBWArTdNI3m4qF0pyv1XKkJDJA0vvQui4EpyQJcg==","shasum":"ea5371dbdd9c525b11af2100c4ff7b95557dfe58","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.28.tgz","fileCount":46,"unpackedSize":190213,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdNcBHCRA9TVsSAnZWagAAkA8QAJb9cM02YskFuBJTIOYz\nro5Ysyw4E0zQul511HODHZFMizp1ot4ne4z2H+uW/My401sDVlmrc2o7tugG\nNSuD7ylrQjQ1Y4DYIS4ax569qahnyuz1eICxf/lLsxa8/soTImv5d0TQPmvg\nGaPHZMV7ejz2HsQornGsgpgfyLYBw6X9ThSHfukvRhfSQpYrbToytnEzwZz0\np8L2pYBGgsIxIDdPUlO71jwlqcgXr1KzLforXnQNDockTmCQ9LFRtFO6tgSv\nZMOZcSDed6I6A+xwQWknN8KZfVOyxedn7YTVsW1uBMfVgqQ4Cjvlq/v7g2yv\npeu+aShjGaHtIBpvMtOyD7op/IXi6ompB5ZJ3aLgjQX1SyhF6q1AY3HnoU/s\nt/45qqqPS+z70ELApoiqSyTqxntVDuGFH2aIYvQULUsLht/EwDvPPPitl7hC\nKJWvhF0spGNrSmyJ8sZaG3UPUPIx3HNU1ZVbVZLn/PvGWewDu+WZdjUSFCwv\njoklEmUsaTkgwB38MuLYNf15W7xOhu7sgxcwLusmEwDwiC6p7b4p3PWX29qm\nqP1ZeEF3wY44Z4uSP0Yox6u/v3jGfGYbqrKNoCY+tRSb8yTdEcR5jdnkW9vy\nqy8jzt4dXQ0lkJXSVWmEmr1APJBtYisJVQwpoPJEpkLFUqZJkUqugp8QZvmN\n1CxL\r\n=o8C4\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.28_1563803718741_0.3982578481155892"},"_hasShrinkwrap":false},"11.0.0-beta.29":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.29","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","deep-equal":"^1.0.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^0.5.0","propagate":"^2.0.0","qs":"^6.5.1"},"devDependencies":{"acorn":"^6.1.1","assert-rejects":"^1.0.0","aws-sdk":"^2.437.0","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^13.0.1","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.18.2","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^2.6.3","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --100 --coverage --coverage-report=text ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier:check":"prettier --check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"88e85ac3a552b7433865e5868dbf27d0cdd5bb76","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n![Coverage Status](http://img.shields.io/badge/coverage-100%25-brightgreen.svg)\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Search parameters can be included as part of the path:\n\n```js\nnock('http://example.com')\n  .get('/users?foo=bar')\n  .reply(200)\n```\n\nInstead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA `URLSearchParams` instance can be provided.\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' })\n\nnock('http://example.com')\n  .get('/')\n  .query(params)\n  .reply(200)\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nIn Nock 11.x it was possible to invoke `.reply()` with a status code and a\nfunction that returns an array containing a status code and body. (The status\ncode from the array would take precedence over the one passed directly to\nreply.) This is no longer allowed. In 12.x, either call `.reply()` with a\nstatus code and a function that returns the body, or call it with a single\nargument: a function that returns an array containing both the status code and\nbody.\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as the first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and response body (if available). The body will\nbe either a buffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'Content-Length': (req, res, body) => body.length,\n    ETag: () => `${Date.now()}`,\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': (req, res, body) => body.length,\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\nTo repeat this response for as long as nock is active, use [.persist()](#persist).\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you should omit the `body` argument from the method function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .post('/some_uri') // no body argument\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\nTo specify an exact number of times that nock should repeat the response, use [.times()](#repeat-response-n-times).\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.29","_npmVersion":"6.5.0","_nodeVersion":"10.16.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-WKHPedqlMqARmdy3nTGQ8/su4gxMrk4gPVJLGjQmDJMdVIq/9gulO1xeAaT3nYI8Ntl4qP0rSGnKng8JFnWvUQ==","shasum":"9039222e48817eb43e48b2af2284eef4fb08dffe","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.29.tgz","fileCount":46,"unpackedSize":189867,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdOgD7CRA9TVsSAnZWagAALjUP/3PNpwJvM9v7igwFm3CZ\ndSdqx0oGJS0YEU+8lUs4ff34Z8RTar2znI2rpzpXAkF+l3IALywoNYH0FBju\nmX4nCAglJCUv8s3YicgFty+kTjbbbts8PmRxmMLmkLmsyK/ujKqjK5SjmQIf\nD7sJQ+uYljLWMvgd3nuC6ivSRrEu9/NUFfINwjsdiybi0jLxI/hTc0rLaMpc\nFDiySXY1JLarkGnrhZJFSNpEmMp3EvZhDDZLVEaGfEFRh6Z0uH5sDLSRGlyP\nt3O7/9ERuwaZQgIDHs2o0eScrTafQ9iIGYfCxeKZbvDwZTjbpJ4qUdwSFucL\nNqrfjYmm+eunbKGmsLEYa57sEM4AikVHqn7PPhTRP4d2NZmLNFPfqpwSVT6w\noIIusNAor2eHR0gl4D7UPjgMr5wUspRHo+hZNItrspb3oLEGWxO9GmNG+t/S\nTqHzAFahrbTFHbOp7f7jp408kcvbQuLx2P4XRvALQnkRjAQxSuKCKpjWeNgO\nQonHxZ60n8Wf4V6BzgrMUFoXlP8GEZl2/jhxkwd8IbBAmXVyvq8zx2Wzvc23\nBTIho/Xk58VE94ClGUCRIsSRkT9YFJ5K9IpRAJ5e0J0KF+6Hc41BzvNM7k5y\nO5mNHd6dw+BdZaAAJhr1ESqB7TUVv/qYIZAt05AWMKMdcHVmCWNH8JK9kR3I\nwuOU\r\n=cIhR\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.29_1564082426403_0.8816172929728043"},"_hasShrinkwrap":false},"11.0.0-beta.30":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.30","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^0.5.0","propagate":"^2.0.0"},"devDependencies":{"acorn":"^6.1.1","assert-rejects":"^1.0.0","aws-sdk":"^2.437.0","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^13.0.1","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.18.2","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^2.6.3","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --100 --coverage --coverage-report=text ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier:check":"prettier --check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"35221cefab2808b66bd57f69b16e865c69fc267c","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n![Coverage Status](http://img.shields.io/badge/coverage-100%25-brightgreen.svg)\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Search parameters can be included as part of the path:\n\n```js\nnock('http://example.com')\n  .get('/users?foo=bar')\n  .reply(200)\n```\n\nInstead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA `URLSearchParams` instance can be provided.\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' })\n\nnock('http://example.com')\n  .get('/')\n  .query(params)\n  .reply(200)\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nIn Nock 11.x it was possible to invoke `.reply()` with a status code and a\nfunction that returns an array containing a status code and body. (The status\ncode from the array would take precedence over the one passed directly to\nreply.) This is no longer allowed. In 12.x, either call `.reply()` with a\nstatus code and a function that returns the body, or call it with a single\nargument: a function that returns an array containing both the status code and\nbody.\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\n> Note: When using a callback, if you call back with an error as the first argument, that error will be sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and response body (if available). The body will\nbe either a buffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'Content-Length': (req, res, body) => body.length,\n    ETag: () => `${Date.now()}`,\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': (req, res, body) => body.length,\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\nTo repeat this response for as long as nock is active, use [.persist()](#persist).\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you should omit the `body` argument from the method function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .post('/some_uri') // no body argument\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\nTo specify an exact number of times that nock should repeat the response, use [.times()](#repeat-response-n-times).\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.30","_npmVersion":"6.5.0","_nodeVersion":"10.16.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-B07PXT0Qzch87mym1ZmFb+2zl/jY24WD+a87Uip9nXbm7M0hIovvEpzSHnTXBZ1auwTLGtxhulkMH63EJQCTCw==","shasum":"a4893cf7cc2e3b10dfc26baa4eef944d1a54c074","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.30.tgz","fileCount":46,"unpackedSize":189601,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdPdkmCRA9TVsSAnZWagAAKksQAJff54yJig4XUxotsWxf\nRuQl4smtNWO0w0qO2jEQnVESaEH5uJlae5PvDmatHgU7lF9U+Gh1F4FQ2+E2\nvfoJzh/OcSx7dLC91mR7tKskeqo8uZX51cQzRd2lMWG9HcsyIFMUH7nOOjwl\nfox5dnYsV/q386wYMizUVTDpcb3Ndi8lJFUWEf1Y/neqorDPQJusSLyOKvbY\nSRYAbpG12owaOu5jUqokv9K1wp833VbvHskExI6odz4isRUjGjG31J+/DbVM\nC7BaJaT9Ov91VGX/dh9CKKaEnmOeO/+4GJ+1shxPQ1VW85JjVz2Ewf5Ns3Z0\nCBmXYhUNjN8nFDPspmZjNme+Zns0StO0mRROGgYb1m3cQbV1FxZFOmH2H1/x\nQ4Q6f3ByLR99+litYsgRG881Rv6rw+PL1GlfSUVGAxk98WDp6RqcmRIuZbrY\nrdYDtXoKs8Hg48dPka/KRJ9UblaX2AgdQ4DjCtH4w7ZgPDskJkGM4lX+ytgw\nB71FTLXCeeNB8nQ68UKjQbs97gYH4PgmTp7q5b+9lg2B0VnQoKtN3qcAyO1C\nB6UJZ4oPDsqsKu3zrVsZMOWSUc5YGGEqTmqXlcislM19o7/01nz8AucrpkDZ\nySzTNNyFscNE5Acw8vlNL6iFIxTAxxi6kuDDDy6avYKIByvwu7prsCB0N+PF\nyyU/\r\n=cpG9\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.30_1564334373805_0.7540307418782481"},"_hasShrinkwrap":false},"11.0.0-beta.31":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0-beta.31","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^0.5.0","propagate":"^2.0.0"},"devDependencies":{"acorn":"^6.1.1","assert-rejects":"^1.0.0","aws-sdk":"^2.437.0","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^13.0.1","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.18.2","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^2.6.3","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --100 --coverage --coverage-report=text ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier:check":"prettier --check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"26fc08fcd331a8903f5c8966127c5a4ebe9c2c8f","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n![Coverage Status](http://img.shields.io/badge/coverage-100%25-brightgreen.svg)\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Search parameters can be included as part of the path:\n\n```js\nnock('http://example.com')\n  .get('/users?foo=bar')\n  .reply(200)\n```\n\nInstead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA `URLSearchParams` instance can be provided.\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' })\n\nnock('http://example.com')\n  .get('/')\n  .query(params)\n  .reply(200)\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nIn Nock 11.x it was possible to invoke `.reply()` with a status code and a\nfunction that returns an array containing a status code and body. (The status\ncode from the array would take precedence over the one passed directly to\nreply.) This is no longer allowed. In 12.x, either call `.reply()` with a\nstatus code and a function that returns the body, or call it with a single\nargument: a function that returns an array containing both the status code and\nbody.\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\nIn Nock 11 and later, if an error is passed to the callback, Nock will rethrow it as a programmer error.\nIn Nock 10 and earlier, the error was sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and response body (if available). The body will\nbe either a buffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'Content-Length': (req, res, body) => body.length,\n    ETag: () => `${Date.now()}`,\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': (req, res, body) => body.length,\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\nTo repeat this response for as long as nock is active, use [.persist()](#persist).\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you should omit the `body` argument from the method function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .post('/some_uri') // no body argument\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting a persistent nock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\nTo specify an exact number of times that nock should repeat the response, use [.times()](#repeat-response-n-times).\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0-beta.31","_npmVersion":"6.5.0","_nodeVersion":"10.16.1","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-/O6hUiBQod3dc2D+Gl9mnbIzoNsnPEbZzHygD4t7BsMY1nFGWIniL1gFJVR0UAGkoY7sJEDGUFeMnpcafevLaw==","shasum":"ba8735549942f0cba6b3cb8e3b024a3728ec8d5a","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0-beta.31.tgz","fileCount":46,"unpackedSize":189256,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdQ0NmCRA9TVsSAnZWagAAM7gP/0yAAE0bCTcZ+mVdxHEU\nQYET0bcFj/1ea5hThlXxFJZSL+esSMtTDxEcxyrm1wKXkXC5EkfGA++tjpgX\nFDXiP9m14p5wnJ0VOpKaPASANaDF8pSO/K8NpJjp/IMwqsI0pghNyHSdarYA\nvSd2c4Kh9q5XEVM7DovlpckczKNtn8gGSqMfX81Q/23urO6JpgPQqJ0PQVpr\nTf6NvmHOWN9Na/zTUEDl9TbJ9swGvRPBx2pLXeHluPmdeJVA+0IAlu7/89dn\nqd9SaCqMom4aALWpeiB4NMeWKhXpSAy8wwri6JQYIw+p7pljVY9YFh0oa6Ab\ndmW++mUf+Gg/YDEDhLp0HwVfow/yJkvHvW2yrsDB2k07tnMgPXItXKSbD1PN\nfp/sTd47k7ifJFAqyzwLAWmw8RAyfFAAdoQBI+IXx/DCY2HnqLmSmsA+Yjr/\nwcd9sdgHZPgYpQUZTEzmRUlPcsm+kB+QOwC66lFujLwjwrK9jcpknd8Tv2Ec\nZwvQVTbTD7qjR/qvennPKA6/15ZYNMo8dbp58AyuMBY3lZii3dWrT1SnY53N\ncy5yov8hVjNasEGnGpq/2Z7ESB+Kw3qYXcaf3OxNiOqpVGy5fSy6pgGjYTJQ\njnRx5qXN5QSptj/M6lNQgrdh0OH3ecHwge1mif0QZIGyn8+trHCsnWT1bOdP\nmW0V\r\n=TQhy\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0-beta.31_1564689253804_0.8826289842695709"},"_hasShrinkwrap":false},"11.0.0":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.0.0","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^0.5.0","propagate":"^2.0.0"},"devDependencies":{"acorn":"^6.1.1","assert-rejects":"^1.0.0","aws-sdk":"^2.437.0","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^13.0.1","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.18.2","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^2.6.3","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --100 --coverage --coverage-report=text ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier:check":"prettier --check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"11dba990de94629189dca1030669f2d6d8d409f9","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n![Coverage Status](http://img.shields.io/badge/coverage-100%25-brightgreen.svg)\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Search parameters can be included as part of the path:\n\n```js\nnock('http://example.com')\n  .get('/users?foo=bar')\n  .reply(200)\n```\n\nInstead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA `URLSearchParams` instance can be provided.\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' })\n\nnock('http://example.com')\n  .get('/')\n  .query(params)\n  .reply(200)\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nIn Nock 11.x it was possible to invoke `.reply()` with a status code and a\nfunction that returns an array containing a status code and body. (The status\ncode from the array would take precedence over the one passed directly to\nreply.) This is no longer allowed. In 12.x, either call `.reply()` with a\nstatus code and a function that returns the body, or call it with a single\nargument: a function that returns an array containing both the status code and\nbody.\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\nIn Nock 11 and later, if an error is passed to the callback, Nock will rethrow it as a programmer error.\nIn Nock 10 and earlier, the error was sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and response body (if available). The body will\nbe either a buffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'Content-Length': (req, res, body) => body.length,\n    ETag: () => `${Date.now()}`,\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': (req, res, body) => body.length,\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\nTo repeat this response for as long as nock is active, use [.persist()](#persist).\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you should omit the `body` argument from the method function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .post('/some_uri') // no body argument\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting an individual persisted mock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\nYou can also use `nock.cleanAll()` which removes all mocks, including persistent mocks.\n\nTo specify an exact number of times that nock should repeat the response, use [.times()](#repeat-response-n-times).\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.0.0","_npmVersion":"6.5.0","_nodeVersion":"10.16.2","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-lrlqTP3Ii8pT/j86F6tR2kRPUPA/aMWQ8TADzvLLDsZtqXlPdasKbg4G86bsnXUfM5yMlDIs9gIe/i7ZtPmCoA==","shasum":"ad13e1bcea890d8942cfacc5d0aff5e0ef9a6331","tarball":"https://registry.npmjs.org/nock/-/nock-11.0.0.tgz","fileCount":46,"unpackedSize":189375,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdUfoGCRA9TVsSAnZWagAAKZEP/RYGNpPMApxu2F8WHqpQ\n0iyN0pOgwlHDy+UZqAStahPzeeCNRYK49zTwhXlA533DdflgxqjAiN2l2csE\npfo/moniUGQRHV7iiE0dQqpqbEhxxXGdnYNxzKYKulgwNDhbD4oUYBMRIZQk\nuk8k/ToUmF8KOR01nGYN6A4kAAg7wAmBakU2ebgkmvPezHwH56NvBULWZE4Z\nqlXWZdTQF5V5HwkeshsEUgsBD/BWt0IbmYLSVrsoDIOXgUzwAvkM8c17nocu\nXXx/VGuTBjaUYuavTRAwrJue/Al+uv1eTqFqocZoOhiz/qr3Ym8fGH/za4bj\n/6IJ/ejgX72lhvOQM4+VzI6LwOliPXRlLZUFlTMtfZDCfjjC3W2DJ5PnwwOf\nCc4PiNlknzIotjzYmo2vy5e58YsxfDqk+D3TZWP2iLV5R3Z6lYJoqEQJpyOr\nZNXIfnFrBfrXta5LUkPmH6IsdLCJG0TvihWaKgQAJ6f0HmxyGMr9J8bcmaMu\nUcXcd7Q29ceeoqPjawQ6N4iEXrT97x6762rmWaDiQZA+vy57y65pVuqfSeZF\nKVwGUpomFFzYck86AdLfbmNK9KlkZlRjQkZoiXZQ1JVYQenzrCxw1gmju06W\ndCFLK7KEepw3DsZ9mRr1Ihde0GJsA/Rc58m/8DVdHouYpi7p3W1DrBDRYqK2\nLnFv\r\n=WQ+s\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.0.0_1565653509556_0.6423979920693621"},"_hasShrinkwrap":false},"11.1.0":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.1.0","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","types":"types","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^0.5.0","propagate":"^2.0.0"},"devDependencies":{"assert-rejects":"^1.0.0","aws-sdk":"^2.437.0","dtslint":"^0.9.1","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^13.0.1","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.18.2","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^3.0.0","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --100 --coverage --coverage-report=text ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|json|md|ts|yml)\"","prettier:check":"prettier --check \"**/*.@(js|json|md|ts|yml)\"","dtslint":"dtslint types","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"2e56fb03391caaf6a88d3d35338f086d12f58e78","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n![Coverage Status](http://img.shields.io/badge/coverage-100%25-brightgreen.svg)\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Search parameters can be included as part of the path:\n\n```js\nnock('http://example.com')\n  .get('/users?foo=bar')\n  .reply(200)\n```\n\nInstead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA `URLSearchParams` instance can be provided.\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' })\n\nnock('http://example.com')\n  .get('/')\n  .query(params)\n  .reply(200)\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nIn Nock 11.x it was possible to invoke `.reply()` with a status code and a\nfunction that returns an array containing a status code and body. (The status\ncode from the array would take precedence over the one passed directly to\nreply.) This is no longer allowed. In 12.x, either call `.reply()` with a\nstatus code and a function that returns the body, or call it with a single\nargument: a function that returns an array containing both the status code and\nbody.\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\nIn Nock 11 and later, if an error is passed to the callback, Nock will rethrow it as a programmer error.\nIn Nock 10 and earlier, the error was sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and response body (if available). The body will\nbe either a buffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'Content-Length': (req, res, body) => body.length,\n    ETag: () => `${Date.now()}`,\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': (req, res, body) => body.length,\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\nTo repeat this response for as long as nock is active, use [.persist()](#persist).\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you should omit the `body` argument from the method function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .post('/some_uri') // no body argument\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting an individual persisted mock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\nYou can also use `nock.cleanAll()` which removes all mocks, including persistent mocks.\n\nTo specify an exact number of times that nock should repeat the response, use [.times()](#repeat-response-n-times).\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.1.0","_npmVersion":"6.5.0","_nodeVersion":"10.16.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-cuyzdGYSEYjfTF8qmTB4uxdFrZcejEhjtK2gF5K5jq/WRfJFKpfqvjYIzJF818KBGtfXApfWKhtDXAeGjUjhJQ==","shasum":"cbd63800c6132833ecb923fad7508858f766310b","tarball":"https://registry.npmjs.org/nock/-/nock-11.1.0.tgz","fileCount":50,"unpackedSize":216903,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdW08ZCRA9TVsSAnZWagAAf+gP/i1D1cXnyEeDOIK1zZhP\nlM3Th+IwNNo/358aAURykrBl1hwVPwXJRSZRykAnnt71jCHIYLF+EMVwZyiq\nN74MlD2+cBJ5XwbXyN2Ol5oAyulTeALw+ja/BTcQi2JaDl6/lG9ymA4vUHIq\nD8VTFojDrr9KBPPB3MJMBTP8wi28E8mOybsxuKgj2hUjUy9+JpKsM/Tms2La\ntcHwfSmQYKn1zA4Lk+3gqIF9CPMj6HExEChwYBsxhgcphyZDNNqNtiYObKsc\nNy4cKv+aQOad3GegK1PHBQ96zwH9XPQbmgr180BmTkraqgwf0FMZIpFqecRA\nUghJCKd8tUIBJjjVQepDCmgStB4KBGCyux2UaXawUM1LcGBuyc0UaRj+ru2N\nk0tfFSV8auHp8smVNUmU7BKVjdipGaO0byIvtDCnjXhts2ILu14U/H78Al4Y\npxR8u77g1kGwZQd3emg+6iXCRy99nrZJ8OxUoV1DmcJX6UGTAkkcIzvF/CyL\n3c+i4MDdebx6b4wzAvLTyvQP59vuVGDdGA8Ji4emLlcMBbwuBKxLGnkTvWoc\n7DcsZtwIcx+4AaIVMmFmrFHjslGXM3iXDyWcqHaIt4lvsLXPMwGnI1XYPQD6\npj6mT6AoyJZAn70nEYCKs3KDZCD5dkssGwQzVYM4o9CNIudY7xS1lUj+OyAn\nFYrj\r\n=eVsw\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.1.0_1566265112584_0.4253893341714323"},"_hasShrinkwrap":false},"11.2.0":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.2.0","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","types":"types","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^0.5.0","propagate":"^2.0.0"},"devDependencies":{"assert-rejects":"^1.0.0","aws-sdk":"^2.437.0","dtslint":"^0.9.1","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^13.0.1","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.18.2","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^3.0.0","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --100 --coverage --coverage-report=text ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|json|md|ts|yml)\"","prettier:check":"prettier --check \"**/*.@(js|json|md|ts|yml)\"","dtslint":"dtslint types","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"de9c40be64dab30d87c548b8e30ef667f4610b08","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n![Coverage Status](http://img.shields.io/badge/coverage-100%25-brightgreen.svg)\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Search parameters can be included as part of the path:\n\n```js\nnock('http://example.com')\n  .get('/users?foo=bar')\n  .reply(200)\n```\n\nInstead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA `URLSearchParams` instance can be provided.\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' })\n\nnock('http://example.com')\n  .get('/')\n  .query(params)\n  .reply(200)\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nIn Nock 11.x it was possible to invoke `.reply()` with a status code and a\nfunction that returns an array containing a status code and body. (The status\ncode from the array would take precedence over the one passed directly to\nreply.) This is no longer allowed. In 12.x, either call `.reply()` with a\nstatus code and a function that returns the body, or call it with a single\nargument: a function that returns an array containing both the status code and\nbody.\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\nIn Nock 11 and later, if an error is passed to the callback, Nock will rethrow it as a programmer error.\nIn Nock 10 and earlier, the error was sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and response body (if available). The body will\nbe either a buffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'Content-Length': (req, res, body) => body.length,\n    ETag: () => `${Date.now()}`,\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': (req, res, body) => body.length,\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\nTo repeat this response for as long as nock is active, use [.persist()](#persist).\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you should omit the `body` argument from the method function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .post('/some_uri') // no body argument\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting an individual persisted mock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\nYou can also use `nock.cleanAll()` which removes all mocks, including persistent mocks.\n\nTo specify an exact number of times that nock should repeat the response, use [.times()](#repeat-response-n-times).\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.2.0","_npmVersion":"6.5.0","_nodeVersion":"10.16.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-Fu/1tFIhHpksaWlHfZJKqiX9A3WuN5xUQ12ltSVsn+93GPmSrd+IirJGT8JapEaGsIFR5PuUbjIxaznUfl3fLQ==","shasum":"772dfce87d48e14cd0ba01da2112b8d057fa965a","tarball":"https://registry.npmjs.org/nock/-/nock-11.2.0.tgz","fileCount":50,"unpackedSize":216982,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdW1CbCRA9TVsSAnZWagAAkMoP/jIhTvRtrZsKHlGiLk/B\n1ImpWG8XcZvIc4zjDXeKwfId+IOmIa836pLDvhTQi3X9zj8fY7nt6A3FtxE8\nQf5LCx050llQ6Cimj4svzaPdsm0rKrXQvMGwfdBoGjId/QXIA0AGg0JhGZwT\nGtclyq9LUf2nd33u0mP2wuFUQ2xxrYbw99iCexlDt8Mmh/il40KJjB1Zb0hD\nZBoMAFKXkusI6aPBjgXwthHAcP4dqdEwbnrOorvr9C2uFrOy3LFM9B8HAJMz\n3vE4n2kznJyMV7GOIhMtvMjEqIWF7C6fspe55hYawA7FqoOExQbQJXw/Sjda\nwoWpudvKcSP52GYPF50WKB6zXKcrEnk7om4HsJWtYuxCw5V1W+iAXvNqKey9\n2fqOkcgiE1n+4zWdkOCeXWQWGftvV33TML9iqjN2BkRJmg2pP91qkbMhJZP6\nimLpqWKFHDJ9uTzJ50r8BdC0nCFxOVyp7ea4xFjbhNAh0faHP1xUU3y8V3zA\nUsYP4bGQRgKvNMhpfAPH2wSY8kAihl7BEtkvNiTxDUvdgDY2E2ydfd2yOzlE\nnM1ePalYuxZ+cVIr1LEoFST0xDC4zYsXj+43tsarxPop8w8PSB/kxXQcpSNs\nILXW9RMU7NTlCqXeM/5AHKEIy/bah1n+Rv/z7UE2VymN0CpTmyv3/MfRwWDE\n+ajE\r\n=Rsc2\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.2.0_1566265498895_0.09201244107658813"},"_hasShrinkwrap":false},"11.3.0":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.3.0","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","types":"types","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^0.5.0","propagate":"^2.0.0"},"devDependencies":{"assert-rejects":"^1.0.0","aws-sdk":"^2.437.0","dtslint":"^0.9.1","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^13.0.1","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.18.2","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^3.0.0","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --100 --coverage --coverage-report=text ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|json|md|ts|yml)\"","prettier:check":"prettier --check \"**/*.@(js|json|md|ts|yml)\"","dtslint":"dtslint types","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"e0930f8912e62d4dc71f2b7ea24faa00568adb78","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n![Coverage Status](http://img.shields.io/badge/coverage-100%25-brightgreen.svg)\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Search parameters can be included as part of the path:\n\n```js\nnock('http://example.com')\n  .get('/users?foo=bar')\n  .reply(200)\n```\n\nInstead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA `URLSearchParams` instance can be provided.\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' })\n\nnock('http://example.com')\n  .get('/')\n  .query(params)\n  .reply(200)\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nIn Nock 11.x it was possible to invoke `.reply()` with a status code and a\nfunction that returns an array containing a status code and body. (The status\ncode from the array would take precedence over the one passed directly to\nreply.) This is no longer allowed. In 12.x, either call `.reply()` with a\nstatus code and a function that returns the body, or call it with a single\nargument: a function that returns an array containing both the status code and\nbody.\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\nIn Nock 11 and later, if an error is passed to the callback, Nock will rethrow it as a programmer error.\nIn Nock 10 and earlier, the error was sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and response body (if available). The body will\nbe either a buffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'Content-Length': (req, res, body) => body.length,\n    ETag: () => `${Date.now()}`,\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': (req, res, body) => body.length,\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\nTo repeat this response for as long as nock is active, use [.persist()](#persist).\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you should omit the `body` argument from the method function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .post('/some_uri') // no body argument\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting an individual persisted mock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\nYou can also use `nock.cleanAll()` which removes all mocks, including persistent mocks.\n\nTo specify an exact number of times that nock should repeat the response, use [.times()](#repeat-response-n-times).\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the intact array, a modified version of the array, or if custom formatting is desired, a stringified version of the array to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.3.0","_npmVersion":"6.5.0","_nodeVersion":"10.16.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-j5KXO096ov2XLvISUJQwl3UYJZy5dvArbK8Gt7+r0+gjtTU2uYiWJwhU4yIMXbtlHoX0od2LQgShAKXUObVbrA==","shasum":"a9ddc8271c7f74c4a815bc11eee0ef21e6d3be08","tarball":"https://registry.npmjs.org/nock/-/nock-11.3.0.tgz","fileCount":50,"unpackedSize":217135,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdW639CRA9TVsSAnZWagAAdF0P/R/iV8fdzJqEDnu4sG6E\nfzeNV5Q4wBWD68uyqlj6lIdgdPlOdp9cuCwXWEmxDdHNDmwLJ/9iCcGygtx3\nXTbsr3El0etW8GNdmgSfIn69alaDml6tylMJDMkWBEEheAFQbj7KD/Y1924E\nonohpi0ysikDLjkq1szPu9BtfBpYAXPFZqs06hapKjVPEyhcaqinbitzxzFH\nCt4q9JQvkeZidrcb4NLaIbTPDGlEDS9RPOg46h5pSym8ernONzWsPwcYsbZs\nY8enH/HKpxBNqMLfgfm/Jo2D5yyz94W0PV5cWvLc1ge6EftR61iY8/fX87gg\nGX+AHoH2UbR+j0dt15EEBB23jS0OLpI8ePboF/IXjK8MiNlXAap0StF38ZMJ\nxPfXOBJ7HGiZuJZZ0MF3Nx84u+8Uo4k032nADlGIS/DMxndl9G2yrM2T/6gG\n5iPGgSpdakwuKNCfDuKfGgewLYGefheVuZoiMHiTLG8hZbm81mrHJsy9cj6g\noSZI2Vurx/p9x2F/xV1SOTGE+aFD6udQB77YWYoIRNdxDPb9VOw0EVBfy6VF\n15qRxa6fTrpeQ6f//VNQZ9cK/kBkBm8QAObevBcytcj1iI3AXmIkAK8n101d\nJP3ypAHroz8yfNn5Z7x2OvEIDyEpc4NcfTzqfkI6STFxiMHKtuaPR8/Qgy29\n5fN5\r\n=ngm0\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.3.0_1566289405250_0.8598580151586808"},"_hasShrinkwrap":false},"11.3.1":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.3.1","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index.js","types":"types","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^0.5.0","propagate":"^2.0.0"},"devDependencies":{"assert-rejects":"^1.0.0","aws-sdk":"^2.437.0","dtslint":"^0.9.1","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^14.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.18.2","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^3.0.0","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --100 --coverage --coverage-report=text ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|json|md|ts|yml)\"","prettier:check":"prettier --check \"**/*.@(js|json|md|ts|yml)\"","dtslint":"dtslint types","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"057bbdf906b35ea26ff8ae1e2dc3b4272ca9634b","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n![Coverage Status](http://img.shields.io/badge/coverage-100%25-brightgreen.svg)\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Search parameters can be included as part of the path:\n\n```js\nnock('http://example.com')\n  .get('/users?foo=bar')\n  .reply(200)\n```\n\nInstead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA `URLSearchParams` instance can be provided.\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' })\n\nnock('http://example.com')\n  .get('/')\n  .query(params)\n  .reply(200)\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nIn Nock 11.x it was possible to invoke `.reply()` with a status code and a\nfunction that returns an array containing a status code and body. (The status\ncode from the array would take precedence over the one passed directly to\nreply.) This is no longer allowed. In 12.x, either call `.reply()` with a\nstatus code and a function that returns the body, or call it with a single\nargument: a function that returns an array containing both the status code and\nbody.\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\nIn Nock 11 and later, if an error is passed to the callback, Nock will rethrow it as a programmer error.\nIn Nock 10 and earlier, the error was sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and response body (if available). The body will\nbe either a buffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'Content-Length': (req, res, body) => body.length,\n    ETag: () => `${Date.now()}`,\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': (req, res, body) => body.length,\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\nTo repeat this response for as long as nock is active, use [.persist()](#persist).\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you should omit the `body` argument from the method function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .post('/some_uri') // no body argument\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting an individual persisted mock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\nYou can also use `nock.cleanAll()` which removes all mocks, including persistent mocks.\n\nTo specify an exact number of times that nock should repeat the response, use [.times()](#repeat-response-n-times).\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the intact array, a modified version of the array, or if custom formatting is desired, a stringified version of the array to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.3.1","_npmVersion":"6.5.0","_nodeVersion":"10.16.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-fsFRKNoH6R6hQuaasbAS5vmy4ujVaqKOb/9NCFP0TkhwbH1e5bPN8bn37FCIF9/0ZhayBrClUmSbN6Rm61+WSg==","shasum":"3bafe0820a60f0900b948d31ab92b38ea6917b06","tarball":"https://registry.npmjs.org/nock/-/nock-11.3.1.tgz","fileCount":50,"unpackedSize":216719,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdXpOnCRA9TVsSAnZWagAAO/gP/iJxTvhI/aOa4GP1P5A4\ncf/xIKn8uofmwIXq/yyrPShqk+z3GTNUytnx7LNRTpL27nz02LFSNWje/cE8\n7MBgu/Ul930ANVF83R/eIloEGYL+hB9tvwPeUW+W/TR/uxlvf0oRbiuYc444\njx27RfA2Sb4BlAvFzP2VTO9p98vX3LaQLGu7QFzL4gB1NSvpn7wEmP4XQcJb\nRsRa7k7/rTl3dH7tvjL96G49uXmHq/oBC5HGjLtCywCxgMiKp1W8hxkoomMP\nV8kEh0asO6DdouySZmtxViHrz+i1hiPckwa/tOaCsF3JEmrhoeGugWxsVsX8\nK6JzqVR6z25sgCajfW9GPBJKaDI7oHw4imQ8wZ4n3LYaqS3i7Ruo8Sya/dqH\nwxuTmLchrpYhNWMHFzU3sRcUUQfKDvbsClBPQxnWCEJd/zsmzg7MiP1wPjdK\nRgaNf1aa1Tml3IuQqBJO+pN2OURyADODIvRkPxaBmVTWy3cCpxzClk/+5S5I\nCAUJfJqrKF+4YNk2c5BqceyvLsdAUFeJSOCL1kCqy18SuUalQWmXGT8dJfWI\nVR6KGO/9tz3yL9hpEY9fmwRF6MM9ff7cjbk2r9LhmELPyIEOo3UJvZ+I0R7O\nxOlAAEIT/Pfc6crW+QWF3ABAbPe2l8f05joX6oKsrrNdhVtes90Oj2FwCwQg\npyGZ\r\n=Inkm\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.3.1_1566479271085_0.8892329029937869"},"_hasShrinkwrap":false},"11.3.2":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.3.2","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index.js","types":"types","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^0.5.0","propagate":"^2.0.0"},"devDependencies":{"assert-rejects":"^1.0.0","aws-sdk":"^2.437.0","dtslint":"^0.9.1","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^14.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.18.2","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^3.0.0","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --100 --coverage --coverage-report=text ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|json|md|ts|yml)\"","prettier:check":"prettier --check \"**/*.@(js|json|md|ts|yml)\"","dtslint":"dtslint types","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"65a8a6a84c1e679ab01ba7c94d29b41e7023d22d","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n![Coverage Status](http://img.shields.io/badge/coverage-100%25-brightgreen.svg)\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Common issues](#common-issues)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Search parameters can be included as part of the path:\n\n```js\nnock('http://example.com')\n  .get('/users?foo=bar')\n  .reply(200)\n```\n\nInstead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA `URLSearchParams` instance can be provided.\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' })\n\nnock('http://example.com')\n  .get('/')\n  .query(params)\n  .reply(200)\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nIn Nock 11.x it was possible to invoke `.reply()` with a status code and a\nfunction that returns an array containing a status code and body. (The status\ncode from the array would take precedence over the one passed directly to\nreply.) This is no longer allowed. In 12.x, either call `.reply()` with a\nstatus code and a function that returns the body, or call it with a single\nargument: a function that returns an array containing both the status code and\nbody.\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\nIn Nock 11 and later, if an error is passed to the callback, Nock will rethrow it as a programmer error.\nIn Nock 10 and earlier, the error was sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and response body (if available). The body will\nbe either a buffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'Content-Length': (req, res, body) => body.length,\n    ETag: () => `${Date.now()}`,\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': (req, res, body) => body.length,\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\nTo repeat this response for as long as nock is active, use [.persist()](#persist).\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you should omit the `body` argument from the method function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .post('/some_uri') // no body argument\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting an individual persisted mock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\nYou can also use `nock.cleanAll()` which removes all mocks, including persistent mocks.\n\nTo specify an exact number of times that nock should repeat the response, use [.times()](#repeat-response-n-times).\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the intact array, a modified version of the array, or if custom formatting is desired, a stringified version of the array to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Common issues\n\n**\"No match for response\" when using got with error responses**\n\n[Got][] automatically retries failed requests twice. That means if you have a\ntest which mocks a 4xx or 5xx response, got will immediately reissue it. At\nthat point, the mock will have been consumed and the second request will error\nout with **Nock: No match for request**.\n\nThe same is true for `.replyWithError()`.\n\nAdding `{ retry: 0 }` to the `got` invocations will disable retrying, e.g.:\n\n```\nawait got(\"http://example.test/\", { retry: 0 })\n```\n\nIf you need to do this in all your tests, you can create a module\n`got_client.js` which exports a custom got instance:\n\n```\nconst got = require('got')\n\nmodule.exports = got.extend({ retry: 0 })\n```\n\nThis is how it's handled in Nock itself (see [#1523][]).\n\n[got]: https://github.com/sindresorhus/got\n[#1523]: https://github.com/nock/nock/issues/1523\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.3.2","_npmVersion":"6.5.0","_nodeVersion":"10.16.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-Bb00vTmuXyucMT9gcnMSiE2n6P5yrRoAyej0eF6ik6VUxG0FKp4RcSx1TzFusEDtY3hMNpsd7ZYUSIvwtNpTrw==","shasum":"8f14e690a6cc839c6c585ba22acd0277d128766a","tarball":"https://registry.npmjs.org/nock/-/nock-11.3.2.tgz","fileCount":50,"unpackedSize":217403,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdYGdNCRA9TVsSAnZWagAAuIAQAIUEEx20zTh6UxLdI/Nb\no9QMC4N6sc0KYTT8BFTxPL9cVZe8CgNPNND4GmfhJsYdgvbn0VeIuKgAKOrH\nypVW5WrIwaNaUr/e0Mc34VU2pHUqqc7XdDtZH7HMfzeMRp9y1irandIgd/0s\ntbpF1VtnGUqzhoNLaUR2HgKTZBrvFK93AEWSJBBPaEiI5QN/PCiIyPoMOgJW\ndvPzKYys/1ISlgBx9Q5ZpednMP9M2JMKR64R/Rhl1vQoYbZNdUhU6HK36ZgO\niPrHM0xzZBqvDNajtxwXnZJSQPgXc11Pb7SFn3YxqVpBNefAWFi6Oka4joD1\nIyURF1qqrK0XcehCjwL4VtBy8ktcz3pcz9/kNQmEqswPgFMpWWbrM2RCqQzc\nS9OnVGbX1fOeBqqIxTT91sxEYEvU53kv+pHNwyCKvPtfqW0efactg1GYmTL6\n8xkyuGGBIjmWHWWdacAfeMuBNjpvgLwnptlKVzhraZxqiyz59NsnRiqYiaM/\n9aLoEZszc5ENO3tdBlI5xRQ4euE/cWVpvJBNB7IeWirwGCncga0PbQ/k3Hkf\niNcmVIz99Wve6fiB/pWoHQp527r9tq/3RWGg9t7nlHdqAj6I2V7CLNsb91lG\nsQNWcIb7X5frtSiZVho6gD/rUUTkflVfKnKMpTav5Rbi6qV3+C93/yhG9IP2\nB3/8\r\n=xro2\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.3.2_1566598988529_0.8324556882657301"},"_hasShrinkwrap":false},"11.3.3":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.3.3","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index.js","types":"types","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^0.5.0","propagate":"^2.0.0"},"devDependencies":{"assert-rejects":"^1.0.0","dtslint":"^0.9.1","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^14.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.18.2","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^3.0.0","semantic-release":"^16.0.0-beta.22","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --100 --coverage --coverage-report=text ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|json|md|ts|yml)\"","prettier:check":"prettier --check \"**/*.@(js|json|md|ts|yml)\"","dtslint":"dtslint types","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"a700fa2c507c2f621f7c0ff685062abe0668d8a6","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.3.3","_npmVersion":"6.5.0","_nodeVersion":"10.16.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-SrRux5onbWf2ItpmietnLYis+C2QYF08hAo9wv/3QLqaLJVHBSVBTL0EvlD8Hjrm7lTH4vExTzr9gQUsPqy5Cg==","shasum":"f4553d87ac8e501d7a995a50df7e24857f879f58","tarball":"https://registry.npmjs.org/nock/-/nock-11.3.3.tgz","fileCount":50,"unpackedSize":217654,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdcYtNCRA9TVsSAnZWagAA2rUP+QE2FYPcE0N3n135duRa\nKhMpGeWdo5Axu9kGxbf9z6Dmr8jQIsDVwvbufaDuz0592bNkp8T6KjPayrv4\n5erZSG5uR1DuX/NPIZtOcDM9lA8uRsULVpKOUDr7WZhPqbuPKewPdTcCjtl3\nQ8+ADDgLJQw8qMJTo1WKYDOMd7FTFrCaTqwOZqUwk6HXN+j8Ecp9K7VEQ6Pn\nSiahkpYLHzwAw6oCVc7NYZUgErwMhHylC1r4S8VcC3EstxTQi1lpVoht6mq1\nhr+JlqnzM2ZUIwgRAOjfRXDZWzabzlHZ/i54goh32BIW1XU1tYfA0+U/Cghc\nbX4a6JwK2a/n5rqk8e8BebKYkM6NZZbYQ/PdbemQOYkR4gaWZKwDfCdsxgfr\nWwwXDIRO0owGoDwFFrQL+oMZXiJ3J2auj3Potsqmh9WxzM9xUkxB+knDKNLZ\nwrv3pEGkyWkonvbbH4FUiTfkeuEgntU7i9h3WcMMQT0D4Lghz6kLSiEXUxKH\nM0AWvMWWGeD4MotcZ4NE1/cvJGftlLvMYoD1TQUFUcCy7tj7ICa09mdcXKrY\nTx2rFO1J3TOr3azg2bWBDdFcDQOVk3HmeF4SidVTcfLkT9L0B7Km5nwpZpEv\nYJAFFevxNwklN7/2z+/BZE+E6Q9eCQQRMqoGdWfZAAJKuqfbzlKkpLfyFWwh\nPr2L\r\n=9Tqg\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.3.3_1567722316586_0.9033999801109953"},"_hasShrinkwrap":false},"11.3.4":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.3.4","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index.js","types":"types","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^0.5.0","propagate":"^2.0.0"},"devDependencies":{"assert-rejects":"^1.0.0","dtslint":"^0.9.1","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^14.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^10.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.18.2","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^3.0.0","semantic-release":"^16.0.0-beta.22","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --100 --coverage --coverage-report=text ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|json|md|ts|yml)\"","prettier:check":"prettier --check \"**/*.@(js|json|md|ts|yml)\"","dtslint":"dtslint types","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"fa0a08aebe6172ca1cd2c2d69831132feb1a8e09","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.3.4","_npmVersion":"6.5.0","_nodeVersion":"10.16.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-Mqjk3DeOkuji8eYaveUku+vMswxzVyhrKAz1J9jE86IsEHQg4136Z/PHz81lcjyz9F3yrJXu56Gb/S+LFUOZVg==","shasum":"b3d8fde986da8f8484f4b8958e270fbb91250430","tarball":"https://registry.npmjs.org/nock/-/nock-11.3.4.tgz","fileCount":50,"unpackedSize":218797,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdeq5/CRA9TVsSAnZWagAAW1gP/2x3A+vQYZZovlo2fday\n67/4xfe7Jk3zKMfBKbgPanYkOF+ORNfKXUotjM9PFeorNlMdqvNSIGkZeBDG\nGlxThZnhktf/xNa0zCsAhEsVf0bTp9QlMAARKaRpcg4BPa48xpZD/I3eDmrC\nPFENHmCJN7i/fIMnz/p+ZhocGva0diw7Vg74vY78iAXxlyhT8bKBnXeHOaui\nuixUYadp8T0dM8cK/bJ/xZMwyvMMBgzMf7WfsMpAUqurvf6XWOif6NVrBeeh\nCtngEAtGUsSqiY5L7XmhwYhN3NzHFvS0k9vT1EU0PgZsP06EY9jNGp1jApOq\nJT2cmOrwe1nnHq8OeWoYkbgKwLUBpz8QuZfwP1gYylWVQtH5IYk/A+nf6/99\n9cRolpcqnMQF5q1BUHrWSa9Hf7OgA2M0UPHzLl/tBJT6or57X2HX7cEoUlaY\noRvJMaNFfMAI/Bxjf69Gw5hgNCyAiS4NtGcNZx3hEEYqtfTNAy4Z0zEak84Y\nlhZaG4ypRxQbdnC/4/GEb9l+q0TcUQfJ0lSonn2zSiaFfXNlF+o+woF1pWhJ\nVyr21P7lbgTT+90rz921yOjtpmJXwGsJHIgi9g8hnjPx4OpZihcAK3e3Zq97\nWjZAqBiqaB1MYSPPyzG65M8QYrlCpMvz5H35dtSDX+E67almSSeFBfFXZgl3\nY18v\r\n=DmPy\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.3.4_1568321150321_0.4334905950103283"},"_hasShrinkwrap":false},"11.3.5":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.3.5","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index.js","types":"types","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^0.5.0","propagate":"^2.0.0"},"devDependencies":{"assert-rejects":"^1.0.0","dtslint":"^0.9.1","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^14.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^10.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.18.2","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^3.0.0","semantic-release":"^16.0.0-beta.22","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --100 --coverage --coverage-report=text ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|json|md|ts|yml)\"","prettier:check":"prettier --check \"**/*.@(js|json|md|ts|yml)\"","dtslint":"dtslint types","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"59b345c6cb4c3968c7d76b3d38af62e0e8d2a2bc","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.3.5","_npmVersion":"6.5.0","_nodeVersion":"10.16.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-6WGeZcWc3RExkBcMSYSrUm/5YukDo52m/jhwniQyrnuiCnKRljBwwje9vTwJyEi4J6m2bq0Aj6C1vzuM6iuaeg==","shasum":"f2c7b4b672a04c35342593b6bfd821497881199c","tarball":"https://registry.npmjs.org/nock/-/nock-11.3.5.tgz","fileCount":51,"unpackedSize":219844,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdhPLKCRA9TVsSAnZWagAAP+8P/2RUk/Fc2GTV37y4OUGU\nsSPrYnETngmTIOZMX3xaiT0E65+m0G69G/A7UYZI20g4BsLHkhgUJwCqiT+U\ngyTbtijLi0eGSKoYrTZhU0k1yWifefJV7YOCKgUBKNABBNi05fTLq+KHTCTZ\n3ZEgCLcZn+OhWJfi+ysKi6saD3/OGT8QBVb4bTv5LzHbrRPKe61AwA5HGfI2\n9wPSbqXmVK6hZuffBL618FhJSZGgUzAZV7bncbCA1x5WwYF6b1VRdPzeF9iQ\nnYJ22H1kenUjGNCUnwE1qQDjF1SXUX+xAQHyrtY3yLge8NZEmWlZBXyp6lhv\nJkJ13KBzIauq8RdMXCUNhBBfXyhZ7gN/3dFQoQxde3W3cEfE3rIhxLm8/lFP\noHj+zv9G43G+5wjmdLFgX4wZTt/KKsuQQ7UoEyBCxcLsC3uIiUUD9gaTXSwi\nelW3lVkBlWWd0frHq30nrWg+VQGaIdCPh/XzLYEhVgVJHZzxjnPalub5zE+5\nemPqjwfsQ6vh3JraGTyA7N1kMjtbV4N2pjyW9GWO+RzmOJ9I8wgnCgyVD3wi\nrAvlxjqJ4PtE1E9UF40q5AFlSqnD8G4qvK5BeX1fO+WvX1o4t4msRLtF9Ntu\nhjRu9vpdd8g000Xn8cY2geY36mPrR4D+WCN0J8ywkHPVekNocMkA7/NcYllE\nRsIw\r\n=UqwG\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.3.5_1568993993037_0.7117114541152325"},"_hasShrinkwrap":false},"11.3.6":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.3.6","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index.js","types":"types","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^0.5.0","propagate":"^2.0.0"},"devDependencies":{"assert-rejects":"^1.0.0","dtslint":"^0.9.1","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^14.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^10.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.18.2","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^3.0.0","semantic-release":"^16.0.0-beta.22","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --100 --coverage --coverage-report=text ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|json|md|ts|yml)\"","prettier:check":"prettier --check \"**/*.@(js|json|md|ts|yml)\"","dtslint":"dtslint types","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"3f18d7029971224411a2f462c126ddf901a04211","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.3.6","_npmVersion":"6.5.0","_nodeVersion":"10.16.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-54MSX4qeRnhwQQ2PSHlHc6pM6zNf7Dq9ni0BTFTurnDbUUssXl2Jy3E95ffaE8rZ/W/FWa9VSfzWDDnbdAsoTg==","shasum":"cd87eb47ed9755d6d1e04dee1d56722267cb3283","tarball":"https://registry.npmjs.org/nock/-/nock-11.3.6.tgz","fileCount":51,"unpackedSize":219840,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdmNtGCRA9TVsSAnZWagAA67gP/RZ2/5LlD/Mtn43aaBw1\nwKzybhOxFIDbY+YYCPzZl5H6RXGOX150J4TQjWoJ3mzQ0TQg63sZSR8XmPS2\n/e0ZiZwHa/Dizxnia1wCtRUkHy3v5fXY0nAhN57XhPUDcSgfxkeZrQ6wlVK0\nYUTAI7+6xKDwt5cbuBO+kW4sZeLImONk/wdS2VTvyOMVM+zjVk5u6XhUxfqB\nERcfUYlQYdedyZSq8tiwMGJU914YyNQhQG8xVym9le25M6CQtcqODLAN7AO1\nuxxt+zYOh8xljGc4XeZY+STxw3Y6hd8T1duS3p4eR6cKPfmegt05xE8o1TEL\nZiv3VOB7Q/WZFnVoi1E+1s7TzhEZHzlni364GHig0eS6AKzcIV4Q54XTLPnA\nD/I8IaJpVkMoFZLw+lpyZxMsfIiObbSoOo9wInelFKvHUG/N9gKehjcf7J/b\n9RVZap6JvD+61gSctBBqL1G4b+t3VOD+qM6jIz8cpMGvcvKKdr52Pq/IJKd1\ncqh0Kk6NiGv0UtqCTYki8aNwOcX/9nnLZDqgluPEJbgQ/TW3aUkj2Exic44O\nH850oZF3dgdd0czHrM7I58zj89/ODE7ulYDBGbVzxTY+vqsNYCdfKLEe/x9b\nLNUEnDR1ssXod+BPdQvVp1OQrLqZvzK/McaljzBrzJbaKXypV5Quktm0bh8Z\nZrzg\r\n=hCrZ\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.3.6_1570298692972_0.3711855808639528"},"_hasShrinkwrap":false},"11.1.0-beta.1":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.1.0-beta.1","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^0.5.0","propagate":"^2.0.0"},"devDependencies":{"acorn":"^6.1.1","assert-rejects":"^1.0.0","aws-sdk":"^2.437.0","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^13.0.1","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^9.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^4.0.1","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.18.2","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^2.6.3","semantic-release":"^16.0.0-beta.18","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --100 --coverage --coverage-report=text ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|md|yml|json)\"","prettier:check":"prettier --check \"**/*.@(js|md|yml|json)\"","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"c0be8f884f85aea8662833869bd754f40c38d5da","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![npm@beta](https://img.shields.io/npm/v/nock/beta.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg?branch=beta)][build]\n![Coverage Status](http://img.shields.io/badge/coverage-100%25-brightgreen.svg)\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Search parameters can be included as part of the path:\n\n```js\nnock('http://example.com')\n  .get('/users?foo=bar')\n  .reply(200)\n```\n\nInstead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA `URLSearchParams` instance can be provided.\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' })\n\nnock('http://example.com')\n  .get('/')\n  .query(params)\n  .reply(200)\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nIn Nock 11.x it was possible to invoke `.reply()` with a status code and a\nfunction that returns an array containing a status code and body. (The status\ncode from the array would take precedence over the one passed directly to\nreply.) This is no longer allowed. In 12.x, either call `.reply()` with a\nstatus code and a function that returns the body, or call it with a single\nargument: a function that returns an array containing both the status code and\nbody.\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\nIn Nock 11 and later, if an error is passed to the callback, Nock will rethrow it as a programmer error.\nIn Nock 10 and earlier, the error was sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and response body (if available). The body will\nbe either a buffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'Content-Length': (req, res, body) => body.length,\n    ETag: () => `${Date.now()}`,\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': (req, res, body) => body.length,\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\nTo repeat this response for as long as nock is active, use [.persist()](#persist).\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you should omit the `body` argument from the method function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .post('/some_uri') // no body argument\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting an individual persisted mock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\nYou can also use `nock.cleanAll()` which removes all mocks, including persistent mocks.\n\nTo specify an exact number of times that nock should repeat the response, use [.times()](#repeat-response-n-times).\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the array scopes to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.1.0-beta.1","_npmVersion":"6.5.0","_nodeVersion":"10.16.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-DGYZ8ONDQXnbH1FgHEXgpO8E7NRbMds8M2QKGU4CNxXPZ49fFwz8a4nPHDm5w5qGXFszm5S0ianmBetKOrgHAA==","shasum":"3a30f762cfda6b912c623fc6565d21e95e4ee4ad","tarball":"https://registry.npmjs.org/nock/-/nock-11.1.0-beta.1.tgz","fileCount":46,"unpackedSize":189396,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdmpVxCRA9TVsSAnZWagAAvh4P/0qOM08+d7kFUgwmMKkj\nVS3tOrVdhwBAKA4TM2moiz4bUd8bBhL7bFAZUCwN9FRVRSPKCSRwXCvWCHgi\nuA3rUnjn8C96bNsxDXMWzS9D9X5h6xy627eHayuM8MMsbTuDNauxE2TaWQoD\nv9FYJRzWTLV/SOsLMvHEZysA+DcGtdYzL7vOMNCiC2c1y3MgMB4AStCsYhnY\ngRAmhtLFfx9Sc2weZzJ9wh+FDFEKoW4RW7fQnRr7h08JKqX6G1a5cdi4jCed\n8Js+bjgmplvByvuIVjLuUZubR1nROVbmejON3sZ+jkHNlBlEUc5of8iCsFP3\nV/5lIIxw+cwYe2EyCETwM71079PKzO2ktPxGqJ56pRwZ01UzMjELeE0CPJx5\nHe/CQ1H0dcdUswt2uWSyXRQq7TzNuEopt7ViS67Gui0HSJA7JEODAdPn3jxl\nRbGSlhEIZz7zObciFBVQ0NvxLSZOg/AL5HGQ7tVCvS5d2OKhR72nSkpjeL3n\nt108nML1UXQLlaIQNUQFr7XVsxc2Ba4lfGJq6wJGLsDYW1WYnjPQ5U7oHsyo\nXbIS2XqOguSGPfWcIvElo4UC10guOjbId8Yl0/k8w6rpm41GAUfMHBc0eSl8\nM+MIz2Rjb5JCqoDy5DISRbVTXvDixaAIW3gV5Dxg88x4AZz4gFgh+gf8N3vc\nzehg\r\n=PEmN\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.1.0-beta.1_1570411889296_0.7985264123494087"},"_hasShrinkwrap":false},"11.4.0":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.4.0","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index.js","types":"types","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^0.5.0","propagate":"^2.0.0"},"devDependencies":{"assert-rejects":"^1.0.0","dtslint":"^0.9.1","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^14.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^10.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^5.0.0","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.18.2","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^3.0.0","semantic-release":"^16.0.0-beta.22","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --100 --coverage --coverage-report=text ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|json|md|ts|yml)\"","prettier:check":"prettier --check \"**/*.@(js|json|md|ts|yml)\"","dtslint":"dtslint types","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"f4a208ba807aa85dd87d515cda0d19d82efd75a5","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.4.0","_npmVersion":"6.5.0","_nodeVersion":"10.16.3","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-UrVEbEAvhyDoUttrS0fv3znhZ5nEJvlxqgmrC6Gb2Mf9cFci65RMK17e6EjDDQB57g5iwZw1TFnVvyeL0eUlhQ==","shasum":"68c2f9cf533f13ecb1a43e956823dbfba5593d17","tarball":"https://registry.npmjs.org/nock/-/nock-11.4.0.tgz","fileCount":51,"unpackedSize":219854,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdm20xCRA9TVsSAnZWagAA8QEP/i5fhdvfZruufWLzsLlg\nMAgFBBY8rDLlBwG+MBfUT2SCfpujMikWhKJPj9N9nwlkeFpPKv51cZSJkJ9D\nI0x4+Wy1OZc3vIWkV68IZhs0lKOJdMUBPY/DwZLuAPo3fYj4GDcbnl4cVuxM\nG8c98PMZJ9PT4B/EWBLAm2hq2AZZnsGCgOCHaK5DG3BgBacOHKkooKlsjLa1\nbWlWOIAPFn8D28hGHj452LZwRuUZzxJCvOPEKlQ4pLXd65qwfRMnWpQ99xWC\nxwx2n8cbXZu57Mp+4OVB/JLO9TwaJUhj7hGL01lZ2nbiSmHcIdgjs2zSgnLY\nVyX3hyPE09fbQWiIBhafQ2btu7kBjXxkNedH/9hb2NYaXvgEGedoV5Uat8OO\nxVOBzKy2e55ZQP7d/WYBD/GYcUlApBWxXC735C/9M67dCNpS4iP2CUGfQI+R\nZWVK+UYTfG9rtn0UKbTCqCCoqaNeiLzhZMcKb3B8HO7Gg/tENRr7WDpfMivU\nupoCJjpNEqPl1jvqdd0UhnyF96pHHhN86duUXdMHyyTjDlKKrv25XTZ6nUkG\nfGwFYpuCUt3AsTx4FCn1zJ2NwDG5jIaMhZxRTOZdFe4j/+duFZ77mI0B/1Zi\n3KGlMFmEBNAReEowZjlkZ+LmLJaMROC0tSrVnvpnz6loctdoN4p5W0SnWySn\nazZz\r\n=WGwn\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.4.0_1570467120323_0.8984953316548479"},"_hasShrinkwrap":false},"11.5.0":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.5.0","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index.js","types":"types","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^0.5.0","propagate":"^2.0.0"},"devDependencies":{"assert-rejects":"^1.0.0","dtslint":"^0.9.1","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^14.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^10.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^5.0.0","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.18.2","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^3.0.0","semantic-release":"^16.0.0-beta.22","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --100 --coverage --coverage-report=text ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|json|md|ts|yml)\"","prettier:check":"prettier --check \"**/*.@(js|json|md|ts|yml)\"","dtslint":"dtslint types","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"b7f9f131ff437dfd192a422003db81087295312d","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.5.0","_npmVersion":"6.5.0","_nodeVersion":"12.13.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-gddqQKCzc2JM9WdNcAzuXNnYfc3S8eEG/3a4vqGRjA86glaKuWTVCRWwCaP2ZYdmPcaxy8uPgoEOKz7n/YreFA==","shasum":"b21c0cb199a583ee66e93d868c21dd29bc570093","tarball":"https://registry.npmjs.org/nock/-/nock-11.5.0.tgz","fileCount":18,"unpackedSize":166990,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdrudCCRA9TVsSAnZWagAApFUP/0eTadd5JlBImb50rOPO\nJKWfKfy+DGnN6nj/NL+6uNXGIqT9sUPnARBGl+CYYz5NBiWv0EL3DtPd190D\nbEGaOh/gBw63bflYohilShQfBcJAsqPfM5fU3v+VwMITWjj0Yp21PO2qajlN\ncwwfBZGtKOfwxDFpf0fmEveGE8JtKDkI+W2QWdpnrRQ3y3+foK6x0SJGNfj1\nRB0cN2F1vHkuOzZg0nxzzUwO4AypxsJOImcISDC178htnr2x9w8Fiff2U4wY\nmEHAQp/xCvzOyQ859ARifBPhVlE0f+KamJOmGV8L6M6q5NhA4tEN5gFUeiF+\nAxLVaxvMbqSRJnSuTMyojTh9jw1oR8mycuo1oQnYcFGx6nX95mxQNCmj+HSZ\naE7VqjeVnYoSysL1BWybwtoaJpwIQqlDjcl7Ux6EiR/BMWgUpQdMci+DvPX5\nlw+DyZyLxRieKnECUw/AWGmdoPBmSFm5nLn18f95Rh7cVP/2JNgUwjq+/GYB\nq42TeoNHuXO4xgOPZh1gpjbN2y4wq/rj+riUZXYD+8HKapaKFb83f9ou0RyI\nJoqPG5UvNruL9EZvgu557xf6pmgQB8L3FvsCHfiOwAeZTn2bnKzy2sXazKcP\nkD50B2ZsvufNM2VQCerdet/emmW3e2xKiRmvjvPyh9mnbNK5O1b40gwEn6I4\nQz21\r\n=kBNp\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.5.0_1571743553069_0.36791942802584"},"_hasShrinkwrap":false},"11.6.0":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.6.0","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index.js","types":"types","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^0.5.0","propagate":"^2.0.0"},"devDependencies":{"assert-rejects":"^1.0.0","dtslint":"^0.9.1","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^14.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-node":"^10.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","hyperquest":"^2.1.3","isomorphic-fetch":"^2.2.0","lolex":"^5.0.0","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.18.2","proxyquire":"^2.1.0","request":"^2.83.0","restify-clients":"^2.2.0","rimraf":"^3.0.0","semantic-release":"^16.0.0-beta.22","sinon":"^7.3.1","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --100 --coverage --coverage-report=text ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|json|md|ts|yml)\"","prettier:check":"prettier --check \"**/*.@(js|json|md|ts|yml)\"","dtslint":"dtslint types","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"187db85af7a8b0d2405bbfd77f2aa7c2d2b88854","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.6.0","_npmVersion":"6.5.0","_nodeVersion":"12.13.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-9ocFR68CxS6nf2XtQNpdSh5n4QQSKl87DhXgLnHO/RD4CsGThFtu8/QG6myHTnrUHRE6JSKpiGjLJdRe2ZSlIA==","shasum":"481961e0cf78794f200ea71e25d948d668446717","tarball":"https://registry.npmjs.org/nock/-/nock-11.6.0.tgz","fileCount":18,"unpackedSize":167931,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdsWoYCRA9TVsSAnZWagAARykP/0NGA6hkKyLWWZ6ouFbu\nYsEe9Aeniztyu7v2yQD/dz7rxeHVlrIzFWzpgrY9h4bg6KbG/UaIdr1qv513\nBIzP66UuP9Y4JKy7B0ahmutb47ZbRhzo7HZlDSEphejxqejA33RSM4rofyKr\noh/OX0YvYioCjVFOlMoRNMWBlXV3Em5EQSJudeKDJTPu2Yz4OcBTFxx7T8Kc\n0WARll/QkmzWpcUOezrk0LhAu/GPh0f/nCoR+IvQzlx9HKUh8CzdrlCipNq7\nPbnLmR33sLLSjYtELLTIlrq/Qg3V60enui/LSrEj3Tz/b/n1lUBLZndcIVPH\nZRPC3xTfoUCBgkb/giGkayGAlS3qS83Igc3a6llvTHpCYj2CZ0S/f0+SRnMZ\n8uiNbU/oQraR5Pzxyu74cOXx/P+bQRafmVo+Pe23ugy80/btB6RVmB3pJnoR\ntFJEVYhepgdReuDvsX9bGBKjqsf/GXGRqI5RpDEpwNU0upr7+JzzCfGI54t3\nS33Kl5vma1jwnyn6ZHjywWSnZGKVr6Gj0RKGZ8R6rYtrhyuE5AqhdVHhGgy/\nDfRnun9f2fjheDDBAcujkIxRVx7IZYVl9dsxWIvNRw4zkExxw5qn+VY6SIM4\nS/0DsnuYYpQTl/QAYzttmDy/WAROGNa9unCQ7DG/zo+qOvAfazkjfE1L/OYZ\nPoOr\r\n=sAlL\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.6.0_1571908119832_0.23195830618149427"},"_hasShrinkwrap":false},"11.7.0":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.7.0","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index.js","types":"types","dependencies":{"chai":"^4.1.2","debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^0.5.0","propagate":"^2.0.0"},"devDependencies":{"assert-rejects":"^1.0.0","dirty-chai":"^2.0.1","dtslint":"^0.9.1","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^14.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-mocha":"^6.2.0","eslint-plugin-node":"^10.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","isomorphic-fetch":"^2.2.0","lolex":"^5.0.0","mocha":"^6.2.2","needle":"^2.3.0","npm-run-all":"^4.1.5","nyc":"^14.0.0","prettier":"1.18.2","proxyquire":"^2.1.0","request":"^2.83.0","rimraf":"^3.0.0","semantic-release":"^16.0.0-beta.22","sinon":"^7.5.0","sinon-chai":"^3.3.0","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --100 --coverage --coverage-report=text ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","mocha":"nyc mocha $(grep -lr '^\\s*it(' tests)","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|json|md|ts|yml)\"","prettier:check":"prettier --check \"**/*.@(js|json|md|ts|yml)\"","dtslint":"dtslint types","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"ba60fd2cc43a452e6928ad5405852883b68adf7c","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.7.0","_npmVersion":"6.5.0","_nodeVersion":"12.13.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-7c1jhHew74C33OBeRYyQENT+YXQiejpwIrEjinh6dRurBae+Ei4QjeUaPlkptIF0ZacEiVCnw8dWaxqepkiihg==","shasum":"5eaae8b8a55c0dfc014d05692c8cf3d31d61a342","tarball":"https://registry.npmjs.org/nock/-/nock-11.7.0.tgz","fileCount":18,"unpackedSize":168692,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJduxPPCRA9TVsSAnZWagAAFzkP/RF71Y6DTYwTH7fqcGAT\n5pcTTQwJvpfH98HbDigvhLAfTgZd6k1YWwAr66/XeIUOYYM2PsfVlq1iijZC\n6NZrKrOmUd0/xr63g5nW1+foOiRJtmBv/DfieZD+tzVqNtjmTaGylKOiRjyI\nwXKRMtjphNTYWNrIDVxdK39T0lTCaNra64LiUXDVGP3NiziXPT/0iY8cpJRb\ngKqc8t6doxxOb2qwnfOAIGT/d+8x8Zbt5PC1UIrE3GOa02M6wY0ejLLaJk89\nds2B882RSTbP3tQq+8FkHMYCxVC0SvdPxfLafR/XJ/n6g14jnngtzKMEz7r1\nZcfKoL+k0WbuknmAH69eQcZCcZi8teu/3VXWJmOlHEYAtRDxbq678AsxyMtv\nUDJLzXbkpI8MfBoCz9OYeSbbRYpksyO5dT/xY8UdtoH0DBkak7iFO/R+fiD2\nP8cUHRzYdx4tsosWxTlrRwKbIvUoELZHxkfjLObEr+e33Pb7UrJveLCtYEPI\nKwNfiGt81qju3TbJfAnnkMZur48j5DcbL7wmMJkcBo3XdFc3Pm/C00TphW0r\nPKwvHLK/HNtQh2FPHdO4+u6EQbwDfWRqjbJhuMkkKJ0k3PrWJ0GgoAbZ//Rx\nHa2UDiBl4vlovlpZd0pT+hnF7jSavsO8qhWvMo5Eam152OiJeZ3K28kU8wlG\nlkfs\r\n=z/sO\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.7.0_1572541391280_0.02579552110805161"},"_hasShrinkwrap":false},"11.7.1":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.7.1","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index.js","types":"types","dependencies":{"debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^0.5.0","propagate":"^2.0.0"},"devDependencies":{"assert-rejects":"^1.0.0","chai":"^4.1.2","dirty-chai":"^2.0.1","dtslint":"^1.0.2","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^14.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-mocha":"^6.2.0","eslint-plugin-node":"^11.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","lolex":"^5.0.0","mocha":"^6.2.2","npm-run-all":"^4.1.5","nyc":"^15.0.0","prettier":"1.19.0","proxyquire":"^2.1.0","request":"^2.83.0","rimraf":"^3.0.0","semantic-release":"^16.0.0-beta.22","sinon":"^7.5.0","sinon-chai":"^3.3.0","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --100 --coverage --coverage-report=text ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","mocha":"nyc mocha $(grep -lr '^\\s*it(' tests)","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|json|md|ts|yml)\"","prettier:check":"prettier --check \"**/*.@(js|json|md|ts|yml)\"","dtslint":"dtslint types","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"24700599753d67b3408bf3dace5c5646b7202030","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.7.1","_npmVersion":"6.5.0","_nodeVersion":"12.14.0","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-fW+dlMyquAEvgtmGoRHftKrNnJ7yZcbINQDTW7OKRoTYa+11GA0u0UokWHuvCyZrG5TXkplnEv2jmj6R3vvImg==","shasum":"761971f24093e291af6e1f0af5b6eb048b94b1c1","tarball":"https://registry.npmjs.org/nock/-/nock-11.7.1.tgz","fileCount":18,"unpackedSize":168986,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeDpfeCRA9TVsSAnZWagAAHhQP/19dwdXdt4/MCbWdX1I1\nqFHX3f8FcSMhhpLn7er3b209mXgK03GXH3V5bkNTbLAK7Xdbi6Yb+tTuNVJN\nQz5vpZVI9PjXUJzdB9su2n8KZYVBzCsq2Rt3pZGSBHCf4S0fwC9o/kzxYqS6\ncfec8AwBcQ7iz9voRVgLnViD3ule1iYCwmtmi/OeeeMuRrb9B8pE0kvjTDlY\nuOabPGkU2s5Oy6WRpSZGtgtAAZPo4o99QYSuG6livEJrq8/wcqjrCCxRURAk\nee/B1JyAO5YdfTgHtE/BDu9p46XZQcB6+54uixMlxeAyP+1J2WNt7reCC8o/\nrrOk3gsGVh8d8vsBvbl45vrma+iFmZnvxT3o+jKzUuAgjZNPPGE6ilr6B+qB\nAcnYFbqrbsApBcB/nWSufpK/cmJUtX9nFJVNcw9JBg7gGnP//PAIljz0dHrE\neVHf0OTj73O5XEQS6KTpvXgqaqbpHC+YSMEirSkILKA0nU9BOkVO5rgSRAaT\nHYYvmpwuvQlsDm+8KNKAZaRI2WNVxmrkc4gsmZrxd7f6Sz4pRRg2oJgwWvDj\noZXlDFDzmWLU/zQKL0Bhs9J9hQwBFgnvQ4qI1MoFC2BU7kwPeKBsSavNMh4d\nqFdtKa4WB0lHqmKiCUoz4P51rn2x/qgoblPCcsUGWEYvJOiIsTwzgSEgiCkh\n59VP\r\n=CdKH\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.7.1_1578014685525_0.9591667598514946"},"_hasShrinkwrap":false},"11.7.2":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.7.2","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index.js","types":"types","dependencies":{"debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^0.5.0","propagate":"^2.0.0"},"devDependencies":{"assert-rejects":"^1.0.0","chai":"^4.1.2","dirty-chai":"^2.0.1","dtslint":"^2.0.2","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^14.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-mocha":"^6.2.0","eslint-plugin-node":"^11.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","lolex":"^5.0.0","mocha":"^6.2.2","npm-run-all":"^4.1.5","nyc":"^15.0.0","prettier":"1.19.0","proxyquire":"^2.1.0","request":"^2.83.0","rimraf":"^3.0.0","semantic-release":"^16.0.0-beta.22","sinon":"^8.0.0","sinon-chai":"^3.3.0","superagent":"^5.0.2","tap":"^14.0.0"},"scripts":{"unit":"tap --100 --coverage --coverage-report=text ./tests/test_*.js","pretest":"npm run -s lint","test":"npm run -s unit","posttest":"npm run -s prettier:check","coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","mocha":"nyc mocha $(grep -lr '^\\s*it(' tests)","lint":"eslint \"**/*.js\"","prettier":"prettier --write \"**/*.@(js|json|md|ts|yml)\"","prettier:check":"prettier --check \"**/*.@(js|json|md|ts|yml)\"","dtslint":"dtslint types","semantic-release":"semantic-release"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"c7363e56ee866635514e5aaa0319232b6edd1b61","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.7.2","_npmVersion":"6.5.0","_nodeVersion":"12.14.1","_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"dist":{"integrity":"sha512-7swr5bL1xBZ5FctyubjxEVySXOSebyqcL7Vy1bx1nS9IUqQWj81cmKjVKJLr8fHhtzI1MV8nyCdENA/cGcY1+Q==","shasum":"4cee4fa838dc3635c074c5b3436bcdec7f7ee213","tarball":"https://registry.npmjs.org/nock/-/nock-11.7.2.tgz","fileCount":18,"unpackedSize":169274,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeFietCRA9TVsSAnZWagAAGjQQAKJLhoa9y0PXMG+1dCIG\nrXnHaXk4XHSfweTV/D0TsHL/Pck6Hmk9SbljDa6wV+EZc9P2XLi0w1TzAW1G\n0CfhKrnGAqeJqNlga0qZE2XGnpGl0iHG1wKw9AJa/7N4+WJEbsciFyMJhFAq\naDCfRyKHO4Bo02i44fcJnetqRxv+4/LMdFeXZHlWT2gIQSAb4yLMS2foeRCF\nbR+Q5eGpov4gWTjm34xybqERiJJCV9RNu9wZjCEvDSfWllyaYIvh7kH3VwKi\nsFTbbaNWqXKahCSTinnTArooLOOWnUG3dXTBn0b9VziF2VAveGlxf5Pc8DWs\nHdehrMq5Pn83Cql+N9SG/2UjFfoQT7nGbuPSx0MtVFyEiyDW1DKsa3zanigu\nRa8n6QLA8HabaHWrSlcuF8+f+/vvBW/VUGVXcqmh+5zkug+JO4zsZ6IUtsTO\nKyzgXMdmcQxP8wYPbfpSdImBgpEIJOnbxVVjjnLRcw/lf0d4LR3FfJwy1V3t\nOo26X9bmj617HMeLgnvU7SAwZJxB0f5oeoOr9zw4lSOaCabiZ6gfIy102OFL\nK4ncaSO7jYWHza6quNq3wyeN7pPQJg8KDTBffisngk2yGyC4A8ZaE1IE+6I0\n4ocpU3VKJKgMsepsyBbFmp8fS9CWqpza1iwm1dks3JeP8pahgHyf1aO599po\nDDxe\r\n=Zn7S\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.7.2_1578510252339_0.620186391757299"},"_hasShrinkwrap":false},"11.8.0":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.8.0","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index.js","types":"types","dependencies":{"debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^0.5.0","propagate":"^2.0.0"},"devDependencies":{"assert-rejects":"^1.0.0","chai":"^4.1.2","dirty-chai":"^2.0.1","dtslint":"^2.0.5","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^14.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-mocha":"^6.2.0","eslint-plugin-node":"^11.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","lolex":"^5.0.0","mocha":"^7.0.1","npm-run-all":"^4.1.5","nyc":"^15.0.0","prettier":"1.19.0","proxyquire":"^2.1.0","request":"^2.83.0","rimraf":"^3.0.0","semantic-release":"^17.0.2","sinon":"^8.0.0","sinon-chai":"^3.3.0","superagent":"^5.0.2","tap":"14.6.1"},"scripts":{"format:fix":"prettier --write '**/*.{js,json,md,ts,yml,yaml}'","format":"prettier --check '**/*.{js,json,md,ts,yml,yaml}'","lint":"run-p lint:js lint:ts","lint:js":"eslint --cache --cache-location './.cache/eslint' '**/*.js'","lint:js:fix":"eslint --cache --cache-location './.cache/eslint' --fix '**/*.js'","lint:ts":"dtslint types","semantic-release":"semantic-release","test":"run-p test:mocha test:tap","test:coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","test:mocha":"nyc mocha $(grep -lr '^\\s*it(' tests)","test:tap":"tap --100 --coverage --coverage-report=text ./tests/test_*.js"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"8b8a10d92b4dc60032e252a92294013ed170c569","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.8.0","_nodeVersion":"12.15.0","_npmVersion":"6.13.7","dist":{"integrity":"sha512-QsAB4ayLYAMOt+2YbwGr9a1hR/a3HAL/tkMHRWg2QpiKItVNFmx11qU3k71VggLoCpdxWXEAx9ClDavMQnjvJg==","shasum":"71b89b5c423729221469091b6523f21eaa66e6f9","tarball":"https://registry.npmjs.org/nock/-/nock-11.8.0.tgz","fileCount":18,"unpackedSize":169686,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeQNqiCRA9TVsSAnZWagAAUIIP/A6Mj4ycFLINr+zgSkmA\nnOzsC/ommR0jNN6aMUGUvo/MkOmq2STm0SnZhsOPDuRdWgCupydVf0uqiN13\nwtaKAEFzkLbDPVnDWKhr8a31U83urcVkIFYewtzdEI39bq9Odirdyt7B0Bt2\nUgIFkuH5lwqlttynF3hmrC3Ps96v6fbtSvX8izhqfRoUzVe2D+UZJPk6P2m2\nONwhQrYqMyREgxd/7cdkkTUKDlkxmuyJ7mYxuvRBg7zqju1u63ghSLhk9yFG\noJU9ex07icazBUFN2UfXZC3km9OF+nwPhzz4gnw+bvrumO1TJQw9/Q42KTEv\nxAlE3gQYhpKfCL3ZusryXemWTtjQXtAb53KnNyAWhxWLjEnLP7vITq0ycJX1\nE4LYaur001ZukpQO4iMtFuVz0SISkgVnvdeTjgkNSfezgHUe5o4V7uMmtsfU\n/88VyAcRjGMVZBCj6CaRu9UYvrufDBdORV3veF3/G4bZk3U1OGd9mMs2D2SG\ni8NcPH0T4nu+HYzjL/ud7g3awXo1tE7gGFf2x/Orf9ZlnzQ7zTiol7vi1RoI\nbAJQ9N7ZPa8dIaGHTxw8PLRh41sQc57h/T3pnyovayvsOimyVCm5LXimv+Xp\ntXd5alJ4bzzERgAAvKn4nbSJWjTvJvPk834+/t5eWYHW+xvK2sbi9jmNt4GB\n+zpq\r\n=frzi\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.8.0_1581308577750_0.8075552456667199"},"_hasShrinkwrap":false},"11.8.1":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.8.1","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index.js","types":"types","dependencies":{"debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^0.5.0","propagate":"^2.0.0"},"devDependencies":{"assert-rejects":"^1.0.0","chai":"^4.1.2","dirty-chai":"^2.0.1","dtslint":"^2.0.5","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^14.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-mocha":"^6.2.0","eslint-plugin-node":"^11.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","lolex":"^5.0.0","mocha":"^7.0.1","npm-run-all":"^4.1.5","nyc":"^15.0.0","prettier":"1.19.0","proxyquire":"^2.1.0","request":"^2.83.0","rimraf":"^3.0.0","semantic-release":"^17.0.2","sinon":"^8.0.0","sinon-chai":"^3.3.0","superagent":"^5.0.2","tap":"14.6.1"},"scripts":{"format:fix":"prettier --write '**/*.{js,json,md,ts,yml,yaml}'","format":"prettier --check '**/*.{js,json,md,ts,yml,yaml}'","lint":"run-p lint:js lint:ts","lint:js":"eslint --cache --cache-location './.cache/eslint' '**/*.js'","lint:js:fix":"eslint --cache --cache-location './.cache/eslint' --fix '**/*.js'","lint:ts":"dtslint types","semantic-release":"semantic-release","test":"run-p test:mocha test:tap","test:coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","test:mocha":"nyc mocha $(grep -lr '^\\s*it(' tests)","test:tap":"tap --100 --coverage --coverage-report=text ./tests/test_*.js"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"a56a20960a9633060174c5de6ee1bf9146aa48d4","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.8.1","_nodeVersion":"12.15.0","_npmVersion":"6.13.7","dist":{"integrity":"sha512-FB18RAQckl3zfh67QNZHkb0ODYxzMwZ4SF46+1SzzFmYM2szaAQTdpPZW3ZQEnl73dtinSVYuv3BHvd49wznkA==","shasum":"4e6133ff4abc881e056f03ebabfa0b78c7cfd62a","tarball":"https://registry.npmjs.org/nock/-/nock-11.8.1.tgz","fileCount":18,"unpackedSize":169996,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeQNx2CRA9TVsSAnZWagAAQl4P/3yJN36TQXu0RiUTeUTq\nUh41aLMZlgqLcXiUtdhheoPVJ3i9Sql2xY33NMsskupBw9St2DPVw8HkBxrT\nrugWs2TULmoAu13yAJ/7GGxQKpKWMal0lAY6qCwJSzA3Xr/YlSWZinUbkLFM\ndPOMA7jkQcCAs4edOd41o9zquSvvS92eazRfNWS5AsqbNHK8zGD+veJ2aBuV\nNAiN36NvE/R+thuX/a3/mkl18nv7CFJ5KhDmKVidCzKpTXzwbbRKiSGSUOwB\nTVJNV6XJheU5QmaqTrt6cb0JBwhvd64Y8f9TfkQjBap86Zel7aTPWGnwZfrE\nHM1u0vsq0/FCzr3tVdudVA1YbqtesPxYlyMbAJUoQX7OCHM1udIDHVZ3syJw\nILQ5Gk7bEsyBV6cAd8tUIuMBOMaUn5nSIq0kUIOfYLckoQdCIQN0f92NTPHd\ncYAu/ObtpSlanq5Hgevcw+H/Zp/OrVLqesD86YYPFmbqttfgCtoJlyTT/2bd\ntcRC2Q+Xl8wZqkthyJjW+FFdsyjRTZpOMD6UMHCpRVE6Ck/UqeJkvLuyyTcA\neeQsdzlbN8d1lg043U1wWQcuINLBB+B0MCgL47pvJkFaYAMZ7Znoe3yX2p/M\nt9dfX68KqVnLCYbVuDFjR+7cj03XH/WWTcc9z4xxKCWaHqT9FGwyA8d5AWS4\nR2yD\r\n=XsZB\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.8.1_1581309045984_0.9558604427356234"},"_hasShrinkwrap":false},"11.8.2":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.8.2","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index.js","types":"types","dependencies":{"debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^0.5.0","propagate":"^2.0.0"},"devDependencies":{"assert-rejects":"^1.0.0","chai":"^4.1.2","dirty-chai":"^2.0.1","dtslint":"^2.0.5","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^14.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-mocha":"^6.2.0","eslint-plugin-node":"^11.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","lolex":"^5.0.0","mocha":"^7.0.1","npm-run-all":"^4.1.5","nyc":"^15.0.0","prettier":"1.19.0","proxyquire":"^2.1.0","request":"^2.83.0","rimraf":"^3.0.0","semantic-release":"^17.0.2","sinon":"^8.0.0","sinon-chai":"^3.3.0","superagent":"^5.0.2","tap":"14.6.1"},"scripts":{"format:fix":"prettier --write '**/*.{js,json,md,ts,yml,yaml}'","format":"prettier --check '**/*.{js,json,md,ts,yml,yaml}'","lint":"run-p lint:js lint:ts","lint:js":"eslint --cache --cache-location './.cache/eslint' '**/*.js'","lint:js:fix":"eslint --cache --cache-location './.cache/eslint' --fix '**/*.js'","lint:ts":"dtslint types","semantic-release":"semantic-release","test":"run-p test:mocha test:tap","test:coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","test:mocha":"nyc mocha $(grep -lr '^\\s*it(' tests)","test:tap":"tap --100 --coverage --coverage-report=text ./tests/test_*.js"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"9fdeeca7009ba8dc1b4f83b36030527f011ab665","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.8.2","_nodeVersion":"12.15.0","_npmVersion":"6.13.7","dist":{"integrity":"sha512-udrFXJ/aqPM9NmrKOcNJ67lvrs/zroNq2sbumhaMPW5JLNy/6LsWiZEwU9DiQIUHOcOCR4MPeqIG7uQNbDGExA==","shasum":"7845608d57769f41375b63521a7e6b554f4cdbb2","tarball":"https://registry.npmjs.org/nock/-/nock-11.8.2.tgz","fileCount":18,"unpackedSize":170154,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeQN9PCRA9TVsSAnZWagAAKSkQAKRwtrK8GjHdEC8IyRO/\ngQBINBws50rd7mLPYLchzUtek2E54Y3D8FpA4GpNkLGV3n/toqPgSjztZdG1\nfTZfkNV62Eh2wK1sT4De8V+gNCMz9nYN1YEKr0OvXFcDvCggUi7qLZVgAUB+\nUbbTsK8CL2HeYc1jfJ3C50racChoTK1rfM2O+/vQ7I3YdWbUE61dSZKRPA9M\n2OMkfucBOBITklQVMGVD5/CNr4z2Wqj1uKhHX7MMtsMXK6HJBsYTHsQ3J2A4\n7hbWqabYjlkePJ1gU4VPvZTNKHj0AmFY1s+eS6YEsU5rFMPsrBNrG7gU5CXA\nEgvz+wGtCGrAztE63zQAj0fzoILMsDUO5MURf+KauknC9cqSaRhwihkCF4GX\nPMDAlLmWVRIsqSxkAO7pCIGdl8N6B6MaEozeru5o8i0Y/RGm59kenbp2aWBs\nUMrfmTYrvNEyBFOd4a859qwPxHFJpYy69LkMX0Vav+q6KUbKgwygMWc4EO8m\nW/ItN/vq0+kKcsE8AA70jUnFpZOZM1jKPdsGVkgT3lS+va3MEgifjEe3XD09\niEz5A5CDVt+s8feUAETT8cxaSR2ckNECGL6NqOh3QIBjuiVNP7nejn2SbYdc\nvqfgmlNwiv0Qr/0Z58uvy8FNzLazFKC+8ZiRCpoC44J7DNwRum9SrNW7r/dN\nJVXZ\r\n=Y9kz\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.8.2_1581309774653_0.3940721913987397"},"_hasShrinkwrap":false},"11.9.0-beta.1":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.9.0-beta.1","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 10.13"},"main":"./index.js","types":"types","dependencies":{"debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^1.0.0","propagate":"^2.0.0"},"devDependencies":{"assert-rejects":"^1.0.0","chai":"^4.1.2","dirty-chai":"^2.0.1","dtslint":"^2.0.5","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^14.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-mocha":"^6.2.0","eslint-plugin-node":"^11.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","@sinonjs/fake-timers":"^6.0.0","mocha":"^7.0.1","npm-run-all":"^4.1.5","nyc":"^15.0.0","prettier":"1.19.0","proxyquire":"^2.1.0","request":"^2.83.0","rimraf":"^3.0.0","semantic-release":"^17.0.2","sinon":"^8.1.1","sinon-chai":"^3.3.0","superagent":"^5.0.2","tap":"14.6.1"},"scripts":{"format:fix":"prettier --write '**/*.{js,json,md,ts,yml,yaml}'","format":"prettier --check '**/*.{js,json,md,ts,yml,yaml}'","lint":"run-p lint:js lint:ts","lint:js":"eslint --cache --cache-location './.cache/eslint' '**/*.js'","lint:js:fix":"eslint --cache --cache-location './.cache/eslint' --fix '**/*.js'","lint:ts":"dtslint types","semantic-release":"semantic-release","test":"run-p test:mocha test:tap","test:coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","test:mocha":"nyc mocha $(grep -lr '^\\s*it(' tests)","test:tap":"tap --100 --coverage --coverage-report=text ./tests/test_*.js"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg)][build]\n![Coverage Status](http://img.shields.io/badge/coverage-100%25-brightgreen.svg)\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.abortPendingRequests()](#abortpendingrequests)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Common issues](#common-issues)\n  - [Axios](#axios)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save-dev nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Search parameters can be included as part of the path:\n\n```js\nnock('http://example.com')\n  .get('/users?foo=bar')\n  .reply(200)\n```\n\nInstead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA `URLSearchParams` instance can be provided.\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' })\n\nnock('http://example.com')\n  .get('/')\n  .query(params)\n  .reply(200)\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nIn Nock 11.x it was possible to invoke `.reply()` with a status code and a\nfunction that returns an array containing a status code and body. (The status\ncode from the array would take precedence over the one passed directly to\nreply.) This is no longer allowed. In 12.x, either call `.reply()` with a\nstatus code and a function that returns the body, or call it with a single\nargument: a function that returns an array containing both the status code and\nbody.\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\nIn Nock 11 and later, if an error is passed to the callback, Nock will rethrow it as a programmer error.\nIn Nock 10 and earlier, the error was sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and response body (if available). The body will\nbe either a buffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'Content-Length': (req, res, body) => body.length,\n    ETag: () => `${Date.now()}`,\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': (req, res, body) => body.length,\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\nTo repeat this response for as long as nock is active, use [.persist()](#persist).\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you should omit the `body` argument from the method function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .post('/some_uri') // no body argument\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .abortPendingRequests()\n\nYou can abort all current pending request like this:\n\n```js\nnock.abortPendingRequests()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting an individual persisted mock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\nYou can also use `nock.cleanAll()` which removes all mocks, including persistent mocks.\n\nTo specify an exact number of times that nock should repeat the response, use [.times()](#repeat-response-n-times).\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname, or a function that accepts the hostname and returns true or false:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\n// Or a Function\nnock.enableNetConnect(\n  host => host.includes('amazon.com') || host.includes('github.com')\n)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the intact array, a modified version of the array, or if custom formatting is desired, a stringified version of the array to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Common issues\n\n**\"No match for response\" when using got with error responses**\n\n[Got][] automatically retries failed requests twice. That means if you have a\ntest which mocks a 4xx or 5xx response, got will immediately reissue it. At\nthat point, the mock will have been consumed and the second request will error\nout with **Nock: No match for request**.\n\nThe same is true for `.replyWithError()`.\n\nAdding `{ retry: 0 }` to the `got` invocations will disable retrying, e.g.:\n\n```\nawait got(\"http://example.test/\", { retry: 0 })\n```\n\nIf you need to do this in all your tests, you can create a module\n`got_client.js` which exports a custom got instance:\n\n```\nconst got = require('got')\n\nmodule.exports = got.extend({ retry: 0 })\n```\n\nThis is how it's handled in Nock itself (see [#1523][]).\n\n[got]: https://github.com/sindresorhus/got\n[#1523]: https://github.com/nock/nock/issues/1523\n\n### Axios\n\nTo use Nock with [Axios][], you may need to configure Axios to use the Node\nadapter as in the example below:\n\n```js\nimport axios from 'axios'\nimport nock from 'nock'\nimport test from 'ava' // You can use any test framework.\n\n// If you are using jsdom, axios will default to using the XHR adapter which\n// can't be intercepted by nock. So, configure axios to use the node adapter.\n//\n// References:\n// https://github.com/nock/nock/issues/699#issuecomment-272708264\n// https://github.com/axios/axios/issues/305\naxios.defaults.adapter = require('axios/lib/adapters/http')\n\ntest('can fetch test response', async t => {\n  // Set up the mock request.\n  const scope = nock('http://localhost')\n    .get('/test')\n    .reply(200, 'test response')\n\n  // Make the request. Note that the hostname must match exactly what is passed\n  // to `nock()`. Alternatively you can set `axios.defaults.host = 'http://localhost'`\n  // and run `axios.get('/test')`.\n  await axios.get('http://localhost/test')\n\n  // Assert that the expected request was made.\n  scope.done()\n})\n```\n\n[axios]: https://github.com/axios/axios\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","gitHead":"013a0d8aa32798988b0742711c45ac8b2ff53bac","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.9.0-beta.1","_nodeVersion":"12.15.0","_npmVersion":"6.13.7","dist":{"integrity":"sha512-RO0RCWjaZufyH4X5C5FVsqnlr8b1Iiv1AuhtCQxXeieVzFOPAGMGFbb+ScZO1TenpCMIymea0DCX5y7TB0zQAg==","shasum":"aa67e4af4e3c6216a3722f2a3f62361c1776e2f4","tarball":"https://registry.npmjs.org/nock/-/nock-11.9.0-beta.1.tgz","fileCount":18,"unpackedSize":169936,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeQi7KCRA9TVsSAnZWagAA8cQQAIxwCoF7PVSXNb9Zrsus\nEF8Fe0hASwH0aZv1tnsc2T+Q3OhW6vsBIzBjmaf17bxGb3nelTCpv2EsULOj\noiqTFjxrKkkXB9K99ckR4t8VT2WMjMQnd7cp6ENATrRq1CNDie2+PeoFb8K0\npEBKJEIQzHsmffyqsFwEs4SGSiq452LLZ8nFS5g8XpRX4l5jJa8z8otVEEbq\n5RCN7Td4+oj0y+ZTxGNCxunlwvQuJwo+uuCOt8l+AZckipz/0/zshoQ/+due\nUwQ4TqmWHJFoaEkp9ZcxzTFlAxpTybBMEHlnSVthu4w5q9YA8ujxedez9fBj\nkUmK7pOBE6/qMa1XT1IDJ4G/AqyCsoqNLBIit3O+GAska/61tRXNEjtXV8uf\nqijJHbQyWxbSK/VXfd2R52FFtogSwflZEWgZyZ/lIHEBIwsXgjU4lUEtXuVk\n1IJAjPrXILIwRpggltMZvHd2tZIuYCzT4NnVzK5L1i6MKsbuat4o44MtBJkQ\nzjSvMQtTuMFWgfoOD/89DD1n+vsz5OmQFo0xttWQpD8LophVUweUCB+QC9Dn\nNYlL5syqs6SYFVEOWNugD81VnuFBgYTqlWuOlSMGcv5dJOpvucEmGnewkib+\n6WoPwchzc0UXwJ5IZ6HWFGG6n4QvP65uGGqLIWCG1JokUhgfhHLuz34ym4u8\nb0mO\r\n=VqUF\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.9.0-beta.1_1581395657824_0.17747616854631598"},"_hasShrinkwrap":false},"12.0.0-beta.1":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"12.0.0-beta.1","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 10.13"},"main":"./index.js","types":"types","dependencies":{"debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^1.0.0","propagate":"^2.0.0"},"devDependencies":{"assert-rejects":"^1.0.0","chai":"^4.1.2","dirty-chai":"^2.0.1","dtslint":"^2.0.5","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^14.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-mocha":"^6.2.0","eslint-plugin-node":"^11.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","@sinonjs/fake-timers":"^6.0.0","mocha":"^7.0.1","npm-run-all":"^4.1.5","nyc":"^15.0.0","prettier":"1.19.0","proxyquire":"^2.1.0","request":"^2.83.0","rimraf":"^3.0.0","semantic-release":"^17.0.2","sinon":"^8.1.1","sinon-chai":"^3.3.0","superagent":"^5.0.2","tap":"14.6.1"},"scripts":{"format:fix":"prettier --write '**/*.{js,json,md,ts,yml,yaml}'","format":"prettier --check '**/*.{js,json,md,ts,yml,yaml}'","lint":"run-p lint:js lint:ts","lint:js":"eslint --cache --cache-location './.cache/eslint' '**/*.js'","lint:js:fix":"eslint --cache --cache-location './.cache/eslint' --fix '**/*.js'","lint:ts":"dtslint types","semantic-release":"semantic-release","test":"run-p test:mocha test:tap","test:coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","test:mocha":"nyc mocha $(grep -lr '^\\s*it(' tests)","test:tap":"tap --100 --coverage --coverage-report=text ./tests/test_*.js"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg)][build]\n![Coverage Status](http://img.shields.io/badge/coverage-100%25-brightgreen.svg)\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.abortPendingRequests()](#abortpendingrequests)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Common issues](#common-issues)\n  - [Axios](#axios)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save-dev nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock      |\n| ---- | --------- |\n| 0.10 | up to 8.x |\n| 0.11 | up to 8.x |\n| 0.12 | up to 8.x |\n| 4    | up to 9.x |\n| 5    | up to 8.x |\n| 7    | up to 9.x |\n| 9    | up to 9.x |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Search parameters can be included as part of the path:\n\n```js\nnock('http://example.com')\n  .get('/users?foo=bar')\n  .reply(200)\n```\n\nInstead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA `URLSearchParams` instance can be provided.\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' })\n\nnock('http://example.com')\n  .get('/')\n  .query(params)\n  .reply(200)\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .reply(200, {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n    _id: '4324243fsd',\n  })\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nIn Nock 11.x it was possible to invoke `.reply()` with a status code and a\nfunction that returns an array containing a status code and body. (The status\ncode from the array would take precedence over the one passed directly to\nreply.) This is no longer allowed. In 12.x, either call `.reply()` with a\nstatus code and a function that returns the body, or call it with a single\nargument: a function that returns an array containing both the status code and\nbody.\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\nIn Nock 11 and later, if an error is passed to the callback, Nock will rethrow it as a programmer error.\nIn Nock 10 and earlier, the error was sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function(uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError({\n    message: 'something awful happened',\n    code: 'AWFUL_ERROR',\n  })\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and response body (if available). The body will\nbe either a buffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'Content-Length': (req, res, body) => body.length,\n    ETag: () => `${Date.now()}`,\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': (req, res, body) => body.length,\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .times(4)\n  .reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com')\n  .get('/')\n  .once()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .twice()\n  .reply(200, 'Ok')\nnock('http://zombo.com')\n  .get('/')\n  .thrice()\n  .reply(200, 'Ok')\n```\n\nTo repeat this response for as long as nock is active, use [.persist()](#persist).\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you should omit the `body` argument from the method function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .post('/some_uri') // no body argument\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample\n  .get('/pathB')\n  .optionally()\n  .reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example\n    .get('/pathC')\n    .optionally(optional)\n    .reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .abortPendingRequests()\n\nYou can abort all current pending request like this:\n\n```js\nnock.abortPendingRequests()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting an individual persisted mock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\nYou can also use `nock.cleanAll()` which removes all mocks, including persistent mocks.\n\nTo specify an exact number of times that nock should repeat the response, use [.times()](#repeat-response-n-times).\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname, or a function that accepts the hostname and returns true or false:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\n// Or a Function\nnock.enableNetConnect(\n  host => host.includes('amazon.com') || host.includes('github.com')\n)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function(nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function(match, key, value) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function(nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the intact array, a modified version of the array, or if custom formatting is desired, a stringified version of the array to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Common issues\n\n**\"No match for response\" when using got with error responses**\n\n[Got][] automatically retries failed requests twice. That means if you have a\ntest which mocks a 4xx or 5xx response, got will immediately reissue it. At\nthat point, the mock will have been consumed and the second request will error\nout with **Nock: No match for request**.\n\nThe same is true for `.replyWithError()`.\n\nAdding `{ retry: 0 }` to the `got` invocations will disable retrying, e.g.:\n\n```\nawait got(\"http://example.test/\", { retry: 0 })\n```\n\nIf you need to do this in all your tests, you can create a module\n`got_client.js` which exports a custom got instance:\n\n```\nconst got = require('got')\n\nmodule.exports = got.extend({ retry: 0 })\n```\n\nThis is how it's handled in Nock itself (see [#1523][]).\n\n[got]: https://github.com/sindresorhus/got\n[#1523]: https://github.com/nock/nock/issues/1523\n\n### Axios\n\nTo use Nock with [Axios][], you may need to configure Axios to use the Node\nadapter as in the example below:\n\n```js\nimport axios from 'axios'\nimport nock from 'nock'\nimport test from 'ava' // You can use any test framework.\n\n// If you are using jsdom, axios will default to using the XHR adapter which\n// can't be intercepted by nock. So, configure axios to use the node adapter.\n//\n// References:\n// https://github.com/nock/nock/issues/699#issuecomment-272708264\n// https://github.com/axios/axios/issues/305\naxios.defaults.adapter = require('axios/lib/adapters/http')\n\ntest('can fetch test response', async t => {\n  // Set up the mock request.\n  const scope = nock('http://localhost')\n    .get('/test')\n    .reply(200, 'test response')\n\n  // Make the request. Note that the hostname must match exactly what is passed\n  // to `nock()`. Alternatively you can set `axios.defaults.host = 'http://localhost'`\n  // and run `axios.get('/test')`.\n  await axios.get('http://localhost/test')\n\n  // Assert that the expected request was made.\n  scope.done()\n})\n```\n\n[axios]: https://github.com/axios/axios\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","gitHead":"31bf521014927dcd0ce046436f9c7b147525cb73","homepage":"https://github.com/nock/nock#readme","_id":"nock@12.0.0-beta.1","_nodeVersion":"12.16.0","_npmVersion":"6.13.7","dist":{"integrity":"sha512-f1/TS5Yc5PRNJ5C0mI//Teh8CPYW/pw7+0myL0DHi3LRxHHA1Z4paQs7cK63OypEbUKYyPX21fViAo40oIfRAQ==","shasum":"092c086a1fe4db1699e45e27901e6c4d88f8117c","tarball":"https://registry.npmjs.org/nock/-/nock-12.0.0-beta.1.tgz","fileCount":18,"unpackedSize":169936,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeQvtyCRA9TVsSAnZWagAAw4IP/2lfKXA+8QURGpn0Zbfw\nuPGayZsj9utInsDQxlC09pOjj/XRcbZey8NZidHayYAh7G++BHHxCzuGagdb\nmYPOuyORQkb+E2nlIATFgtwsFZcxEY1uy+Unj4ZKfILqZPpL8PQdAtOMpv+d\ngBap4IVUfDbllO08YcCYxNqp7u2G7Bb9O2UPnvpkpeBy/t/88vpGiuv33oKv\nyWK7pFyfKzqoQb/b55wS7Mv1IfifYjUGww4ctw0onhNyepDfJLzMcgxHWlzG\nM9bmjHbXy7mHTgqtraZjE/NfYDAx1nWtKA7op5qvQYSMRjGOTTawfc6nPX4Z\nwrzkI5aVU09gpErR+96vNSOfg0sPMYpDfPlpz0xKCocpCzeCOkmrZQlR+zOv\n+xD2GewSobngtGLHqOIe3c631MP7M8A546dBTYKtScgWcnijd9jpDQ5EZoDR\nv+nBH0nvQ+S+KXqOzNsl9gsCvwz1Axc803uZi3n0SOen7hsdpsDwrDbzH4o1\nCxqjRX4p+bs07Aq3jfazqbqDFW+VOfSR6t/cUdzxqHSqkNkcHpzQjgyT7pvI\n9zFGEpHjLfh97QFEMepi28O3ral8IwWo5P43Sd0nmIz3Ols9hlpLqRgj3Q8O\nokmZi+BsEnaL/FiQkwbChOa2zWIlY5vAHRUUClu81qwvtzh2Bruekn7/3moB\nKhQH\r\n=e28I\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_12.0.0-beta.1_1581448049831_0.7798198940562875"},"_hasShrinkwrap":false},"11.9.0":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.9.0","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 10.13"},"main":"./index.js","types":"types","dependencies":{"debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^1.0.0","propagate":"^2.0.0"},"devDependencies":{"assert-rejects":"^1.0.0","chai":"^4.1.2","dirty-chai":"^2.0.1","dtslint":"^2.0.5","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^14.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-mocha":"^6.2.0","eslint-plugin-node":"^11.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^10.5.2","@sinonjs/fake-timers":"^6.0.0","mocha":"^7.0.1","npm-run-all":"^4.1.5","nyc":"^15.0.0","prettier":"1.19.0","proxyquire":"^2.1.0","request":"^2.83.0","rimraf":"^3.0.0","semantic-release":"^17.0.2","sinon":"^8.1.1","sinon-chai":"^3.3.0","superagent":"^5.0.2","tap":"14.6.1"},"scripts":{"format:fix":"prettier --write '**/*.{js,json,md,ts,yml,yaml}'","format":"prettier --check '**/*.{js,json,md,ts,yml,yaml}'","lint":"run-p lint:js lint:ts","lint:js":"eslint --cache --cache-location './.cache/eslint' '**/*.js'","lint:js:fix":"eslint --cache --cache-location './.cache/eslint' --fix '**/*.js'","lint:ts":"dtslint types","semantic-release":"semantic-release","test":"run-p test:mocha test:tap","test:coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","test:mocha":"nyc mocha $(grep -lr '^\\s*it(' tests)","test:tap":"tap --100 --coverage --coverage-report=text ./tests/test_*.js"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"a2757698d835a6de695559644a3dff38ddda406b","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.9.0","_nodeVersion":"12.16.0","_npmVersion":"6.13.7","dist":{"integrity":"sha512-2ml3A1pqTLapa4US4sv5n5XtIuaTNMd0hQNDG4EtTUY38TQroIf3EIEl8aA6mvY9Dtt8gofCtJZElRLfhW7/Hg==","shasum":"012adc21e534a95a127808c5addd696695db293a","tarball":"https://registry.npmjs.org/nock/-/nock-11.9.0.tgz","fileCount":18,"unpackedSize":169930,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeRXjpCRA9TVsSAnZWagAA2v8QAJdozO+LM1jg/vQylPux\nGtOsuwqSmgEz0zlKPtXK2JT4oQOJTfFywImL5UdNqGqcgs43HFohL5BRtbmM\nzpnRSv9JVZ2wzOrxRj7XAnDDjYBIcbVIZfj7LCrvh1nvPjraS3AGskoVhk/s\nhWL/5q3yrmexWzkpmjRMltafAcUeLVx64RtbvWBqz2xQ4XixiaYFP/jZwLc0\nAMmWOx/jkCYjNG7UiJisE+uEhrsz2mWSCvjO0gp0xxJrZDKUN2EKHLmhq0Dk\nSzqL7+o85pxqoDNug5Z2ThSCyBwvK2aY9FwXrcC3R7huOSbUNtzl1bQkQmbY\nMbNj47nrMUKvJhEdATpozNcuaqjOaS3pfqviqPdBp+mHxQKB3qnu/2grpVht\niO2+ATEat5WTB6UTSFFffkcLnjQ7FWtlzGtxWpyDy9LTeImeL6O4+lippSNp\nFLJX0uexD96tyCFIZWxmevaXEZbhSrcMtFkMnLrEyqivQSH4zbVxC2gLxT/t\nA2dtxJKupAI6tWW84Bl4bgeq5g+npdPb5I6oXAknhdh4oy3DK14fs1Mx9YPI\ntlsTNFf1udPxkjt0tKOIE+B3JukYUP8rAYF3lXNORHT3OxZ+c631WmoU7bU1\nooJhph2OBIvmxy9FR6eUwXpMHjkuVgn1txBXqtpy76bwGmzhWeQYThdT+6j+\nkWAG\r\n=sJtI\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.9.0_1581611241236_0.3668811321395187"},"_hasShrinkwrap":false,"deprecated":"nock@11.9.0 included accidental breaking changes. Please update to nock@11.9.1 or above"},"11.9.1":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"11.9.1","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 8.0"},"main":"./index.js","types":"types","dependencies":{"debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^0.5.0","propagate":"^2.0.0"},"devDependencies":{"assert-rejects":"^1.0.0","chai":"^4.1.2","dirty-chai":"^2.0.1","dtslint":"^2.0.5","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^14.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-mocha":"^6.2.0","eslint-plugin-node":"^11.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^9.6.0","@sinonjs/fake-timers":"^6.0.0","mocha":"^7.0.1","npm-run-all":"^4.1.5","nyc":"^15.0.0","prettier":"1.19.0","proxyquire":"^2.1.0","request":"^2.83.0","rimraf":"^3.0.0","semantic-release":"^17.0.2","sinon":"^8.1.1","sinon-chai":"^3.3.0","superagent":"^5.0.2","tap":"14.6.1"},"scripts":{"format:fix":"prettier --write '**/*.{js,json,md,ts,yml,yaml}'","format":"prettier --check '**/*.{js,json,md,ts,yml,yaml}'","lint":"run-p lint:js lint:ts","lint:js":"eslint --cache --cache-location './.cache/eslint' '**/*.js'","lint:js:fix":"eslint --cache --cache-location './.cache/eslint' --fix '**/*.js'","lint:ts":"dtslint types","semantic-release":"semantic-release","test":"run-p test:mocha test:tap","test:coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","test:mocha":"nyc mocha $(grep -lr '^\\s*it(' tests)","test:tap":"tap --100 --coverage --coverage-report=text ./tests/test_*.js"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"062c10e6ff6755d33090036f9796c33486f457b3","homepage":"https://github.com/nock/nock#readme","_id":"nock@11.9.1","_nodeVersion":"12.16.0","_npmVersion":"6.13.7","dist":{"integrity":"sha512-U5wPctaY4/ar2JJ5Jg4wJxlbBfayxgKbiAeGh+a1kk6Pwnc2ZEuKviLyDSG6t0uXl56q7AALIxoM6FJrBSsVXA==","shasum":"2b026c5beb6d0dbcb41e7e4cefa671bc36db9c61","tarball":"https://registry.npmjs.org/nock/-/nock-11.9.1.tgz","fileCount":18,"unpackedSize":170169,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeSYtACRA9TVsSAnZWagAA1wUP/2Ft/0nH2sKjrd8Rhi2t\nfJMNlHk2BZJ5TRmFOlkm1aB6vE0f/gCLNVH6koDUhvqiI/j6v8CX5Plc00mf\nf3juXG+BJkP7olS4CPZKgOVfZCPwKgDl+qe553rOQWbrPRoxf+rVIBZYxtK1\n2EuyuE5ql6dFYz4luoJw2Ot4fhReVcVNg/C/qqV0ZPiFYvAwBWtj7/FhGu8q\nYnbq+oCfnM0H3uNvxzdXkrmc6edomCoUyBFmd8Ln1twALeI1SIgFyNNsNLmG\n1jJ+QwYlnEONXTtG7PQauw3nxJWngrm6HLNccbt8bsk3S2FqVQkt9ljn+uQF\n4S/ghh3CTyGRFQTMTotmm+CQ1VcpO4+JgP0c/shLPSV8id1UJ17SPiaVrd8G\nZzTOd6byA5nOdygQXimVCXpfllcbA3rMKbnHwowPuhFcRZpeY1GSq66t7isf\nAoyNQiCjJg8Q/DRj22ehpzFJAZBgTWI4BPTobabWvpLNOHUGf52wFBEeZ/T0\nS3ljACFwJ4g6f8nS5Lce7WUYkXAu+0M0duvupdqRPaRlSvwPD3DUaj3sSKTG\nbevBrt2WZNm9PuWk3GcJt5w6Z7J4l6yBN0E2zOPRf0TIeVGfuZwqWrxmYcab\nuJCM6kBlqRT7lpnTmDlLaTfhMM4/F+Io02asuKZT4V/A1KMNiAKBZ25IP9td\nnRz9\r\n=mPPE\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_11.9.1_1581878079468_0.37341577047271923"},"_hasShrinkwrap":false},"12.0.0":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"12.0.0","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 10.13"},"main":"./index.js","types":"types","dependencies":{"debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^1.0.0","propagate":"^2.0.0"},"devDependencies":{"assert-rejects":"^1.0.0","chai":"^4.1.2","dirty-chai":"^2.0.1","dtslint":"^2.0.5","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^14.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-mocha":"^6.2.0","eslint-plugin-node":"^11.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^10.5.2","@sinonjs/fake-timers":"^6.0.0","mocha":"^7.0.1","npm-run-all":"^4.1.5","nyc":"^15.0.0","prettier":"1.19.0","proxyquire":"^2.1.0","request":"^2.83.0","rimraf":"^3.0.0","semantic-release":"^17.0.2","sinon":"^8.1.1","sinon-chai":"^3.3.0","superagent":"^5.0.2","tap":"14.6.1"},"scripts":{"format:fix":"prettier --write '**/*.{js,json,md,ts,yml,yaml}'","format":"prettier --check '**/*.{js,json,md,ts,yml,yaml}'","lint":"run-p lint:js lint:ts","lint:js":"eslint --cache --cache-location './.cache/eslint' '**/*.js'","lint:js:fix":"eslint --cache --cache-location './.cache/eslint' --fix '**/*.js'","lint:ts":"dtslint types","semantic-release":"semantic-release","test":"run-p test:mocha test:tap","test:coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","test:mocha":"nyc mocha $(grep -lr '^\\s*it(' tests)","test:tap":"tap --100 --coverage --coverage-report=text ./tests/test_*.js"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"b8dd8c812bb17774fb6db4ca7e528461ae8137b0","homepage":"https://github.com/nock/nock#readme","_id":"nock@12.0.0","_nodeVersion":"12.16.0","_npmVersion":"6.13.7","dist":{"integrity":"sha512-aTzDlXFH/Xq4m2V5x5nV13RTvYX8RXXcurCx6z4+y8IsloFMizZsDe/189GX1pSMJ99HBFZAokS5sMiMX/qfaQ==","shasum":"f405309bbf305d9a5bba2e9718aab4463edc9572","tarball":"https://registry.npmjs.org/nock/-/nock-12.0.0.tgz","fileCount":18,"unpackedSize":169930,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeSa48CRA9TVsSAnZWagAAA2QP/jOB7SgSkhPfEO7fbcxN\n0OhlFGP6j1w8l1kZtlDOAqbYQ6nh7CJSO/y9sYhc8+VSKwjd2576TrgNz02C\nTRV3re8rmf1flNxiOqgvVjep7KZt1CznWKQ0p8WZR1JHY2N27KVx/32l/WH/\nZJlRKQXRxPDPUP19XQnVgu9N/W57Mmn5rf9Puc4A0Q/jxrr+wGy16YQKX5ZF\nuGKR6voa6ci8p0txzYvSxSfEtKnDEXS5VbDuZ1EpicrMLDuChK/VHxaBYg/Y\nUtFmBj+OxdHcJrw9ddTFH8cXsQvUk2ap0vM8LXsL//wuD0LCMLlbH/fKSBLx\nFs5DzWSH0rZrk5yUDmVL41uh4JTeKeQ/GuKQjgz78qlR+xro8KL2rYj8I0lr\nzTwF3hxYTFckOuNqW8NKMzXu/JD6X9LOv01lioemx1j2AjyUjRiWRzeROHHv\nFvody8yzzlE9L58dE6M5pEM0Szl5SQLhpp7IJOT8EMfklXQ47gdL85r/VziC\nDQ3fwEOi3CfshIJUZxm9tWYiLqe9YKKdu/6PqObjypbzqoLcgHltmcohOSaR\n4LaCclOi7KehE5nDXeIRId7naQxBcQIb8fTSgqiELthHLArax8soaupgtGW9\nM9EGa1MvEG5MWoin20CZoRpaqfL7l4/b8NGoy1tL6aTk7Og5h13Dt6MpUI23\nlOlH\r\n=jUZg\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_12.0.0_1581887035743_0.7762476752020004"},"_hasShrinkwrap":false},"12.0.1":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"12.0.1","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 10.13"},"main":"./index.js","types":"types","dependencies":{"debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","mkdirp":"^1.0.0","propagate":"^2.0.0"},"devDependencies":{"assert-rejects":"^1.0.0","chai":"^4.1.2","dirty-chai":"^2.0.1","dtslint":"^3.0.0","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^14.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-mocha":"^6.2.0","eslint-plugin-node":"^11.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^10.5.2","@sinonjs/fake-timers":"^6.0.0","mocha":"^7.0.1","npm-run-all":"^4.1.5","nyc":"^15.0.0","prettier":"1.19.0","proxyquire":"^2.1.0","request":"^2.83.0","rimraf":"^3.0.0","semantic-release":"^17.0.2","sinon":"^9.0.0","sinon-chai":"^3.3.0","superagent":"^5.0.2","tap":"14.6.1"},"scripts":{"format:fix":"prettier --write '**/*.{js,json,md,ts,yml,yaml}'","format":"prettier --check '**/*.{js,json,md,ts,yml,yaml}'","lint":"run-p lint:js lint:ts","lint:js":"eslint --cache --cache-location './.cache/eslint' '**/*.js'","lint:js:fix":"eslint --cache --cache-location './.cache/eslint' --fix '**/*.js'","lint:ts":"dtslint types","semantic-release":"semantic-release","test":"run-s test:mocha test:tap","test:coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","test:mocha":"nyc mocha $(grep -lr '^\\s*it(' tests)","test:tap":"tap --100 --coverage --coverage-report=text ./tests/test_*.js"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"1f47f1a1ee977df0414a9865d6f329247cb7398f","homepage":"https://github.com/nock/nock#readme","_id":"nock@12.0.1","_nodeVersion":"12.16.1","_npmVersion":"6.13.7","dist":{"integrity":"sha512-f5u5k7O5D2YXH2WEFQVLLPa36D5C0dxU9Lrg6KOuaFCMDt7yd1W4S3hbZClCMczxc4EZ0k1bEhPeMWSewrxYNw==","shasum":"6d497d01f23cb52c733545c97e09e8318f6af801","tarball":"https://registry.npmjs.org/nock/-/nock-12.0.1.tgz","fileCount":18,"unpackedSize":170014,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeTYRmCRA9TVsSAnZWagAAtkgP/0BtdlxSqHbkHK+QrP4W\nCdcdhko0+jFLdmUX4EzzGqhdjFNrON9xzEHK9xm4SJXvB1LMQ8yaYdY8UrDJ\nRliLA11TgPG58yDGI8bX95CyPxyiBgTvvLCezmR5qKxRRD4wnJPZ4L7mgovV\nG/bPHjLKZbccaLq1tOojpkAAJY9Jf8t4oROMjPjiVbP1o3aNg/TPiMykMQnM\n61qfL37LWgJU1ZfSt8aZNDTdq++TMs93e3N23wBy9xuW8MtBcp/uZ6wlgN4K\niJ/XYwSmFaO+OiuRKrgRRHfHByL7iFicGd39rrzo8oP9s54nngfSVAlfZlmH\ntlz/BGPtEv/Ge1cAord3kYBhPrVJSPiNk9g4G41F1m6aKF8B78OHloI6/DZE\nfTErFc/B2znk2KfaTJpOcaKUv/eNoHKRUSJ1hK2Jmj5Hsc7shtT7AMSzd4uD\n1CwmndOGEa1r2+jcGxjt+iTVMXU+lBxUEUsFIL18FgSz5rrbygGH8L6EMjm8\neZx9dS5A0D0mGb7SqVpGKYaSnghISwVoJutXpL+V/5IMGrotpM2MA6Bej0Sn\nISX9ZwuMzDeSDc7N8WruAt74Q9gJJHDRAoq7bI0cAwBywqFA6APypwATLzll\nVzyv5CHdAjUnEnBNQ/Tn5wkRzhezUH9DabozzklXsyYIua4qdz0Y8fxr8Kgi\nXNgb\r\n=XOII\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_12.0.1_1582138469574_0.767679341587123"},"_hasShrinkwrap":false},"12.0.2":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"12.0.2","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 10.13"},"main":"./index.js","types":"types","dependencies":{"debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","propagate":"^2.0.0"},"devDependencies":{"assert-rejects":"^1.0.0","chai":"^4.1.2","dirty-chai":"^2.0.1","dtslint":"^3.0.0","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^14.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-mocha":"^6.2.0","eslint-plugin-node":"^11.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^10.5.2","@sinonjs/fake-timers":"^6.0.0","mocha":"^7.0.1","npm-run-all":"^4.1.5","nyc":"^15.0.0","prettier":"1.19.0","proxyquire":"^2.1.0","request":"^2.83.0","rimraf":"^3.0.0","semantic-release":"^17.0.2","sinon":"^9.0.0","sinon-chai":"^3.3.0","superagent":"^5.0.2","tap":"14.6.1"},"scripts":{"format:fix":"prettier --write '**/*.{js,json,md,ts,yml,yaml}'","format":"prettier --check '**/*.{js,json,md,ts,yml,yaml}'","lint":"run-p lint:js lint:ts","lint:js":"eslint --cache --cache-location './.cache/eslint' '**/*.js'","lint:js:fix":"eslint --cache --cache-location './.cache/eslint' --fix '**/*.js'","lint:ts":"dtslint types","semantic-release":"semantic-release","test":"run-s test:mocha test:tap","test:coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","test:mocha":"nyc mocha $(grep -lr '^\\s*it(' tests)","test:tap":"tap --100 --coverage --coverage-report=text ./tests/test_*.js"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"fa3c237b75847f9589684c5c48c4b2f0bba54f0a","homepage":"https://github.com/nock/nock#readme","_id":"nock@12.0.2","_nodeVersion":"12.16.1","_npmVersion":"6.13.7","dist":{"integrity":"sha512-pTckyfP8QHvwXP/oX+zQuSIL3S/mWTd84ba4pOGZlS/FgRZyljv4C3ZyOjgMilvkydSaERML/aJEF13EBUuDTQ==","shasum":"47617b34738e026b29d2294b4579e35b27e6a4d3","tarball":"https://registry.npmjs.org/nock/-/nock-12.0.2.tgz","fileCount":18,"unpackedSize":169943,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeXAR5CRA9TVsSAnZWagAAIoUP/3Y0/SBZt6zj6hU13JJM\naeNMvXWUSpmiKT8JFZSgDcb7c4Km3u+VfIX/hjsLIcS+GFW8Wle4hxeGrTJ5\n1AkyFPanwhqZezWM02H35GCW7RS5m9f5VKRQFRM3APzr7YbQA+be1+3gTjFO\nBF7Z0Ok4l3MHfTZfPkkqaR6XsGkpu2u6l3oE8lSklsN7Bnalu+ALxAFKKbPK\nCM9YU4uc7PlU1cKmQQVnPFv2Rk+8TYvJdhENVS8vM/LOfo+OntBP2rKFNZs7\nNLTZRQc/P5m/jPPrPPtcjtB85LeH/V5os6q0c/ymi8q+6EgIFaALoGeO2Vd9\nqRWE4/FxQCqOsLXLXNimC/JUvh5cCuYx4Bgdv5a9082vVD7wgpUbbcGiqrWQ\nRjGfYLqxNlE3VhtMpBSD1IkbptmEOgw9ATGwjcoQS+vMasRe8OkvSRMray7z\nA1cBHm60uQN+ds0IeABFjgrHdedG9/1KEtkRC2Ru7YIgFCz170AtnVAWJBKD\natpI06gMa5SYyRKREcnekkZ1Q75jInEY+4AUOA3aDxYx5u3SerEU3UfPmDsi\n3Z3JqRdUSuAxMZ7vGzG7r0ezbKVES/UGPaBTYRiS2BhNPOileNmkijKv4CQu\nJGY24G7y0cXGNHxeKtIfUme4NxpqRCGvuB/3KO+KkJEIjDZnX1Nu8vsjaXNm\ncwox\r\n=DVX5\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_12.0.2_1583088761030_0.545384686258847"},"_hasShrinkwrap":false},"12.0.3":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"12.0.3","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 10.13"},"main":"./index.js","types":"types","dependencies":{"debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","propagate":"^2.0.0"},"devDependencies":{"assert-rejects":"^1.0.0","chai":"^4.1.2","dirty-chai":"^2.0.1","dtslint":"^3.0.0","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^14.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-mocha":"^6.2.0","eslint-plugin-node":"^11.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^10.5.2","@sinonjs/fake-timers":"^6.0.0","mocha":"^7.0.1","npm-run-all":"^4.1.5","nyc":"^15.0.0","prettier":"1.19.0","proxyquire":"^2.1.0","request":"^2.83.0","rimraf":"^3.0.0","semantic-release":"^17.0.2","sinon":"^9.0.0","sinon-chai":"^3.3.0","superagent":"^5.0.2","tap":"14.6.1"},"scripts":{"format:fix":"prettier --write '**/*.{js,json,md,ts,yml,yaml}'","format":"prettier --check '**/*.{js,json,md,ts,yml,yaml}'","lint":"run-p lint:js lint:ts","lint:js":"eslint --cache --cache-location './.cache/eslint' '**/*.js'","lint:js:fix":"eslint --cache --cache-location './.cache/eslint' --fix '**/*.js'","lint:ts":"dtslint types","semantic-release":"semantic-release","test":"run-s test:mocha test:tap","test:coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","test:mocha":"nyc mocha $(grep -lr '^\\s*it(' tests)","test:tap":"tap --100 --coverage --coverage-report=text ./tests/test_*.js"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","gitHead":"d81c26011e0b893891956e0939ddb33083a66948","homepage":"https://github.com/nock/nock#readme","_id":"nock@12.0.3","_nodeVersion":"12.16.1","_npmVersion":"6.13.7","dist":{"integrity":"sha512-QNb/j8kbFnKCiyqi9C5DD0jH/FubFGj5rt9NQFONXwQm3IPB0CULECg/eS3AU1KgZb/6SwUa4/DTRKhVxkGABw==","shasum":"83f25076dbc4c9aa82b5cdf54c9604c7a778d1c9","tarball":"https://registry.npmjs.org/nock/-/nock-12.0.3.tgz","fileCount":18,"unpackedSize":170196,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJecLnjCRA9TVsSAnZWagAAhJUQAJpZfbDyZn+jZlNvhCNi\njXu40g0RnDJajSmdiTUPYQCsrgtaJK1bc1/39udCOHProbKPdv/VuV/k0olw\nE61yfv3HSbjiGkHEAXy6q9mc3+8/IFKAswpATumQIFXUB5g6YjRlnvg8ecx/\ny+onmevQ9xEcOrXHoIyaqwpSQOBF1B3/YB/hUCpPri/lwRtoMdBJs+YQtNbH\n7XIAEdCgl63PJsoyC8/2arTxAvsFKNzLnAmr+Eezcwfbc8YBykCGV5fyqoqq\n5YbfoGHMAHjhllZxriileTFJ4Dk7WReSNeax+UGeAcQtek44sHsvcbe1BBwD\nVd6AC+9iNCYYfhP6k02RLFjBuGpXC8vBzwgfKR5ofHJawoqFueq6hu8Hyuep\nWzT8CDxzQWoQYka0fwDI59WwWPc7TEeJAp0SYk6saMwNaC790A/ZoyxRRCU6\nU5GS1h+KfFOPrf/SDYp0m30HaRRHBhnDh40mMrViRCLpKnMztCLUNYdA/Xv3\n0IQRxpjV2b/TI/DXK6rFhy14+SMNNquDGZlspv9tvKErQq5eZ/fWQ/1nOg90\n3vwSogeEy7APLZEqle0tDKhK2vV+55JXDDpuFDE2qDOW/9AV5g9rPSt8yS0z\n9/uDK9ryrUlLFVsQUKOQHKjIr4gKSOmuxqWB5Vp7dcj8cOa85mbL5Adl9M6B\nMr7m\r\n=33i7\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_12.0.3_1584445922908_0.3866230461449789"},"_hasShrinkwrap":false},"13.0.0-beta.1":{"name":"nock","description":"HTTP server mocking and expectations library for Node.js","tags":["Mock","HTTP","testing","isolation"],"version":"13.0.0-beta.1","author":{"name":"Pedro Teixeira","email":"pedro.teixeira@gmail.com"},"repository":{"type":"git","url":"git+https://github.com/nock/nock.git"},"bugs":{"url":"http://github.com/nock/nock/issues"},"engines":{"node":">= 10.13"},"main":"./index.js","types":"types","dependencies":{"debug":"^4.1.0","json-stringify-safe":"^5.0.1","lodash":"^4.17.13","propagate":"^2.0.0"},"devDependencies":{"@sinonjs/fake-timers":"^6.0.0","assert-rejects":"^1.0.0","chai":"^4.1.2","dirty-chai":"^2.0.1","dtslint":"^3.0.0","eslint":"^6.0.0","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^14.0.0","eslint-plugin-import":"^2.16.0","eslint-plugin-mocha":"^6.2.0","eslint-plugin-node":"^11.0.0","eslint-plugin-promise":"^4.1.1","eslint-plugin-standard":"^4.0.0","got":"^10.5.2","mocha":"^7.0.1","npm-run-all":"^4.1.5","nyc":"^15.0.0","prettier":"2.0.2","proxyquire":"^2.1.0","request":"^2.83.0","rimraf":"^3.0.0","semantic-release":"^17.0.2","sinon":"^9.0.0","sinon-chai":"^3.3.0","superagent":"^5.0.2","tap":"14.6.1"},"scripts":{"format:fix":"prettier --write '**/*.{js,json,md,ts,yml,yaml}'","format":"prettier --check '**/*.{js,json,md,ts,yml,yaml}'","lint":"run-p lint:js lint:ts","lint:js":"eslint --cache --cache-location './.cache/eslint' '**/*.js'","lint:js:fix":"eslint --cache --cache-location './.cache/eslint' --fix '**/*.js'","lint:ts":"dtslint types","semantic-release":"semantic-release","test":"run-s test:mocha test:tap","test:coverage":"tap --coverage-report=html && open coverage/lcov-report/index.html","test:mocha":"nyc mocha $(grep -lr '^\\s*it(' tests)","test:tap":"tap --100 --coverage --coverage-report=text ./tests/test_*.js"},"nyc":{"reporter":["lcov","text-summary"],"exclude":["tests/"]},"license":"MIT","readme":"# Nock\n\n[![npm](https://img.shields.io/npm/v/nock.svg)][npmjs]\n[![Build Status](https://travis-ci.org/nock/nock.svg)][build]\n![Coverage Status](http://img.shields.io/badge/coverage-100%25-brightgreen.svg)\n[![Greenkeeper](https://badges.greenkeeper.io/nock/nock.svg)](https://greenkeeper.io/)\n[![Backers on Open Collective](https://opencollective.com/nock/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/nock/sponsors/badge.svg)](#sponsors)\n\n[npmjs]: https://www.npmjs.com/package/nock\n[build]: https://travis-ci.org/nock/nock\n\nHTTP server mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n**Table of Contents**\n\n<!-- toc -->\n\n- [How does it work?](#how-does-it-work)\n- [Install](#install)\n  - [Node version support](#node-version-support)\n- [Usage](#usage)\n  - [READ THIS! - About interceptors](#read-this---about-interceptors)\n  - [Specifying hostname](#specifying-hostname)\n  - [Specifying path](#specifying-path)\n  - [Specifying request body](#specifying-request-body)\n  - [Specifying request query string](#specifying-request-query-string)\n  - [Specifying replies](#specifying-replies)\n    - [Access original request and headers](#access-original-request-and-headers)\n    - [Replying with errors](#replying-with-errors)\n  - [Specifying headers](#specifying-headers)\n    - [Header field names are case-insensitive](#header-field-names-are-case-insensitive)\n    - [Specifying Request Headers](#specifying-request-headers)\n    - [Specifying Reply Headers](#specifying-reply-headers)\n    - [Default Reply Headers](#default-reply-headers)\n    - [Including Content-Length Header Automatically](#including-content-length-header-automatically)\n    - [Including Date Header Automatically](#including-date-header-automatically)\n  - [HTTP Verbs](#http-verbs)\n  - [Support for HTTP and HTTPS](#support-for-http-and-https)\n  - [Non-standard ports](#non-standard-ports)\n  - [Repeat response n times](#repeat-response-n-times)\n  - [Delay the response body](#delay-the-response-body)\n  - [Delay the response](#delay-the-response)\n  - [Delay the connection](#delay-the-connection)\n  - [Socket timeout](#socket-timeout)\n  - [Chaining](#chaining)\n  - [Scope filtering](#scope-filtering)\n  - [Conditional scope filtering](#conditional-scope-filtering)\n  - [Path filtering](#path-filtering)\n  - [Request Body filtering](#request-body-filtering)\n  - [Request Headers Matching](#request-headers-matching)\n  - [Optional Requests](#optional-requests)\n  - [Allow **unmocked** requests on a mocked hostname](#allow-unmocked-requests-on-a-mocked-hostname)\n- [Expectations](#expectations)\n  - [.isDone()](#isdone)\n  - [.cleanAll()](#cleanall)\n  - [.abortPendingRequests()](#abortpendingrequests)\n  - [.persist()](#persist)\n  - [.pendingMocks()](#pendingmocks)\n  - [.activeMocks()](#activemocks)\n  - [.isActive()](#isactive)\n- [Logging](#logging)\n- [Restoring](#restoring)\n- [Activating](#activating)\n- [Turning Nock Off (experimental!)](#turning-nock-off-experimental)\n- [Enable/Disable real HTTP requests](#enabledisable-real-http-requests)\n  - [Disabling requests](#disabling-requests)\n  - [Enabling requests](#enabling-requests)\n  - [Resetting NetConnect](#resetting-netconnect)\n- [Recording](#recording)\n  - [`dont_print` option](#dont_print-option)\n  - [`output_objects` option](#output_objects-option)\n  - [`enable_reqheaders_recording` option](#enable_reqheaders_recording-option)\n  - [`logging` option](#logging-option)\n  - [`use_separator` option](#use_separator-option)\n  - [.removeInterceptor()](#removeinterceptor)\n- [Events](#events)\n  - [Global no match event](#global-no-match-event)\n- [Nock Back](#nock-back)\n  - [Setup](#setup)\n    - [Options](#options)\n  - [Usage](#usage-1)\n    - [Options](#options-1)\n      - [Example](#example)\n    - [Modes](#modes)\n- [Common issues](#common-issues)\n  - [Axios](#axios)\n  - [Memory issues with Jest](#memory-issues-with-jest)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [License](#license)\n\n<!-- tocstop -->\n\n## How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n## Install\n\n```sh\n$ npm install --save-dev nock\n```\n\n### Node version support\n\nThe latest version of nock supports all currently maintained Node versions, see [Node Release Schedule](https://github.com/nodejs/Release#release-schedule)\n\nHere is a list of past nock versions with respective node version support\n\n| node | nock       |\n| ---- | ---------- |\n| 0.10 | up to 8.x  |\n| 0.11 | up to 8.x  |\n| 0.12 | up to 8.x  |\n| 4    | up to 9.x  |\n| 5    | up to 8.x  |\n| 6    | up to 10.x |\n| 7    | up to 9.x  |\n| 8    | up to 11.x |\n| 9    | up to 9.x  |\n\n## Usage\n\nOn your test, you can setup your mocking object like this:\n\n```js\nconst nock = require('nock')\n\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, {\n    license: {\n      key: 'mit',\n      name: 'MIT License',\n      spdx_id: 'MIT',\n      url: 'https://api.github.com/licenses/mit',\n      node_id: 'MDc6TGljZW5zZTEz',\n    },\n  })\n```\n\nThis setup says that we will intercept every HTTP call to `https://api.github.com`.\n\nIt will intercept an HTTPS GET request to `/repos/atom/atom/license`, reply with\na status 200, and the body will contain a (partial) response in JSON.\n\n### READ THIS! - About interceptors\n\nWhen you setup an interceptor for a URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\nIf you don’t want interceptors to be removed as they are used, you can use the [.persist()](#persist) method.\n\n### Specifying hostname\n\nThe request hostname can be a string or a RegExp.\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'domain matched')\n```\n\n```js\nconst scope = nock(/example\\.com/)\n  .get('/resource')\n  .reply(200, 'domain regex matched')\n```\n\n> Note: You can choose to include or not the protocol in the hostname matching.\n\n### Specifying path\n\nThe request path can be a string, a RegExp or a filter function and you can use any [HTTP verb](#http-verbs).\n\nUsing a string:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/resource')\n  .reply(200, 'path matched')\n```\n\nUsing a regular expression:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(/source$/)\n  .reply(200, 'path using regex matched')\n```\n\nUsing a function:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get(uri => uri.includes('cats'))\n  .reply(200, 'path using function matched')\n```\n\n### Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications. There are five types of second argument allowed:\n\n**String**: nock will exact match the stringified request body with the provided string\n\n```js\nnock('http://www.example.com')\n  .post('/login', 'username=pgte&password=123456')\n  .reply(200, { id: '123ABC' })\n```\n\n**Buffer**: nock will exact match the stringified request body with the provided buffer\n\n```js\nnock('http://www.example.com')\n  .post('/login', Buffer.from([0xff, 0x11]))\n  .reply(200, { id: '123ABC' })\n```\n\n**RegExp**: nock will test the stringified request body against the provided RegExp\n\n```js\nnock('http://www.example.com')\n  .post('/login', /username=\\w+/gi)\n  .reply(200, { id: '123ABC' })\n```\n\n**JSON object**: nock will exact match the request body with the provided object. In order to increase flexibility, nock also supports RegExp as an attribute value for the keys:\n\n```js\nnock('http://www.example.com')\n  .post('/login', { username: 'pgte', password: /.+/i })\n  .reply(200, { id: '123ABC' })\n```\n\n**Function**: nock will evaluate the function providing the request body object as first argument. Return true if it should be considered a match:\n\n```js\nnock('http://www.example.com')\n  .post('/login', body => body.username && body.password)\n  .reply(200, { id: '123ABC' })\n```\n\nIn case you need to perform a partial matching on a complex, nested request body you should have a look at libraries like [lodash.matches](https://lodash.com/docs/#matches). Indeed, partial matching can be achieved as:\n\n```js\nnock('http://www.example.com')\n  .post('/user', _.matches({ address: { country: 'US' } }))\n  .reply(200, { id: '123ABC' })\n```\n\n### Specifying request query string\n\nNock understands query strings. Search parameters can be included as part of the path:\n\n```js\nnock('http://example.com').get('/users?foo=bar').reply(200)\n```\n\nInstead of placing the entire URL, you can specify the query part as an object:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({ name: 'pedro', surname: 'teixeira' })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nNock supports array-style/object-style query parameters. The encoding format matches with request module.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query({\n    names: ['alice', 'bob'],\n    tags: {\n      alice: ['admin', 'tester'],\n      bob: ['tester'],\n    },\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA `URLSearchParams` instance can be provided.\n\n```js\nconst params = new URLSearchParams({ foo: 'bar' })\n\nnock('http://example.com').get('/').query(params).reply(200)\n```\n\nNock supports passing a function to query. The function determines if the actual query matches or not.\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(actualQueryObject => {\n    // do some compare with the actual Query Object\n    // return true for matched\n    // return false for not matched\n    return true\n  })\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nTo mock the entire url regardless of the passed query string:\n\n```js\nnock('http://example.com')\n  .get('/users')\n  .query(true)\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\nA query string that is already [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) can be\nmatched by passing the `encodedQueryParams` flag in the options when creating the Scope.\n\n```js\nnock('http://example.com', { encodedQueryParams: true })\n  .get('/users')\n  .query('foo%5Bbar%5D%3Dhello%20world%21')\n  .reply(200, { results: [{ id: 'pgte' }] })\n```\n\n### Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com').get('/users/1').reply(404)\n```\n\nYou can also specify the reply body as a string:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n```\n\nor as a JSON-encoded object:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com').get('/').reply(200, {\n  username: 'pgte',\n  email: 'pedro.teixeira@gmail.com',\n  _id: '4324243fsd',\n})\n```\n\nor even as a file:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/')\n  .replyWithFile(200, __dirname + '/replies/user.json', {\n    'Content-Type': 'application/json',\n  })\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody) => requestBody)\n```\n\nIn Nock 11.x it was possible to invoke `.reply()` with a status code and a\nfunction that returns an array containing a status code and body. (The status\ncode from the array would take precedence over the one passed directly to\nreply.) This is no longer allowed. In 12.x, either call `.reply()` with a\nstatus code and a function that returns the body, or call it with a single\nargument: a function that returns an array containing both the status code and\nbody.\n\nAn asynchronous function that gets an error-first callback as its last argument also works:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply(201, (uri, requestBody, cb) => {\n    fs.readFile('cat-poems.txt', cb) // Error-first callback\n  })\n```\n\nIn Nock 11 and later, if an error is passed to the callback, Nock will rethrow it as a programmer error.\nIn Nock 10 and earlier, the error was sent in the response body, with a 500 HTTP response status code.\n\nYou can also return the status code and body using just one function:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody) => {\n    return [\n      201,\n      'THIS IS THE REPLY BODY',\n      { header: 'value' }, // optional headers\n    ]\n  })\n```\n\nor, use an error-first callback that also gets the status code:\n\n```js\nconst scope = nock('http://www.google.com')\n  .post('/echo')\n  .reply((uri, requestBody, cb) => {\n    setTimeout(() => cb(null, [201, 'THIS IS THE REPLY BODY']), 1000)\n  })\n```\n\nA Stream works too:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(200, (uri, requestBody) => {\n    return fs.createReadStream('cat-poems.txt')\n  })\n```\n\n#### Access original request and headers\n\nIf you're using the reply callback style, you can access the original client request using `this.req` like this:\n\n```js\nconst scope = nock('http://www.google.com')\n  .get('/cat-poems')\n  .reply(function (uri, requestBody) {\n    console.log('path:', this.req.path)\n    console.log('headers:', this.req.headers)\n    // ...\n  })\n```\n\n> Note: Remember to use normal `function` in that case, as arrow functions are using enclosing scope for `this` binding.\n\n#### Replying with errors\n\nYou can reply with an error like this:\n\n```js\nnock('http://www.google.com')\n  .get('/cat-poems')\n  .replyWithError('something awful happened')\n```\n\nJSON error responses are allowed too:\n\n```js\nnock('http://www.google.com').get('/cat-poems').replyWithError({\n  message: 'something awful happened',\n  code: 'AWFUL_ERROR',\n})\n```\n\n> Note: This will emit an `error` event on the `request` object, not the reply.\n\n### Specifying headers\n\n#### Header field names are case-insensitive\n\nPer [HTTP/1.1 4.2 Message Headers](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2) specification, all message headers are case insensitive and thus internally Nock uses lower-case for all field names even if some other combination of cases was specified either in mocking specification or in mocked requests themselves.\n\n#### Specifying Request Headers\n\nYou can specify the request headers like this:\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    authorization: 'Basic Auth',\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nOr you can use a regular expression or function to check the header values. The\nfunction will be passed the header value.\n\n```js\nconst scope = nock('http://www.example.com', {\n  reqheaders: {\n    'X-My-Headers': headerValue => headerValue.includes('cats'),\n    'X-My-Awesome-Header': /Awesome/i,\n  },\n})\n  .get('/')\n  .reply(200)\n```\n\nIf `reqheaders` is not specified or if `host` is not part of it, Nock will automatically add `host` value to request header.\n\nIf no request headers are specified for mocking then Nock will automatically skip matching of request headers. Since the `host` header is a special case which may get automatically inserted by Nock, its matching is skipped unless it was _also_ specified in the request being mocked.\n\nYou can also have Nock fail the request if certain headers are present:\n\n```js\nconst scope = nock('http://www.example.com', {\n  badheaders: ['cookie', 'x-forwarded-for'],\n})\n  .get('/')\n  .reply(200)\n```\n\nWhen invoked with this option, Nock will not match the request if any of the `badheaders` are present.\n\nBasic authentication can be specified as follows:\n\n```js\nconst scope = nock('http://www.example.com')\n  .get('/')\n  .basicAuth({ user: 'john', pass: 'doe' })\n  .reply(200)\n```\n\n#### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nconst scope = nock('https://api.github.com')\n  .get('/repos/atom/atom/license')\n  .reply(200, { license: 'MIT' }, { 'X-RateLimit-Remaining': 4999 })\n```\n\nOr you can use a function to generate the headers values. The function will be\npassed the request, response, and response body (if available). The body will\nbe either a buffer, a stream, or undefined.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .get('/')\n  .reply(200, 'Hello World!', {\n    'Content-Length': (req, res, body) => body.length,\n    ETag: () => `${Date.now()}`,\n  })\n```\n\n#### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json',\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\nOr you can use a function to generate the default headers values:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'Content-Length': (req, res, body) => body.length,\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too')\n```\n\n#### Including Content-Length Header Automatically\n\nWhen using `scope.reply()` to set a response body manually, you can have the\n`Content-Length` header calculated automatically.\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyContentLength()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n**NOTE:** this does not work with streams or other advanced means of specifying\nthe reply body.\n\n#### Including Date Header Automatically\n\nYou can automatically append a `Date` header to your mock reply:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate()\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\nOr provide your own `Date` object:\n\n```js\nconst scope = nock('http://www.headdy.com')\n  .replyDate(new Date(2015, 0, 1))\n  .get('/')\n  .reply(200, { hello: 'world' })\n```\n\n### HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nconst scope = nock('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304)\n```\n\n### Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nconst scope = nock('https://secure.my.server.com')\n// ...\n```\n\n### Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nconst scope = nock('http://my.server.com:8081')\n  ...\n```\n\n### Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com').get('/').times(4).reply(200, 'Ok')\n\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond body \"Ok\"\nhttp.get('http://zombo.com/') // respond with zombo.com result\n```\n\nSugar syntax\n\n```js\nnock('http://zombo.com').get('/').once().reply(200, 'Ok')\nnock('http://zombo.com').get('/').twice().reply(200, 'Ok')\nnock('http://zombo.com').get('/').thrice().reply(200, 'Ok')\n```\n\nTo repeat this response for as long as nock is active, use [.persist()](#persist).\n\n### Delay the response body\n\nYou are able to specify the number of milliseconds that the response body should be delayed. Response header will be replied immediately.\n`delayBody(1000)` is equivalent to `delay({body: 1000})`.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delayBody(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) will not emit its `'end'` event until after the delay.\n\n### Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds delay will be applied to the response header.\n  .reply(200, '<html></html>')\n```\n\n`delay()` could also be used as\n\n```\ndelay({\n   head: headDelayInMs,\n   body: bodyDelayInMs\n})\n```\n\nfor example\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay({\n    head: 2000, // header will be delayed for 2 seconds, i.e. the whole response will be delayed for 2 seconds.\n    body: 3000, // body will be delayed for another 3 seconds after header is sent out.\n  })\n  .reply(200, '<html></html>')\n```\n\n### Delay the connection\n\n`delayConnection(1000)` is equivalent to `delay({ head: 1000 })`.\n\n### Socket timeout\n\nYou are able to specify the number of milliseconds that your connection should be idle, to simulate a socket timeout.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .socketDelay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nTo test a request like the following:\n\n```js\nreq = http.request('http://my.server.com', res => {\n  ...\n})\nreq.setTimeout(1000, () => { req.abort() })\nreq.end()\n```\n\nNOTE: the timeout will be fired immediately, and will not leave the simulated connection idle for the specified period of time.\n\n### Chaining\n\nYou can chain behaviour like this:\n\n```js\nconst scope = nock('http://myapp.iriscouch.com')\n  .get('/users/1')\n  .reply(404)\n  .post('/users', {\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n  .reply(201, {\n    ok: true,\n    id: '123ABC',\n    rev: '946B7D1C',\n  })\n  .get('/users/123ABC')\n  .reply(200, {\n    _id: '123ABC',\n    _rev: '946B7D1C',\n    username: 'pgte',\n    email: 'pedro.teixeira@gmail.com',\n  })\n```\n\n### Scope filtering\n\nYou can filter the scope (protocol, domain or port) of nock through a function. The filtering function is accepted at the `filteringScope` field of the `options` argument.\n\nThis can be useful if you have a node module that randomly changes subdomains to which it sends requests, e.g., the Dropbox node module behaves like this.\n\n```js\nconst scope = nock('https://api.dropbox.com', {\n  filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n})\n  .get('/1/metadata/auto/Photos?include_deleted=false&list=true')\n  .reply(200)\n```\n\n### Conditional scope filtering\n\nYou can also choose to filter out a scope based on your system environment (or any external factor). The filtering function is accepted at the `conditionally` field of the `options` argument.\n\nThis can be useful if you only want certain scopes to apply depending on how your tests are executed.\n\n```js\nconst scope = nock('https://api.myservice.com', {\n  conditionally: () => true,\n})\n```\n\n### Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(/password=[^&]*/g, 'password=XXX')\n  .get('/users/1?password=XXX')\n  .reply(200, 'user')\n```\n\nOr you can use a function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringPath(path => '/ABC')\n  .get('/ABC')\n  .reply(200, 'user')\n```\n\nNote that `scope.filteringPath` is not cumulative: it should only be used once per scope.\n\n### Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n  .post('/users/1', 'data=ABC&password=XXX')\n  .reply(201, 'OK')\n```\n\nOr you can use a function to transform the body:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .filteringRequestBody(body => 'ABC')\n  .post('/', 'ABC')\n  .reply(201, 'OK')\n```\n\nIf you don't want to match the request body you should omit the `body` argument from the method function:\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .post('/some_uri') // no body argument\n  .reply(200, 'OK')\n```\n\n### Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('accept', 'application/json')\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('User-Agent', /Mozilla\\/.*/)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\nYou can also use a function for the header body.\n\n```js\nconst scope = nock('http://api.myservice.com')\n  .matchHeader('content-length', val => val >= 1000)\n  .get('/')\n  .reply(200, {\n    data: 'hello world',\n  })\n```\n\n### Optional Requests\n\nBy default every mocked request is expected to be made exactly once, and until it is it'll appear in `scope.pendingMocks()`, and `scope.isDone()` will return false (see [expectations](#expectations)). In many cases this is fine, but in some (especially cross-test setup code) it's useful to be able to mock a request that may or may not happen. You can do this with `optionally()`. Optional requests are consumed just like normal ones once matched, but they do not appear in `pendingMocks()`, and `isDone()` will return true for scopes with only optional requests pending.\n\n```js\nconst example = nock('http://example.com')\nexample.pendingMocks() // []\nexample.get('/pathA').reply(200)\nexample.pendingMocks() // [\"GET http://example.com:80/path\"]\n\n// ...After a request to example.com/pathA:\nexample.pendingMocks() // []\n\nexample.get('/pathB').optionally().reply(200)\nexample.pendingMocks() // []\n\n// You can also pass a boolean argument to `optionally()`. This\n// is useful if you want to conditionally make a mocked request\n// optional.\nconst getMock = optional =>\n  example.get('/pathC').optionally(optional).reply(200)\n\ngetMock(true)\nexample.pendingMocks() // []\ngetMock(false)\nexample.pendingMocks() // [\"GET http://example.com:80/pathC\"]\n```\n\n### Allow **unmocked** requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\nconst scope = nock('http://my.existing.service.com', { allowUnmocked: true })\n  .get('/my/url')\n  .reply(200, 'OK!')\n\n// GET /my/url => goes through nock\n// GET /other/url => actually makes request to the server\n```\n\n> Note: When applying `{allowUnmocked: true}`, if the request is made to the real server, no interceptor is removed.\n\n## Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nconst scope = nock('http://google.com')\n  .get('/')\n  .reply(200, 'Hello from Google!')\n\n// do some stuff\n\nsetTimeout(() => {\n  // Will throw an assertion error if meanwhile a \"GET http://google.com\" was\n  // not performed.\n  scope.done()\n}, 5000)\n```\n\n### .isDone()\n\nYou can call `isDone()` on a single expectation to determine if the expectation was met:\n\n```js\nconst scope = nock('http://google.com').get('/').reply(200)\n\nscope.isDone() // will return false\n```\n\nIt is also available in the global scope, which will determine if all expectations have been met:\n\n```js\nnock.isDone()\n```\n\n### .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll()\n```\n\n### .abortPendingRequests()\n\nYou can abort all current pending request like this:\n\n```js\nnock.abortPendingRequests()\n```\n\n### .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nconst scope = nock('http://example.com')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way')\n```\n\nNote that while a persisted scope will always intercept the requests, it is considered \"done\" after the first interception.\n\nIf you want to stop persisting an individual persisted mock you can call `persist(false)`:\n\n```js\nconst scope = nock('http://example.com').persist().get('/').reply(200, 'ok')\n\n// Do some tests ...\n\nscope.persist(false)\n```\n\nYou can also use `nock.cleanAll()` which removes all mocks, including persistent mocks.\n\nTo specify an exact number of times that nock should repeat the response, use [.times()](#repeat-response-n-times).\n\n### .pendingMocks()\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks()` function:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks())\n}\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('pending mocks: %j', nock.pendingMocks())\n```\n\n### .activeMocks()\n\nYou can see every mock that is currently active (i.e. might potentially reply to requests) in a scope using `scope.activeMocks()`. A mock is active if it is pending, optional but not yet completed, or persisted. Mocks that have intercepted their requests and are no longer doing anything are the only mocks which won't appear here.\n\nYou probably don't need to use this - it mainly exists as a mechanism to recreate the previous (now-changed) behavior of `pendingMocks()`.\n\n```js\nconsole.error('active mocks: %j', scope.activeMocks())\n```\n\nIt is also available in the global scope:\n\n```js\nconsole.error('active mocks: %j', nock.activeMocks())\n```\n\n### .isActive()\n\nYour tests may sometimes want to deactivate the nock interceptor.\nOnce deactivated, nock needs to be re-activated to work.\nYou can check if nock interceptor is active or not by using `nock.isActive()`.\nSample:\n\n```js\nif (!nock.isActive()) {\n  nock.activate()\n}\n```\n\n## Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nconst scope = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n## Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore()\n```\n\n**note 1**: restore does not clear the interceptor list. Use [nock.cleanAll()](#cleanall) if you expect the interceptor list to be empty.\n\n**note 2**: restore will also remove the http interceptor itself. You need to run [nock.activate()](#activating) to re-activate the http interceptor. Without re-activation, nock will not intercept any calls.\n\n## Activating\n\nOnly for cases where nock has been deactivated using [nock.restore()](#restoring), you can reactivate the HTTP interceptor to start intercepting HTTP calls using:\n\n```js\nnock.activate()\n```\n\n**note**: To check if nock HTTP interceptor is active or inactive, use [nock.isActive()](#isactive).\n\n## Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting the `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n## Enable/Disable real HTTP requests\n\nBy default, any requests made to a host that is not mocked will be executed normally. If you want to block these requests, nock allows you to do so.\n\n### Disabling requests\n\nFor disabling real http requests.\n\n```js\nnock.disableNetConnect()\n```\n\nSo, if you try to request any host not 'nocked', it will throw a `NetConnectNotAllowedError`.\n\n```js\nnock.disableNetConnect()\nconst req = http.get('http://google.com/')\nreq.on('error', err => {\n  console.log(err)\n})\n// The returned `http.ClientRequest` will emit an error event (or throw if you're not listening for it)\n// This code will log a NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\n### Enabling requests\n\nFor enabling any real HTTP requests (the default behavior):\n\n```js\nnock.enableNetConnect()\n```\n\nYou could allow real HTTP requests for certain host names by providing a string or a regular expression for the hostname, or a function that accepts the hostname and returns true or false:\n\n```js\n// Using a string\nnock.enableNetConnect('amazon.com')\n\n// Or a RegExp\nnock.enableNetConnect(/(amazon|github)\\.com/)\n\n// Or a Function\nnock.enableNetConnect(\n  host => host.includes('amazon.com') || host.includes('github.com')\n)\n\nhttp.get('http://www.amazon.com/')\nhttp.get('http://github.com/')\n\nhttp.get('http://google.com/')\n// This will throw NetConnectNotAllowedError with message:\n// Nock: Disallowed net connect for \"google.com:80\"\n```\n\nA common use case when testing local endpoints would be to disable all but localhost, then add in additional nocks for external requests:\n\n```js\nnock.disableNetConnect()\n// Allow localhost connections so we can test local routes and mock servers.\nnock.enableNetConnect('127.0.0.1')\n```\n\n### Resetting NetConnect\n\nWhen you're done with the test, you probably want to set everything back to normal:\n\n```js\nnock.cleanAll()\nnock.enableNetConnect()\n```\n\n## Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, especially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec()\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nRecording relies on intercepting real requests and responses and then persisting them for later use.\n\nIn order to stop recording you should call `nock.restore()` and recording will stop.\n\n**ATTENTION!:** when recording is enabled, nock does no validation, nor will any mocks be enabled. Please be sure to turn off recording before attempting to use any mocks in your tests.\n\n### `dont_print` option\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n})\n// ... some HTTP calls\nconst nockCalls = nock.recorder.play()\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done! You can call `nock.recorder.clear()` to remove already recorded calls from the array that `nock.recorder.play()` returns.\n\n(Remember that you should do this one test at a time).\n\n### `output_objects` option\n\nIn case you want to generate the code yourself or use the test data in some other way, you can pass the `output_objects` option to `rec`:\n\n```js\nnock.recorder.rec({\n  output_objects: true,\n})\n// ... some HTTP calls\nconst nockCallObjects = nock.recorder.play()\n```\n\nThe returned call objects have the following properties:\n\n- `scope` - the scope of the call including the protocol and non-standard ports (e.g. `'https://github.com:12345'`)\n- `method` - the HTTP verb of the call (e.g. `'GET'`)\n- `path` - the path of the call (e.g. `'/pgte/nock'`)\n- `body` - the body of the call, if any\n- `status` - the HTTP status of the reply (e.g. `200`)\n- `response` - the body of the reply which can be a JSON, string, hex string representing binary buffers or an array of such hex strings (when handling `content-encoded` in reply header)\n- `headers` - the headers of the reply\n- `reqheader` - the headers of the request\n\nIf you save this as a JSON file, you can load them directly through `nock.load(path)`. Then you can post-process them before using them in the tests. For example, to add request body filtering (shown here fixing timestamps to match the ones captured during recording):\n\n```js\nnocks = nock.load(pathToJson)\nnocks.forEach(function (nock) {\n  nock.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof body !== 'string' || typeof aRecordedBody !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(/(timestamp):([0-9]+)/g, function (\n        match,\n        key,\n        value\n      ) {\n        return key + ':' + recordedTimestamp\n      })\n    } else {\n      return body\n    }\n  }\n})\n```\n\nAlternatively, if you need to pre-process the captured nock definitions before\nusing them (e.g. to add scope filtering) then you can use `nock.loadDefs(path)`\nand `nock.define(nockDefs)`. Shown here is scope filtering for Dropbox node\nmodule which constantly changes the subdomain to which it sends the requests:\n\n```js\n//  Pre-process the nock definitions as scope filtering has to be defined before the nocks are defined (due to its very hacky nature).\nconst nockDefs = nock.loadDefs(pathToJson)\nnockDefs.forEach(def => {\n  //  Do something with the definition object e.g. scope filtering.\n  def.options = {\n    ...def.options,\n    filteringScope: scope => /^https:\\/\\/api[0-9]*.dropbox.com/.test(scope),\n  }\n})\n\n//  Load the nocks from pre-processed definitions.\nconst nocks = nock.define(nockDefs)\n```\n\n### `enable_reqheaders_recording` option\n\nRecording request headers by default is deemed more trouble than it's worth as some of them depend on the timestamp or other values that may change after the tests have been recorded thus leading to complex postprocessing of recorded tests. Thus by default the request headers are not recorded.\n\nThe genuine use cases for recording request headers (e.g. checking authorization) can be handled manually or by using `enable_reqheaders_recording` in `recorder.rec()` options.\n\n```js\nnock.recorder.rec({\n  dont_print: true,\n  output_objects: true,\n  enable_reqheaders_recording: true,\n})\n```\n\nNote that even when request headers recording is enabled Nock will never record `user-agent` headers. `user-agent` values change with the version of Node and underlying operating system and are thus useless for matching as all that they can indicate is that the user agent isn't the one that was used to record the tests.\n\n### `logging` option\n\nNock will print using `console.log` by default (assuming that `dont_print` is `false`). If a different function is passed into `logging`, nock will send the log string (or object, when using `output_objects`) to that function. Here's a basic example.\n\n```js\nconst appendLogToFile = content => {\n  fs.appendFile('record.txt', content)\n}\nnock.recorder.rec({\n  logging: appendLogToFile,\n})\n```\n\n### `use_separator` option\n\nBy default, nock will wrap its output with the separator string `<<<<<<-- cut here -->>>>>>` before and after anything it prints, whether to the console or a custom log function given with the `logging` option.\n\nTo disable this, set `use_separator` to false.\n\n```js\nnock.recorder.rec({\n  use_separator: false,\n})\n```\n\n### .removeInterceptor()\n\nThis allows removing a specific interceptor. This can be either an interceptor instance or options for a url. It's useful when there's a list of common interceptors shared between tests, where an individual test requires one of the shared interceptors to behave differently.\n\nExamples:\n\n```js\nnock.removeInterceptor({\n  hostname: 'localhost',\n  path: '/mockedResource',\n})\n```\n\n```js\nnock.removeInterceptor({\n  hostname : 'localhost',\n  path : '/login'\n  method: 'POST'\n  proto : 'https'\n})\n```\n\n```js\nconst interceptor = nock('http://example.org').get('somePath')\nnock.removeInterceptor(interceptor)\n```\n\n## Events\n\nA scope emits the following events:\n\n- `emit('request', function(req, interceptor, body))`\n- `emit('replied', function(req, interceptor))`\n\n### Global no match event\n\nYou can also listen for no match events like this:\n\n```js\nnock.emitter.on('no match', req => {})\n```\n\n## Nock Back\n\nFixture recording support and playback.\n\n### Setup\n\nYou must specify a fixture directory before using, for example:\n\nIn your test helper\n\n```js\nconst nockBack = require('nock').back\n\nnockBack.fixtures = '/path/to/fixtures/'\nnockBack.setMode('record')\n```\n\n#### Options\n\n- `nockBack.fixtures` : path to fixture directory\n- `nockBack.setMode()` : the mode to use\n\n### Usage\n\nBy default if the fixture doesn't exist, a `nockBack` will create a new fixture and save the recorded output\nfor you. The next time you run the test, if the fixture exists, it will be loaded in.\n\nThe `this` context of the callback function will have a property `scopes` to access all of the loaded\nnock scopes.\n\n```js\nconst nockBack = require('nock').back\nconst request = require('request')\nnockBack.setMode('record')\n\nnockBack.fixtures = __dirname + '/nockFixtures' //this only needs to be set once in your test helper\n\n// recording of the fixture\nnockBack('zomboFixture.json', nockDone => {\n  request.get('http://zombo.com', (err, res, body) => {\n    nockDone()\n\n    // usage of the created fixture\n    nockBack('zomboFixture.json', function (nockDone) {\n      http.get('http://zombo.com/').end() // respond body \"Ok\"\n\n      this.assertScopesFinished() //throws an exception if all nocks in fixture were not satisfied\n      http.get('http://zombo.com/').end() // throws exception because someFixture.json only had one call\n\n      nockDone() //never gets here\n    })\n  })\n})\n```\n\nIf your tests are using promises then use `nockBack` like this:\n\n```\nreturn nockBack('promisedFixture.json')\n  .then(({ nockDone, context }) => {\n    //  do your tests returning a promise and chain it with\n    //  `.then(nockDone)`\n  })\n})\n```\n\n#### Options\n\nAs an optional second parameter you can pass the following options\n\n- `before`: a preprocessing function, gets called before nock.define\n- `after`: a postprocessing function, gets called after nock.define\n- `afterRecord`: a postprocessing function, gets called after recording. Is passed the array of scopes recorded and should return the intact array, a modified version of the array, or if custom formatting is desired, a stringified version of the array to save to the fixture\n- `recorder`: custom options to pass to the recorder\n\n##### Example\n\n```js\nfunction prepareScope(scope) {\n  scope.filteringRequestBody = (body, aRecordedBody) => {\n    if (typeof(body) !== 'string' || typeof(aRecordedBody) !== 'string') {\n      return body\n    }\n\n    const recordedBodyResult = /timestamp:([0-9]+)/.exec(aRecordedBody)\n    if (recordedBodyResult) {\n      const recordedTimestamp = recordedBodyResult[1]\n      return body.replace(\n        /(timestamp):([0-9]+)/g,\n        (match, key, value) => `${key}:${recordedTimestamp}`\n      )\n    } else {\n      return body\n    }\n  }\n}\n\nnockBack('zomboFixture.json', { before: prepareScope }, nockDone => {\n  request.get('http://zombo.com', function(err, res, body) {\n    // do your tests\n    nockDone()\n  }\n}\n```\n\n#### Modes\n\nTo set the mode call `nockBack.setMode(mode)` or run the tests with the `NOCK_BACK_MODE` environment variable set before loading nock. If the mode needs to be changed programmatically, the following is valid: `nockBack.setMode(nockBack.currentMode)`\n\n- wild: all requests go out to the internet, don't replay anything, doesn't record anything\n\n- dryrun: The default, use recorded nocks, allow http calls, doesn't record anything, useful for writing new tests\n\n- record: use recorded nocks, record new nocks\n\n- lockdown: use recorded nocks, disables all http calls even when not nocked, doesn't record\n\n## Common issues\n\n**\"No match for response\" when using got with error responses**\n\n[Got][] automatically retries failed requests twice. That means if you have a\ntest which mocks a 4xx or 5xx response, got will immediately reissue it. At\nthat point, the mock will have been consumed and the second request will error\nout with **Nock: No match for request**.\n\nThe same is true for `.replyWithError()`.\n\nAdding `{ retry: 0 }` to the `got` invocations will disable retrying, e.g.:\n\n```\nawait got(\"http://example.test/\", { retry: 0 })\n```\n\nIf you need to do this in all your tests, you can create a module\n`got_client.js` which exports a custom got instance:\n\n```\nconst got = require('got')\n\nmodule.exports = got.extend({ retry: 0 })\n```\n\nThis is how it's handled in Nock itself (see [#1523][]).\n\n[got]: https://github.com/sindresorhus/got\n[#1523]: https://github.com/nock/nock/issues/1523\n\n### Axios\n\nTo use Nock with [Axios][], you may need to configure Axios to use the Node\nadapter as in the example below:\n\n```js\nimport axios from 'axios'\nimport nock from 'nock'\nimport test from 'ava' // You can use any test framework.\n\n// If you are using jsdom, axios will default to using the XHR adapter which\n// can't be intercepted by nock. So, configure axios to use the node adapter.\n//\n// References:\n// https://github.com/nock/nock/issues/699#issuecomment-272708264\n// https://github.com/axios/axios/issues/305\naxios.defaults.adapter = require('axios/lib/adapters/http')\n\ntest('can fetch test response', async t => {\n  // Set up the mock request.\n  const scope = nock('http://localhost')\n    .get('/test')\n    .reply(200, 'test response')\n\n  // Make the request. Note that the hostname must match exactly what is passed\n  // to `nock()`. Alternatively you can set `axios.defaults.host = 'http://localhost'`\n  // and run `axios.get('/test')`.\n  await axios.get('http://localhost/test')\n\n  // Assert that the expected request was made.\n  scope.done()\n})\n```\n\n[axios]: https://github.com/axios/axios\n\n### Memory issues with Jest\n\nMemory issues can be avoided by calling [`nock.restore()`](#restoring) after each test suite.  \nOne of the core principles of [Jest](https://jestjs.io/) is that it runs tests in isolation.\nIt does this by manipulating the modules cache of Node in a way that conflicts with how Nock monkey patches the builtin `http` and `https` modules.\n[Related issue with more details](https://github.com/nock/nock/issues/1817).\n\n## Debugging\n\nNock uses [`debug`](https://github.com/visionmedia/debug), so just run with environmental variable `DEBUG` set to `nock.*`.\n\n```js\n$ DEBUG=nock.* node my_test.js\n```\n\n## Contributing\n\nThanks for wanting to contribute! Take a look at our [Contributing Guide](CONTRIBUTING.md) for notes on our commit message conventions and how to run tests.\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project you agree to abide by its terms.\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://github.com/all-contributors/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars1.githubusercontent.com/u/47910?v=4\" width=\"100px;\" alt=\"Pedro Teixeira\"/><br /><sub><b>Pedro Teixeira</b></sub>](http://pgte.me)<br />[💻](https://github.com/nock/nock/commits?author=pgte \"Code\") [🚧](#maintenance-pgte \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/10771967?v=4\" width=\"100px;\" alt=\"n30n0v\"/><br /><sub><b>n30n0v</b></sub>](https://github.com/n30n0v)<br />[💻](https://github.com/nock/nock/commits?author=n30n0v \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/910753?v=4\" width=\"100px;\" alt=\"Richard Littauer\"/><br /><sub><b>Richard Littauer</b></sub>](https://burntfen.com)<br />[🚧](#maintenance-RichardLitt \"Maintenance\") [💻](https://github.com/nock/nock/commits?author=RichardLitt \"Code\") [📝](#blog-RichardLitt \"Blogposts\") | [<img src=\"https://avatars1.githubusercontent.com/u/3731165?v=4\" width=\"100px;\" alt=\"Ian Walker-Sperber\"/><br /><sub><b>Ian Walker-Sperber</b></sub>](http://ianwsperber.com)<br />[💻](https://github.com/nock/nock/commits?author=ianwsperber \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/1505203?v=4\" width=\"100px;\" alt=\"Ivan Erceg\"/><br /><sub><b>Ivan Erceg</b></sub>](http://ilovacha.com)<br />[💻](https://github.com/nock/nock/commits?author=ierceg \"Code\") [🚧](#maintenance-ierceg \"Maintenance\") | [<img src=\"https://avatars2.githubusercontent.com/u/1487036?v=4\" width=\"100px;\" alt=\"Paul Melnikow\"/><br /><sub><b>Paul Melnikow</b></sub>](https://twitter.com/paulmelnikow)<br />[💻](https://github.com/nock/nock/commits?author=paulmelnikow \"Code\") [🚧](#maintenance-paulmelnikow \"Maintenance\") | [<img src=\"https://avatars3.githubusercontent.com/u/39992?v=4\" width=\"100px;\" alt=\"Gregor Martynus\"/><br /><sub><b>Gregor Martynus</b></sub>](https://twitter.com/gr2m)<br />[💻](https://github.com/nock/nock/commits?author=gr2m \"Code\") [🚧](#maintenance-gr2m \"Maintenance\") [💼](#business-gr2m \"Business development\") [💵](#financial-gr2m \"Financial\") [📝](#blog-gr2m \"Blogposts\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/6701030?v=4\" width=\"100px;\" alt=\"Hutson Betts\"/><br /><sub><b>Hutson Betts</b></sub>](https://gitlab.com/hutson)<br />[💵](#financial-hutson \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/6105119?v=4\" width=\"100px;\" alt=\"Jonas Lilja\"/><br /><sub><b>Jonas Lilja</b></sub>](http://lilja.io)<br />[💵](#financial-jlilja \"Financial\") [💻](https://github.com/nock/nock/commits?author=jlilja \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/4446950?v=4\" width=\"100px;\" alt=\"Benjamin Ki\"/><br /><sub><b>Benjamin Ki</b></sub>](https://github.com/benrki)<br />[💵](#financial-benrki \"Financial\") | [<img src=\"https://avatars2.githubusercontent.com/u/3250463?v=4\" width=\"100px;\" alt=\"Chad Fawcett\"/><br /><sub><b>Chad Fawcett</b></sub>](http://chadf.ca)<br />[💵](#financial-chadfawcett \"Financial\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/nock#sponsor)]\n\n<a href=\"https://opencollective.com/nock/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/nock/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/nock/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](LICENSE)\n\nCopyright (c) 2011–2019 [Pedro Teixeira](http://about.me/pedroteixeira) and other [contributors](https://github.com/nock/nock/graphs/contributors).\n","readmeFilename":"README.md","gitHead":"f9a84a0efab298dba5dc945f0098542420ab9b5b","homepage":"https://github.com/nock/nock#readme","_id":"nock@13.0.0-beta.1","_nodeVersion":"12.16.1","_npmVersion":"6.13.7","dist":{"integrity":"sha512-+/R3eP7PwNYCykq5ggx3oX38r5HFScCN+XfeKHWPATlJR3GwBLK9gbz3oY1i9+7Faqd19kKFrfw36hfUiDxjIQ==","shasum":"bb4cf8590909436fffccfa0093ed4b6a93699f79","tarball":"https://registry.npmjs.org/nock/-/nock-13.0.0-beta.1.tgz","fileCount":18,"unpackedSize":169843,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJegq6PCRA9TVsSAnZWagAAAhwP/0qdTEuXG6HQL4YQfeLG\nQ08uCGaAVRCkXdE+BboxS7SJEIDjSIQ0NUOD1YXyzPzCBgdNSekUJnjXtPF7\npI60KMJHFb18bz2OO6v7VHkWIe8cdZd0KkCU6DmxeoDqzfmCS4fAo3CplJzl\nnwWeEsYnsG++o531LlJSb/ftd0GRdJDTH4P8dgW/75SQSYIgaVDhWEy0CmUQ\nTH5JLzPySq22Sh44qmRHhy2LNdoZvbcffdRZpQS6XSNTSie+nhrbH96Z4NNM\nHAzfQw/wN6mH19YiiCsroTF3a4OWHytkKNHEl3L1GC6y9PrrlAur2p5rEmsv\n20gyO6jaXc1PYyn1xX47Xr+dE+iHDveqTVrCWkM3e63rAJC3mkO7Y83xLQwy\nTf6M5DNbmAcxdCdDf1IN9EcBDfvgQcqgisuJ0OFLnWbn1BH5Ud3NN0ByUIKf\nyMvX/SFRi/BMyW3YtLa+uq5N9MnFc96p+788VCmXOCEN+TAepNDZnwFPGQzu\nFoNrDOHPZ5Oh4UKaSMA10tg0My/I2ohzWb47hRYoJOFu1I+IPS/Q5ne+dwPL\nFahRxW/gkP+rFxDV0DSQtSEQfz/D6k8BsvySllyMfWJykRdVn/Qx3dZZazlf\nBngpFJMw6R6uqV1yjclxmOl3QxHXzH90H7ZsX1pzxlS42lYnNkM6++XclwuT\nG147\r\n=A3vu\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"_npmUser":{"name":"nockbot","email":"nockbot@martynus.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/nock_13.0.0-beta.1_1585622671280_0.41681575697738316"},"_hasShrinkwrap":false}},"bugs":{"url":"http://github.com/nock/nock/issues"},"maintainers":[{"email":"gregor@martynus.net","name":"gr2m"},{"email":"nockbot@martynus.net","name":"nockbot"},{"email":"i@pgte.me","name":"pgte"}],"time":{"0.9.2":"2012-02-11T19:38:20.184Z","0.24.2":"2013-12-03T11:18:53.146Z","0.10.3":"2012-03-02T14:00:17.583Z","0.5.2":"2011-12-01T19:36:36.643Z","1.2.0":"2015-03-16T10:37:04.299Z","7.2.1":"2016-02-15T17:00:31.926Z","0.56.0":"2015-01-07T20:29:59.528Z","0.17.5":"2013-04-29T10:10:46.242Z","1.1.0":"2015-03-05T17:30:08.915Z","1.0.0":"2015-03-04T11:45:40.297Z","0.32.3":"2014-05-28T09:34:02.231Z","0.8.2":"2012-02-06T12:42:57.392Z","0.11.4":"2012-03-28T08:50:50.568Z","4.0.0":"2015-12-28T15:39:04.828Z","0.1.0":"2011-09-22T18:03:19.918Z","2.6.0":"2015-06-16T09:15:18.956Z","0.10.4":"2012-03-02T14:09:22.280Z","1.8.0":"2015-05-04T08:20:42.898Z","2.2.0":"2015-05-21T10:54:26.648Z","3.4.0":"2015-12-06T16:39:30.918Z","2.7.0":"2015-07-02T10:33:31.703Z","2.4.0":"2015-06-06T17:46:45.187Z","0.3.1":"2011-10-20T17:22:09.454Z","0.21.0":"2013-07-16T23:09:13.264Z","0.36.0":"2014-06-17T10:31:42.619Z","created":"2011-09-22T10:38:30.179Z","0.11.1":"2012-03-19T15:50:28.282Z","0.11.2":"2012-03-20T09:31:07.366Z","1.3.0":"2015-03-27T17:35:35.422Z","0.9.3":"2012-02-11T20:34:29.469Z","0.59.1":"2015-01-30T22:57:57.199Z","0.13.3":"2012-06-11T22:35:26.097Z","0.13.2":"2012-05-30T07:55:19.934Z","0.1.5":"2011-09-23T11:55:44.202Z","0.52.1":"2014-12-16T14:18:30.669Z","0.0.1":"2011-09-22T10:38:31.847Z","0.42.3":"2014-07-30T23:46:25.958Z","2.18.1":"2015-11-13T11:17:30.651Z","2.9.1":"2015-07-21T11:23:00.296Z","1.2.1":"2015-03-23T16:15:33.405Z","0.13.5":"2012-10-27T08:51:03.809Z","0.46.1":"2014-09-08T09:31:35.300Z","0.44.3":"2014-08-14T16:48:30.835Z","0.44.2":"2014-08-12T18:39:26.654Z","0.19.0":"2013-07-16T12:00:53.651Z","0.32.0":"2014-05-24T22:14:12.035Z","2.17.0":"2015-10-29T16:56:19.740Z","0.17.0":"2013-04-01T14:43:17.287Z","5.0.0":"2016-01-05T16:46:57.660Z","0.15.2":"2013-02-05T10:37:42.302Z","0.26.0":"2013-12-17T08:47:53.405Z","2.12.0":"2015-09-17T10:59:34.477Z","0.10.7":"2012-03-08T09:51:00.237Z","0.29.0":"2014-05-06T08:37:10.908Z","0.29.1":"2014-05-08T08:46:08.218Z","2.1.0":"2015-05-21T10:35:59.032Z","2.18.0-alpha.1":"2015-11-09T15:51:18.296Z","0.33.0":"2014-06-05T08:42:45.023Z","1.6.1":"2015-04-21T16:04:43.620Z","2.3.1":"2015-06-09T12:08:44.772Z","2.4.1":"2015-06-09T12:14:16.982Z","0.14.4":"2013-01-29T10:36:24.165Z","0.9.1":"2012-02-10T16:37:57.712Z","0.8.4":"2012-02-10T10:28:07.591Z","1.5.0":"2015-04-06T14:12:18.585Z","2.8.0":"2015-07-20T08:52:50.988Z","0.55.0":"2015-01-06T12:17:33.697Z","0.58.0":"2015-01-26T16:03:53.002Z","3.3.2":"2015-11-25T11:27:30.979Z","0.8.0":"2012-02-06T10:26:24.901Z","0.32.2":"2014-05-26T09:00:12.724Z","0.4.0":"2011-11-30T16:04:52.324Z","0.52.0":"2014-12-12T09:11:19.831Z","0.42.1":"2014-07-09T20:18:19.559Z","0.5.1":"2011-12-01T19:25:57.298Z","7.4.0":"2016-03-04T20:25:43.164Z","0.2.2":"2011-10-13T23:39:39.893Z","0.18.0":"2013-05-03T08:23:56.479Z","2.10.0":"2015-08-05T09:30:01.538Z","3.5.0":"2015-12-16T11:04:33.601Z","1.7.0":"2015-04-24T21:45:48.280Z","0.57.0":"2015-01-15T22:09:14.451Z","4.1.0":"2016-01-04T09:43:52.924Z","0.36.1":"2014-06-17T11:23:10.159Z","0.1.6":"2011-09-25T12:07:07.720Z","0.34.0":"2014-06-05T10:23:48.257Z","0.31.0":"2014-05-13T08:31:44.617Z","2.9.0":"2015-07-20T10:51:34.700Z","3.3.1":"2015-11-25T09:01:54.361Z","2.0.0":"2015-05-09T18:28:31.904Z","0.30.1":"2014-05-12T13:52:38.293Z","2.11.0":"2015-09-14T13:28:51.037Z","0.41.0":"2014-07-04T17:21:32.209Z","7.1.0":"2016-01-29T12:10:03.930Z","0.17.4":"2013-04-29T10:08:11.269Z","2.3.0":"2015-05-28T11:00:15.741Z","0.28.0":"2014-04-16T20:03:31.447Z","0.51.0":"2014-11-25T08:56:03.717Z","7.5.0":"2016-03-20T18:01:35.814Z","3.0.0":"2015-11-16T09:35:54.112Z","0.16.0":"2013-02-21T10:04:48.497Z","0.40.0":"2014-06-27T18:32:32.202Z","0.28.1":"2014-04-16T20:08:30.118Z","0.35.0":"2014-06-17T08:33:12.754Z","0.6.2":"2012-01-02T12:25:29.214Z","0.31.2":"2014-05-20T13:18:00.528Z","0.1.3":"2011-09-23T09:17:25.040Z","0.11.6":"2012-04-02T13:42:00.369Z","0.7.2":"2012-01-18T12:11:28.630Z","7.0.0":"2016-01-25T09:49:17.735Z","0.59.0":"2015-01-30T09:29:08.833Z","0.52.4":"2014-12-20T21:13:51.109Z","0.36.2":"2014-06-17T11:51:12.874Z","0.6.3":"2012-01-03T11:21:20.089Z","0.15.1":"2013-02-04T17:50:20.009Z","0.45.0":"2014-08-16T21:14:28.396Z","2.5.0":"2015-06-11T14:08:21.786Z","0.31.3":"2014-05-21T18:24:36.205Z","0.28.2":"2014-04-16T20:37:35.140Z","0.27.0":"2013-12-17T08:51:29.940Z","5.5.0":"2016-01-19T09:33:59.884Z","0.2.1":"2011-10-10T08:18:35.824Z","0.42.2":"2014-07-24T10:17:13.241Z","3.1.0":"2015-11-17T11:33:22.766Z","0.10.1":"2012-02-12T15:18:39.793Z","0.14.3":"2012-12-30T23:50:50.539Z","0.2.0":"2011-10-07T21:36:09.744Z","0.24.0":"2013-12-03T10:29:46.246Z","2.15.0":"2015-10-10T16:38:05.421Z","0.14.0":"2012-11-22T10:41:07.422Z","0.15.3":"2013-02-21T09:59:18.575Z","0.52.2":"2014-12-17T22:06:39.698Z","0.20.0":"2013-07-16T21:53:47.679Z","0.54.0":"2015-01-05T15:13:51.573Z","0.14.2":"2012-12-07T12:24:45.025Z","0.30.0":"2014-05-10T10:52:49.276Z","0.52.3":"2014-12-20T20:47:06.591Z","0.17.1":"2013-04-02T22:56:48.201Z","0.39.0":"2014-06-26T10:48:27.831Z","5.2.1":"2016-01-08T09:48:13.813Z","1.6.0":"2015-04-10T11:19:16.061Z","0.12.2":"2012-04-20T09:21:12.935Z","3.1.1":"2015-11-19T16:37:19.866Z","0.14.1":"2012-12-03T16:03:52.116Z","0.3.0":"2011-10-20T08:49:47.349Z","0.18.1":"2013-05-22T09:07:23.714Z","0.25.0":"2013-12-03T11:31:05.870Z","0.48.0":"2014-09-23T21:54:11.023Z","2.18.2":"2015-11-13T11:54:09.827Z","2.16.1":"2015-10-29T09:38:45.341Z","5.1.0":"2016-01-07T10:39:59.253Z","7.7.0":"2016-03-25T17:41:06.315Z","0.7.0":"2012-01-03T16:22:30.747Z","0.50.0":"2014-11-14T09:28:39.676Z","0.10.8":"2012-03-14T10:54:41.829Z","0.6.0":"2011-12-19T15:54:56.184Z","0.11.5":"2012-03-28T09:05:13.120Z","modified":"2020-03-31T02:44:33.815Z","7.3.0":"2016-02-24T14:17:13.097Z","0.44.1":"2014-08-07T22:28:26.097Z","1.4.0":"2015-03-30T17:26:43.772Z","7.6.0":"2016-03-25T10:37:56.484Z","0.10.5":"2012-03-02T14:13:37.563Z","0.48.1":"2014-10-16T21:34:04.733Z","3.3.0":"2015-11-24T09:23:57.311Z","0.10.2":"2012-02-25T14:41:24.281Z","0.24.1":"2013-12-03T10:39:58.800Z","5.3.1":"2016-01-08T15:19:34.299Z","0.32.1":"2014-05-25T10:30:04.896Z","2.13.0":"2015-09-25T12:05:30.755Z","0.1.2":"2011-09-23T09:04:49.562Z","0.48.2":"2014-10-29T15:11:06.548Z","3.2.0":"2015-11-23T09:43:18.901Z","0.13.4":"2012-09-05T10:03:43.427Z","0.5.6":"2011-12-02T16:53:01.135Z","0.42.0":"2014-07-08T23:11:59.672Z","0.8.3":"2012-02-06T19:43:11.329Z","5.4.0":"2016-01-18T12:11:49.904Z","0.5.5":"2011-12-02T11:22:55.282Z","3.6.0":"2015-12-23T12:00:10.552Z","0.1.7":"2011-09-25T12:09:08.069Z","6.0.0":"2016-01-21T09:45:33.934Z","0.43.1":"2014-08-04T20:05:02.711Z","0.13.6":"2012-11-19T10:22:11.280Z","6.0.1":"2016-01-25T09:20:16.392Z","0.27.3":"2014-03-27T09:30:01.088Z","0.12.0":"2012-04-13T11:33:09.219Z","0.12.1":"2012-04-13T11:38:44.228Z","0.23.0":"2013-11-11T14:26:50.012Z","2.0.1":"2015-05-09T18:37:04.982Z","0.5.4":"2011-12-01T22:07:47.333Z","0.46.0":"2014-08-29T08:48:26.260Z","0.28.3":"2014-04-28T13:23:51.274Z","0.5.0":"2011-12-01T00:23:11.982Z","0.34.1":"2014-06-09T10:42:12.744Z","0.29.2":"2014-05-09T16:04:07.996Z","2.18.0-alpha.2":"2015-11-11T10:40:54.279Z","0.5.3":"2011-12-01T21:59:05.958Z","0.20.1":"2013-07-16T23:03:06.947Z","0.13.7":"2012-11-21T15:26:28.121Z","0.31.1":"2014-05-15T12:50:31.046Z","5.2.0":"2016-01-07T10:55:26.387Z","0.37.0":"2014-06-23T09:04:45.599Z","0.47.0":"2014-09-10T17:28:09.800Z","0.17.3":"2013-04-11T10:04:16.024Z","0.44.0":"2014-08-05T17:37:26.932Z","0.49.0":"2014-10-16T21:33:50.010Z","7.2.2":"2016-02-19T12:14:21.254Z","0.6.1":"2012-01-02T12:23:54.777Z","0.22.0":"2013-07-17T08:48:39.048Z","0.13.0":"2012-05-12T18:24:51.682Z","0.17.2":"2013-04-03T09:19:05.434Z","0.10.0":"2012-02-12T14:54:52.439Z","1.7.1":"2015-04-27T11:08:25.654Z","0.27.1":"2013-12-24T12:35:23.800Z","0.12.3":"2012-05-11T06:39:06.455Z","0.7.1":"2012-01-18T12:09:30.654Z","0.5.7":"2011-12-19T14:20:23.495Z","0.11.3":"2012-03-27T09:56:27.193Z","0.18.2":"2013-05-22T10:50:27.206Z","0.1.4":"2011-09-23T09:54:57.165Z","0.27.2":"2014-01-27T08:49:04.402Z","3.4.1":"2015-12-15T16:48:39.885Z","7.0.2":"2016-01-27T16:58:16.908Z","7.2.0":"2016-02-15T09:34:58.406Z","0.11.0":"2012-03-19T11:33:14.565Z","0.43.0":"2014-08-01T14:08:33.416Z","0.10.6":"2012-03-07T10:00:21.331Z","5.3.0":"2016-01-08T15:16:40.082Z","1.9.0":"2015-05-05T08:39:21.580Z","0.53.0":"2015-01-02T18:24:54.334Z","0.22.1":"2013-07-24T13:05:17.012Z","0.15.0":"2013-02-04T10:26:25.872Z","7.0.1":"2016-01-27T09:33:15.163Z","0.7.3":"2012-01-18T12:13:07.133Z","2.18.0":"2015-11-11T10:41:25.573Z","2.16.0":"2015-10-28T13:00:39.287Z","0.38.0":"2014-06-26T10:08:44.283Z","7.7.2":"2016-03-25T22:57:38.381Z","7.7.3":"2016-04-04T11:16:55.139Z","8.0.0":"2016-04-06T09:54:32.148Z","8.1.0":"2016-10-10T16:03:47.642Z","8.2.0":"2016-10-23T12:02:57.570Z","9.0.0":"2016-10-23T13:27:04.671Z","9.0.1":"2016-10-28T07:29:34.475Z","8.2.1":"2016-10-28T07:36:34.316Z","9.0.2":"2016-10-28T08:06:24.265Z","9.0.3":"2017-02-06T18:18:09.162Z","9.0.4":"2017-02-08T00:10:52.397Z","9.0.5":"2017-02-10T17:29:59.799Z","9.0.6":"2017-02-13T20:17:02.823Z","9.0.7":"2017-02-23T21:52:41.446Z","9.0.8":"2017-02-27T23:50:41.177Z","9.0.9":"2017-02-28T18:32:25.948Z","9.0.10":"2017-03-28T17:46:39.889Z","9.0.11":"2017-03-29T20:39:08.338Z","9.0.12":"2017-04-10T17:49:59.305Z","9.0.13":"2017-04-10T20:17:59.154Z","9.0.14":"2017-07-17T10:08:26.095Z","9.0.15":"2017-09-18T23:38:18.547Z","9.0.16":"2017-09-19T03:31:26.912Z","9.0.17":"2017-09-20T00:55:23.238Z","9.0.18":"2017-09-21T03:56:26.311Z","9.0.19":"2017-09-23T00:37:53.500Z","9.0.20":"2017-09-24T07:30:39.670Z","9.0.21":"2017-09-25T18:41:01.518Z","9.0.22":"2017-09-28T03:14:40.979Z","8.2.2":"2017-10-15T22:47:00.008Z","9.0.23":"2017-10-20T23:40:30.572Z","9.0.24":"2017-10-20T23:43:02.477Z","9.0.25":"2017-10-23T22:50:05.675Z","9.0.26":"2017-10-28T23:04:57.160Z","9.0.27":"2017-10-28T23:19:16.700Z","9.0.28":"2017-11-06T05:53:12.791Z","9.1.0":"2017-11-08T04:15:37.203Z","9.1.1":"2017-11-24T21:49:49.047Z","9.1.2":"2017-11-24T21:53:12.220Z","9.1.3":"2017-11-25T19:21:53.608Z","9.1.4":"2017-12-02T00:03:27.278Z","9.1.5":"2017-12-20T02:11:31.795Z","9.1.6":"2018-01-08T19:05:50.622Z","9.1.7":"2018-02-21T20:28:28.249Z","9.1.8":"2018-02-21T20:52:56.711Z","9.1.9":"2018-02-21T21:14:20.086Z","9.1.10":"2018-02-24T03:39:16.528Z","9.2.0":"2018-02-24T18:04:23.627Z","9.2.1":"2018-02-24T20:04:47.031Z","9.2.2":"2018-02-26T20:53:27.610Z","9.2.3":"2018-02-27T17:14:43.290Z","9.2.4":"2018-04-09T22:11:39.565Z","9.2.5":"2018-04-10T19:25:42.940Z","9.2.6":"2018-05-14T22:55:02.095Z","9.3.0":"2018-05-30T18:53:36.251Z","9.3.1":"2018-06-07T03:31:41.428Z","9.3.2":"2018-06-07T16:18:03.802Z","9.3.3":"2018-06-13T23:39:22.588Z","9.4.0":"2018-06-29T20:18:40.183Z","9.4.1":"2018-07-02T17:13:31.922Z","9.4.2":"2018-07-10T15:53:00.484Z","9.4.3":"2018-07-23T21:05:53.818Z","9.4.4":"2018-07-31T23:57:08.371Z","9.5.0":"2018-08-07T17:04:51.971Z","9.6.0":"2018-08-08T21:42:25.280Z","9.6.1":"2018-08-13T16:51:59.076Z","10.0.0":"2018-09-14T19:44:21.591Z","10.0.1":"2018-10-09T04:56:08.688Z","10.0.2":"2018-11-03T16:03:52.416Z","10.0.3":"2018-12-03T22:19:53.864Z","10.0.4":"2018-12-08T02:28:57.031Z","11.0.0-beta.1":"2018-12-18T18:47:44.565Z","10.0.5":"2018-12-23T16:24:22.416Z","11.0.0-beta.2":"2018-12-23T16:24:55.011Z","10.0.6":"2019-01-02T21:12:01.112Z","11.0.0-beta.3":"2019-01-03T06:12:08.637Z","11.0.0-beta.4":"2019-01-19T03:10:57.862Z","11.0.0-beta.5":"2019-01-25T02:15:00.117Z","11.0.0-beta.6":"2019-02-04T15:47:19.982Z","11.0.0-beta.7":"2019-04-12T01:56:21.876Z","11.0.0-beta.8":"2019-04-13T21:59:44.027Z","11.0.0-beta.9":"2019-04-15T16:38:38.802Z","11.0.0-beta.10":"2019-04-15T21:32:25.999Z","11.0.0-beta.11":"2019-05-02T03:36:21.172Z","11.0.0-beta.12":"2019-05-07T14:12:19.177Z","11.0.0-beta.13":"2019-05-09T13:26:39.831Z","11.0.0-beta.14":"2019-05-09T16:46:33.629Z","11.0.0-beta.15":"2019-05-20T17:25:16.439Z","11.0.0-beta.16":"2019-05-21T12:36:02.530Z","11.0.0-beta.17":"2019-05-28T14:42:25.309Z","11.0.0-beta.18":"2019-06-08T15:00:16.755Z","11.0.0-beta.19":"2019-06-08T15:33:28.096Z","11.0.0-beta.20":"2019-06-20T19:43:17.491Z","11.0.0-beta.21":"2019-07-07T17:31:16.161Z","11.0.0-beta.22":"2019-07-09T05:38:37.453Z","11.0.0-beta.23":"2019-07-09T17:00:32.058Z","11.0.0-beta.24":"2019-07-15T01:48:10.038Z","11.0.0-beta.25":"2019-07-15T15:03:56.366Z","11.0.0-beta.26":"2019-07-15T22:25:28.320Z","11.0.0-beta.27":"2019-07-16T20:26:28.285Z","11.0.0-beta.28":"2019-07-22T13:55:18.939Z","11.0.0-beta.29":"2019-07-25T19:20:26.617Z","11.0.0-beta.30":"2019-07-28T17:19:33.995Z","11.0.0-beta.31":"2019-08-01T19:54:13.981Z","11.0.0":"2019-08-12T23:45:09.684Z","11.1.0":"2019-08-20T01:38:32.793Z","11.2.0":"2019-08-20T01:44:59.078Z","11.3.0":"2019-08-20T08:23:25.476Z","11.3.1":"2019-08-22T13:07:51.270Z","11.3.2":"2019-08-23T22:23:08.740Z","11.3.3":"2019-09-05T22:25:16.795Z","11.3.4":"2019-09-12T20:45:50.466Z","11.3.5":"2019-09-20T15:39:53.245Z","11.3.6":"2019-10-05T18:04:53.364Z","11.1.0-beta.1":"2019-10-07T01:31:29.413Z","11.4.0":"2019-10-07T16:52:00.480Z","11.5.0":"2019-10-22T11:25:53.274Z","11.6.0":"2019-10-24T09:08:40.047Z","11.7.0":"2019-10-31T17:03:11.430Z","11.7.1":"2020-01-03T01:24:45.721Z","11.7.2":"2020-01-08T19:04:12.556Z","11.8.0":"2020-02-10T04:22:57.984Z","11.8.1":"2020-02-10T04:30:46.127Z","11.8.2":"2020-02-10T04:42:54.792Z","11.9.0-beta.1":"2020-02-11T04:34:17.962Z","12.0.0-beta.1":"2020-02-11T19:07:30.482Z","11.9.0":"2020-02-13T16:27:21.378Z","11.9.1":"2020-02-16T18:34:39.638Z","12.0.0":"2020-02-16T21:03:56.039Z","12.0.1":"2020-02-19T18:54:29.753Z","12.0.2":"2020-03-01T18:52:41.175Z","12.0.3":"2020-03-17T11:52:03.242Z","13.0.0-beta.1":"2020-03-31T02:44:31.493Z"},"name":"nock"}