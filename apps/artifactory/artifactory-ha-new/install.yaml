- hosts: localhost
  vars_files:
    vars_local.yaml
  tasks:

      # create processed folder
    - name: Create processed directory if it does not exist
      file:
        path: ./processed
        state: directory
        mode: '0755'

      # setup
    - name: make sure we're in the artifactory namespace
      command: >
        oc project {{ project_name }}

      # make patroni build
    - name: process patroni-build.yaml
      command: >
        oc process -f ./patroni-build.yaml -p GIT_URI=https://github.com/BCDevOps/platform-services \
                                           -p GIT_REF=master \
                                           -p SUFFIX=-pg11 \
                                           -p OUT_VERSION=v11-latest \
                                           -p PG_VERSION=11
      register: patroni_build_processed
      when: build
    - copy: content="{{ patroni_build_processed.stdout }}" dest=./processed/patroni-build.json
      when: build
    - name: apply patroni-build
      command: >
        oc apply -f ./processed/patroni-build.json
      when: build

    - name: trigger patroni build
      command: >
        oc start-build patroni-pg11
      when: build

    - pause:
        prompt: "Hit enter to continue once the patroni build is finished"
      when: build

    - name: tag patroni build
      command: >
        oc tag patroni:v11-latest patroni:v11-stable
      when: build

      # make secret
    - name: process patroni-prereq.yaml
      command: >
        oc process -f ./patroni-prereq.yaml \
                                             -p NAME=patroni \
                                             -p SUFFIX=-001 \
                                             -p APP_DB_PASSWORD={{ db_password }} \
                                             -p APP_DB_USERNAME=artifactory \
                                             -p APP_DB_NAME=artifactory
      register: patroni_secret_processed
    - copy: content="{{ patroni_secret_processed.stdout }}" dest=./processed/patroni-secret.json
    - name: apply patroni-secret
      command: >
        oc apply -f ./processed/patroni-secret.json

      # deploy patroni stateful set
    - name: process patroni-deploy.yaml
      command: >
        oc process -f ./patroni-deploy.yaml -p NAME=patroni \
                                             -p "IMAGE_STREAM_NAMESPACE=devops-artifactory" \
                                             -p "IMAGE_STREAM_TAG=patroni:v11-stable" \
                                             -p IMAGE_REGISTRY=image-registry.openshift-image-registry.svc:5000 \
                                             -p STORAGE_CLASS=netapp-block-standard \
                                             -p REPLICAS=1 \
                                             -p SUFFIX=-001
      register: patroni_statefulset_processed
    - copy: content="{{ patroni_statefulset_processed.stdout }}" dest=./processed/patroni-statefulset.json
    - name: apply patroni-statefulset
      command: >
        oc apply -f ./processed/patroni-statefulset.json

      # wait until they're done.
    - pause:
        prompt: "Hit enter to continue once the patroni stateful set is fully deployed"

    - name: build manifest from template
      template:
        src: manifest.yaml.j2
        dest: ./processed/manifest.yaml


#      # build template from artifactory helm chart
#    - name: create template from helm chart
#      command: >
#        helm template artifactory jfrog/artifactory-ha -f ./{{env}}-helm-values-local.yaml --set database.password={{ db_password }}
#      register: artifactory_processed
#    - copy: content="{{ artifactory_processed.stdout }}" dest=./processed/artifactory_processed.yaml
#
#      # wait for the template to finish
#    - pause:
#        seconds: 15

#      # deploy template
#    - name: apply artifactory_processed
#      command: >
#        oc apply -f ./processed/artifactory_processed.yaml

      # deploy template
    - name: apply artifactory manifest
      command: >
        oc apply -f ./processed/manifest.yaml

      # wait for the service to show up
    - pause:
        seconds: 15

      # make route
    - name: process route.yaml
      command: >
        oc process -f ./route.yaml --param-file=./{{env}}-artifactory-ha.env URL={{ URL }} APP_DB_PASSWORD={{ db_password }} --ignore-unknown-parameters=true
      register: route_processed
    - copy: content="{{ route_processed.stdout }}" dest=./processed/route.json
    - name: apply route
      command: >
        oc apply -f ./processed/route.json

      # wait until they're done.
    - pause:
        prompt: "Hit enter to continue once artifactory is fully deployed"

    - name: Set Artifactory Admin password
      uri:
        url: "https://{{ URL }}/artifactory/api/security/users/authorization/changePassword"
        user: "admin"
        password: "password"
        method: POST
        body_format: json
        headers:
          Content-type: "application/json"
        body: '{"userName": "admin", "oldPassword": "password", "newPassword1": "{{ artifactory_password }}", "newPassword2": "{{ artifactory_password }}"}'
        force_basic_auth: yes
        validate_certs: no

      # make secret
    - name: process artifactory-admin-secret.yaml
      command: >
        oc process -f ./artifactory-admin-secret.yaml --param-file=./{{env}}-artifactory-ha.env ARTIFACTORY_ADMIN_PASSWORD={{ artifactory_password }} --ignore-unknown-parameters=true
      register: app_secret_processed
    - copy: content="{{ app_secret_processed.stdout }}" dest=./processed/artifactory-admin-secret.json
    - name: apply artifactory-admin-secret
      command: >
        oc apply -f ./processed/artifactory-admin-secret.json

    - name: Set Artifactory Custom URL Base
      uri:
        url: "https://{{ URL }}/artifactory/api/system/configuration/baseUrl"
        user: "admin"
        password: "{{ artifactory_password }}"
        method: PUT
        headers:
          Content-type: "text/plain"
        body: "https://{{ URL }}/artifactory"
        force_basic_auth: yes
        validate_certs: no

      # wait until they're done.
    - pause:
        prompt: "Log into Artifactory and add licenses, then press enter to continue."

    - name: Create authenticated_users group
      uri:
        url: "https://{{ URL }}/artifactory/api/security/groups/authenticated_users"
        user: "admin"
        password: "{{ artifactory_password }}"
        method: PUT
        body_format: json
        headers:
          Content-type: "application/json"
        body: '{ "name": "authenticated_users", "description" : "All newly authenticated users are added to this group", "autoJoin" : true }'
        force_basic_auth: yes
        status_code: 201
        validate_certs: no
      ignore_errors: yes

    - name: Create SSO link
      uri:
        url: "https://{{ URL }}/artifactory/api/system/configuration"
        user: "admin"
        password: "{{ artifactory_password }}"
        method: PATCH
        headers:
          Content-type: "application/yaml"
        body: "{{ lookup('file', env+'-sso-link-local.yaml') }}"
        force_basic_auth: yes
        status_code: 201
        validate_certs: no
      ignore_errors: yes

      # delete processed folder
    - name: remove proccessed directory
      file:
        path: ./processed
        state: absent
