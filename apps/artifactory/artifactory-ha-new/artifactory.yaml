- hosts: localhost
  vars_files:
    vars-pat-local.yaml
  tasks:

    - name: Build manifest from template
      template:
        src: ./templates/manifest.yaml.j2
        dest: ./processed/manifest.yaml

      # deploy template
    - name: Apply artifactory manifest
      command: >
        oc apply -f ./processed/manifest.yaml

      # wait for the service to show up
    - name: Wait for the artifactory service to create before continuing.
      pause:
        seconds: 5

      # make route
    - name: Make the artifactory's route (processing)
      command: >
        oc process -f ./templates/route.yaml \
            ARTIFACTORY_NAME={{ artifactory_instance_name }} \
            URL={{ artifactory_url }}
      register: route_processed
    - copy: content="{{ route_processed.stdout }}" dest=./processed/route.json
    - name: Make the artifactory's route (apply)
      command: >
        oc apply -f ./processed/route.json

    - name: Check deployment status for artifactory
      uri:
        url: "https://{{ artifactory_url }}/artifactory/api/system/version"
        user: "admin"
        password: "password"
        method: GET
        force_basic_auth: yes
        validate_certs: no
      register: artifactory_status
      ignore_errors: yes
      until: artifactory_status.status == 200
      retries: 20
      delay: 10

    - name: Set Artifactory admin password
      uri:
        url: "https://{{ artifactory_url }}/artifactory/api/security/users/authorization/changePassword"
        user: "admin"
        password: "password"
        method: POST
        body_format: json
        headers:
          Content-type: "application/json"
        body: '{"userName": "admin", "oldPassword": "password", "newPassword1": "{{ artifactory_password }}", "newPassword2": "{{ artifactory_password }}"}'
        force_basic_auth: yes
        validate_certs: no

      # make secret
    - name: Make the admin secret (processing)
      command: >
        oc process -f ./templates/artifactory-admin-secret.yaml \
            ARTIFACTORY_NAME={{ artifactory_instance_name }} \
            ARTIFACTORY_ADMIN_PASSWORD={{ artifactory_password }}
      register: app_secret_processed
    - copy: content="{{ app_secret_processed.stdout }}" dest=./processed/artifactory-admin-secret.json
    - name: Make the admin secret (apply)
      command: >
        oc apply -f ./processed/artifactory-admin-secret.json

    - name: Set artifactory custom URL base
      uri:
        url: "https://{{ artifactory_url }}/artifactory/api/system/configuration/baseUrl"
        user: "admin"
        password: "{{ artifactory_password }}"
        method: PUT
        headers:
          Content-type: "text/plain"
        body: "https://{{ artifactory_url }}/artifactory"
        force_basic_auth: yes
        validate_certs: no

    - name: Upload artifactory licenses
      uri:
        url: "https://{{ artifactory_url }}/artifactory/api/system/licenses"
        user: "admin"
        password: "{{ artifactory_password }}"
        method: POST
        body_format: json
        headers:
          Content-type: "application/json"
        body: "{{ artifactory_licenses }}"
        force_basic_auth: yes
        validate_certs: no

    - name: Create authenticated_users group
      uri:
        url: "https://{{ artifactory_url }}/artifactory/api/security/groups/authenticated_users"
        user: "admin"
        password: "{{ artifactory_password }}"
        method: PUT
        body_format: json
        headers:
          Content-type: "application/json"
        body: '{ "name": "authenticated_users", "description" : "All newly authenticated users are added to this group", "autoJoin" : true }'
        force_basic_auth: yes
        status_code: 201
        validate_certs: no
      ignore_errors: yes

    - name: Update reader's group
      uri:
        url: "https://{{ artifactory_url }}/artifactory/api/security/groups/readers"
        user: "admin"
        password: "{{ artifactory_password }}"
        method: POST
        body_format: json
        headers:
          Content-type: "application/json"
        body: '{ "autoJoin" : false }'
        force_basic_auth: yes
        status_code: 200
        validate_certs: no
      ignore_errors: yes

    - name: Build artifactory config from template
      template:
        src: ./templates/artifactory-config.yaml.j2
        dest: ./processed/artifactory-config.yaml

    - name: Apply artifactory configuration (including SSO)
      uri:
        url: "https://{{ artifactory_url }}/artifactory/api/system/configuration"
        user: "admin"
        password: "{{ artifactory_password }}"
        method: PATCH
        headers:
          Content-type: "application/yaml"
        body: "{{ lookup('file', './processed/artifactory-config.yaml') }}"
        force_basic_auth: yes
        status_code: 200
        validate_certs: no
      ignore_errors: yes

    - name: Create remote repos
      uri:
        url: "https://{{ artifactory_url }}/artifactory/api/repositories/{{ item.repo_key }}"
        user: "admin"
        password: "{{ artifactory_password }}"
        method: PUT
        body_format: json
        headers:
          Content-type: "application/json"
        body: '{"key" : "{{ item.repo_key }}", "description" : "{{ item.repo_desc }}", "rclass" : "remote", "url" : "{{ item.remote_url }}", "packageType" : "{{ item.pkg_type }}"}'
        force_basic_auth: yes
      ignore_errors: yes
      loop: "{{ repo_list }}"

    - name: Update authenticated_users's group
      uri:
        url: "https://{{ artifactory_url }}/artifactory/api/security/groups/authenticated_users"
        user: "admin"
        password: "{{ artifactory_password }}"
        method: PUT
        body_format: json
        headers:
          Content-type: "application/json"
        body: "{{ lookup('file', 'templates/authenticated_users_permissions.json') }}"
        force_basic_auth: yes
        status_code: 201
        validate_certs: no
      ignore_errors: yes

    # right now, there is no way to confirm that the members are up before starting the rest of the config after installation,
    # so, this work around involves setting the number of member nodes to 0 and then patching the new replica numbers in last.
    #
    # if we try to run the rest of the processing while the members are booting up, it causes issues where certain steps
    # will fail if a member is in the middle of joining the cluster when we try to hit the API.
    #
    # this is not ideal, but it works for now - i'm waiting on jfrog to get me a better way to do this.
    - name: Turn on members
      command: >
        oc patch statefulset artifactory-ha-member -p '{"spec":{"replicas":{{ artifactory_replica_count }}}}'

      # delete processed folder
    - name: Remove proccessed directory
      file:
        path: ./processed
        state: absent
